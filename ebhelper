// ==UserScript==
// @name         이벗패턴 분석기 (개선버전)
// @namespace    http://tampermonkey.net/
// @version      2.0
// @description  ebut3pl.co.kr 사이트에서 주문데이터 패턴을 분석하고 자동 출력하는 도구
// @author       Claude
// @match        https://www.ebut3pl.co.kr/*
// @grant        GM_xmlhttpRequest
// @connect      www.ebut3pl.co.kr
// @require      https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js
// ==/UserScript==

(function() {
    'use strict';

    // 데이터 저장소
    const dataStore = {
        batches: null,
        orders: null,
        currentDate: null,
        lastFetchTime: null,
        filteredBatches: null, // 필터링된 배치 데이터 저장
        shippingLogs: {
            completed: [], // 성공한 송장번호 배열
            failed: []     // 실패한 송장번호 배열
        },
        printPatterns: [],  // 출력용 패턴 저장
        dailyShippingData: null, // 금일 출고내역 데이터 저장
    };

    // 팝업창 참조
    let analyzerWindow = null;
    let dailyShippingWindow = null; // 금일 출고내역 팝업창 참조
    let orderProcessWindow = null; // 주문 가공 팝업창 참조

    // 디버그 로그 함수
    function log(message, data = null) {
        const timestamp = new Date().toLocaleTimeString();
        console.log(`[패턴분석기 ${timestamp}] ${message}`);
        if (data) console.log(data);
    }

    // 네비게이션 메뉴에 분석기 버튼 추가
    function addNavMenuButton() {
        // 상담전용창 메뉴 항목 찾기
        const navMenu = document.querySelector('.nav.navbar-nav.navbar-right');
        if (!navMenu) return;

        // 기존 메뉴 항목들 제거
        const menuItemsToRemove = Array.from(navMenu.querySelectorAll('li')).filter(li => {
            const text = li.textContent.trim();
            return ['알림', '작업상태', '판매처접속', '메모', '발송대기', '문자메세지'].some(item => text.includes(item));
        });

        menuItemsToRemove.forEach(item => item.remove());

        // CS 상담전용창 항목 찾기
        const csMenuItem = Array.from(navMenu.querySelectorAll('li')).find(li =>
            li.textContent.includes('상담전용창')
        );

        if (!csMenuItem) return;

        // 분석기 메뉴 항목 생성
        const analyzerMenuItem = document.createElement('li');
        analyzerMenuItem.className = '';
        analyzerMenuItem.innerHTML = `
            <a href="javascript:void(0);" id="pattern-analyzer-nav-button">
                <i class="fa fa-bar-chart green"></i>&nbsp; <strong>주문패턴분석기</strong>
            </a>
        `;

        // 주문 가공 메뉴 항목 생성
        const orderProcessMenuItem = document.createElement('li');
        orderProcessMenuItem.className = '';
        orderProcessMenuItem.innerHTML = `
            <a href="javascript:void(0);" id="order-process-nav-button">
                <i class="fa fa-cogs orange"></i>&nbsp; <strong>주문 가공</strong>
            </a>
        `;

        // 금일 출고내역 메뉴 항목 생성
        const dailyShippingMenuItem = document.createElement('li');
        dailyShippingMenuItem.className = '';
        dailyShippingMenuItem.innerHTML = `
            <a href="javascript:void(0);" id="daily-shipping-nav-button">
                <i class="fa fa-truck blue"></i>&nbsp; <strong>금일 출고내역</strong>
            </a>
        `;

        // 상담전용창 항목 앞에 추가
        navMenu.insertBefore(dailyShippingMenuItem, csMenuItem);
        navMenu.insertBefore(orderProcessMenuItem, dailyShippingMenuItem);
        navMenu.insertBefore(analyzerMenuItem, orderProcessMenuItem);

        // 클릭 이벤트 리스너 추가
        document.getElementById('pattern-analyzer-nav-button').addEventListener('click', () => {
            openAnalyzerWindow();
        });

        document.getElementById('order-process-nav-button').addEventListener('click', () => {
            openOrderProcessWindow();
        });

        document.getElementById('daily-shipping-nav-button').addEventListener('click', () => {
            openDailyShippingWindow();
        });
    }

    // 금일 출고내역 팝업창 열기
    function openDailyShippingWindow() {
        // 이미 열려있는 창이 있으면 포커스
        if (dailyShippingWindow && !dailyShippingWindow.closed) {
            dailyShippingWindow.focus();
            return;
        }

        // 팝업창 열기
        dailyShippingWindow = window.open('', 'dailyShippingWindow', 'width=1000,height=700,resizable=yes,scrollbars=yes');

        // 팝업창 콘텐츠 생성
        const doc = dailyShippingWindow.document;
        doc.open();
        doc.write(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>금일 출고내역</title>
                <meta charset="UTF-8">
                <style>
                    body {
                        font-family: 'Malgun Gothic', Arial, sans-serif;
                        margin: 0;
                        padding: 20px;
                        background-color: #f9f9fa;
                        color: #333;
                    }
                    .daily-shipping-header {
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        margin-bottom: 20px;
                        padding-bottom: 10px;
                        border-bottom: 2px solid #3f51b5;
                    }
                    .daily-shipping-title {
                        margin: 0;
                        color: #3f51b5;
                        font-size: 24px;
                        font-weight: bold;
                    }
                    .daily-shipping-input-group {
                        display: flex;
                        gap: 12px;
                        margin-bottom: 20px;
                        align-items: center;
                        flex-wrap: wrap;
                        background-color: #fff;
                        padding: 12px;
                        border-radius: 8px;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
                    }
                    .daily-shipping-input-group label {
                        font-weight: bold;
                        color: #555;
                    }
                    .daily-shipping-input-group input {
                        padding: 8px 12px;
                        border: 1px solid #ddd;
                        border-radius: 4px;
                        box-shadow: inset 0 1px 3px rgba(0,0,0,0.05);
                    }
                    .daily-shipping-button {
                        padding: 8px 14px;
                        background: #3f51b5;
                        color: white;
                        border: none;
                        border-radius: 4px;
                        cursor: pointer;
                        transition: all 0.2s;
                        font-weight: bold;
                    }
                    .daily-shipping-button:hover {
                        background: #303f9f;
                        transform: translateY(-1px);
                        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                    }
                    .daily-shipping-button:active {
                        transform: translateY(0);
                    }
                    .loading-spinner {
                        border: 4px solid #f3f3f3;
                        border-top: 4px solid #3f51b5;
                        border-radius: 50%;
                        width: 24px;
                        height: 24px;
                        animation: spin 2s linear infinite;
                        display: inline-block;
                        margin-right: 10px;
                    }
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                    .status-message {
                        padding: 15px;
                        margin: 15px 0;
                        border-radius: 6px;
                        background-color: #f8d7da;
                        color: #721c24;
                        text-align: center;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
                    }
                    .success-message {
                        padding: 15px;
                        margin: 15px 0;
                        border-radius: 6px;
                        background-color: #d4edda;
                        color: #155724;
                        text-align: center;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
                    }
                    .data-info {
                        font-size: 12px;
                        color: #666;
                        margin-left: 10px;
                        background-color: #f5f5f5;
                        padding: 4px 8px;
                        border-radius: 4px;
                    }
                    .sites-container {
                        display: flex;
                        flex-wrap: wrap;
                        gap: 10px;
                        margin-top: 20px;
                    }
                    .courier-section {
                        margin: 15px 0;
                        background-color: #fff;
                        border-radius: 8px;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
                        padding: 15px;
                    }
                    .courier-title {
                        font-size: 18px;
                        font-weight: bold;
                        color: #3f51b5;
                        margin-bottom: 10px;
                        border-bottom: 1px solid #eee;
                        padding-bottom: 5px;
                    }
                    .site-button {
                        display: inline-flex;
                        align-items: center;
                        padding: 8px 12px;
                        background-color: #e8eaf6;
                        border: 1px solid #c5cae9;
                        border-radius: 4px;
                        font-size: 14px;
                        color: #3f51b5;
                        cursor: pointer;
                        transition: all 0.2s;
                    }
                    .site-button:hover {
                        background-color: #c5cae9;
                        transform: translateY(-1px);
                        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                    }
                    .site-button .count {
                        background-color: #3f51b5;
                        color: white;
                        border-radius: 50%;
                        font-size: 12px;
                        padding: 2px 6px;
                        margin-left: 8px;
                    }
                </style>
            </head>
            <body>
                <div class="daily-shipping-header">
                    <h2 class="daily-shipping-title">금일 출고내역</h2>
                </div>

                <div class="daily-shipping-input-group">
                    <label for="start-date-input">조회 시작일:</label>
                    <input type="date" id="start-date-input">

                    <label for="end-date-input">조회 종료일:</label>
                    <input type="date" id="end-date-input">

                    <button id="search-button" class="daily-shipping-button">조회</button>
                    <span id="data-info" class="data-info">데이터 정보: 없음</span>
                </div>

                <div id="result-container">
                    <div id="loading-container" style="display: none; text-align: center; margin: 50px 0;">
                        <div class="loading-spinner"></div>
                        <p>데이터를 불러오는 중입니다...</p>
                    </div>
                    <div id="courier-container"></div>
                </div>
            </body>
            </html>
        `);
        doc.close();

        // 금일 출고내역 이벤트 초기화
        initializeDailyShippingEvents();
    }

    // 금일 출고내역 이벤트 초기화
    function initializeDailyShippingEvents() {
        if (!dailyShippingWindow || dailyShippingWindow.closed) return;

        const doc = dailyShippingWindow.document;

        // 현재 날짜를 기본값으로 설정
        const today = new Date();
        const koreaTime = new Date(today.getTime() + (9 * 60 * 60 * 1000));
        const koreaDateString = koreaTime.toISOString().split('T')[0];

        doc.getElementById('start-date-input').value = koreaDateString;
        doc.getElementById('end-date-input').value = koreaDateString;

        // 조회 버튼 클릭 이벤트
        doc.getElementById('search-button').addEventListener('click', function() {
            fetchDailyShippingData();
        });

        // 엔터 키로 검색 트리거
        doc.getElementById('start-date-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                doc.getElementById('search-button').click();
            }
        });

        doc.getElementById('end-date-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                doc.getElementById('search-button').click();
            }
        });

        // 페이지 로드 시 자동 조회
        setTimeout(() => {
            doc.getElementById('search-button').click();
        }, 500);
    }

    // 금일 출고내역 데이터 조회
    function fetchDailyShippingData() {
        if (!dailyShippingWindow || dailyShippingWindow.closed) return;

        const doc = dailyShippingWindow.document;
        const startDate = doc.getElementById('start-date-input').value.replace(/-/g, '');
        const endDate = doc.getElementById('end-date-input').value.replace(/-/g, '');

        if (!startDate || !endDate) {
            displayDailyShippingMessage(doc, '날짜를 선택해주세요.', 'error');
            return;
        }

        // 로딩 표시
        doc.getElementById('loading-container').style.display = 'block';
        doc.getElementById('courier-container').innerHTML = '';

        // 포맷된 날짜 (YYYY-MM-DD 형식)
        const formattedStartDate = `${startDate.substring(0, 4)}-${startDate.substring(4, 6)}-${startDate.substring(6, 8)}`;
        const formattedEndDate = `${endDate.substring(0, 4)}-${endDate.substring(4, 6)}-${endDate.substring(6, 8)}`;

        // API 요청 URL
        const apiUrl = `https://www.ebut3pl.co.kr/site/site210main_jdata?site_code=&basic_prov=&basic_prov_name=&VIEW_TYPE=2&ORDLIST_CUST=&ORDLIST_BRAND=&ORDLIST_IVLEVEL=&ORDLIST_NO1=&ORDLIST_OMAN=&ORDLIST_RMAN=&ORDLIST_TEL=&ORDLIST_FNSH=&ORDLIST_IVTRUE=&ORDLIST_GBN=&ORDLIST_MIYN=&DATE_GBN=ord_ddate&DATE1=${formattedStartDate}&DATE2=${formattedEndDate}&ORDLIST_UPTYPE=&ORDLIST_NAME=&ORDLIST_MAT=&ORDLIST_DNO=&ORDLIST_SEQ=&ORDLIST_DOFC=&GROUP_VIEW_TYPE=1&ORDLIST_IVAFYN=&BASIC_NAME_GBN=&BASIC_NAME_VAL=&BASIC_BRAND=&ORDADD_REYN=&ORDLIST_NAME_NOT=&ORDLIST_OPT1_NOT=&gridReload=true&_search=false&nd=${Date.now()}&rows=2000000&page=1&sidx=ordlist_code&sord=asc`;

        log(`금일 출고내역 데이터 요청: ${formattedStartDate} ~ ${formattedEndDate}`);

        // API 요청
        GM_xmlhttpRequest({
            method: 'GET',
            url: apiUrl,
            headers: {
                'Accept': 'application/json, text/javascript, */*; q=0.01',
                'X-Requested-With': 'XMLHttpRequest',
                'Referer': 'https://www.ebut3pl.co.kr/jsp/site/site210main.jsp',
                'Cookie': document.cookie,
                'User-Agent': navigator.userAgent
            },
            onload: function(response) {
                try {
                    doc.getElementById('loading-container').style.display = 'none';

                    if (!response.responseText) {
                        throw new Error('응답이 비어있습니다.');
                    }

                    const data = JSON.parse(response.responseText);
                    if (!data || !data.rows || !Array.isArray(data.rows)) {
                        throw new Error('데이터 형식이 올바르지 않습니다.');
                    }

                    // 데이터가 비어있는 경우
                    if (data.rows.length === 0) {
                        displayDailyShippingMessage(doc, '해당 날짜에 출고 데이터가 없습니다.', 'error');
                        return;
                    }

                    // 데이터 저장
                    dataStore.dailyShippingData = data.rows;
                    log(`금일 출고내역 데이터 저장 완료: ${data.rows.length}개`);

                    // 데이터 정보 표시
                    updateDailyShippingDataInfo(doc, data.rows.length, formattedStartDate, formattedEndDate);

                    // 데이터 가공 및 표시
                    processDailyShippingData(doc, data.rows);
                } catch (error) {
                    doc.getElementById('loading-container').style.display = 'none';
                    console.error('금일 출고내역 데이터 처리 오류:', error);
                    log(`금일 출고내역 데이터 처리 오류: ${error.message}`);
                    displayDailyShippingMessage(doc, `데이터 처리 중 오류가 발생했습니다: ${error.message}`, 'error');
                }
            },
            onerror: function(error) {
                doc.getElementById('loading-container').style.display = 'none';
                console.error('금일 출고내역 데이터 요청 오류:', error);
                log(`금일 출고내역 데이터 요청 오류: ${error.statusText || '알 수 없는 오류'}`);
                displayDailyShippingMessage(doc, '데이터를 불러오는 중 오류가 발생했습니다.', 'error');
            }
        });
    }

    // 금일 출고내역 데이터 정보 업데이트
    function updateDailyShippingDataInfo(doc, count, startDate, endDate) {
        const dataInfoElement = doc.getElementById('data-info');
        if (!dataInfoElement) return;

        const time = new Date().toLocaleTimeString();
        dataInfoElement.textContent = `데이터 정보: ${startDate} ~ ${endDate} (${time}) - 총 ${count}개 주문`;
    }

    // 금일 출고내역 데이터 가공 및 표시
    function processDailyShippingData(doc, orders) {
        // 택배사별 그룹화
        const courierGroups = {};

        // 택배사별 + 판매처별 송장번호 분류
        orders.forEach(order => {
            const courier = order.ordlist_dofc || '기타';
            const siteName = order.site_name || '기타';
            const trackingNo = order.ordlist_dno_ori || order.ordlist_dno || '';

            if (!trackingNo) return; // 송장번호가 없으면 제외

            // 택배사 그룹 초기화
            if (!courierGroups[courier]) {
                courierGroups[courier] = {
                    sites: {},
                    allTrackingNumbers: []
                };
            }

            // 판매처 그룹 초기화
            if (!courierGroups[courier].sites[siteName]) {
                courierGroups[courier].sites[siteName] = {
                    trackingNumbers: [],
                    orders: []
                };
            }

            // 송장번호 중복 제거
            if (!courierGroups[courier].sites[siteName].trackingNumbers.includes(trackingNo)) {
                courierGroups[courier].sites[siteName].trackingNumbers.push(trackingNo);
                courierGroups[courier].sites[siteName].orders.push(order);

                // 택배사 전체 송장번호에도 추가 (중복 제거)
                if (!courierGroups[courier].allTrackingNumbers.includes(trackingNo)) {
                    courierGroups[courier].allTrackingNumbers.push(trackingNo);
                }
            }
        });

        // UI 구성
        const courierContainer = doc.getElementById('courier-container');
        courierContainer.innerHTML = '';

        // 택배사별 섹션 생성
        Object.keys(courierGroups).sort().forEach(courier => {
            const courierData = courierGroups[courier];

            // 택배사 섹션 생성
            const courierSection = doc.createElement('div');
            courierSection.className = 'courier-section';

            // 택배사 제목
            const courierTitle = doc.createElement('div');
            courierTitle.className = 'courier-title';
            courierTitle.innerHTML = `
                ${courier} <span style="color:#666;font-size:14px;">(총 ${courierData.allTrackingNumbers.length}건)</span>
                <div style="float:right;display:flex;gap:5px;">
                    <button class="daily-shipping-button" data-courier="${courier}" data-action="copy-all" style="font-size:12px;padding:4px 8px;background-color:#4CAF50;">
                        전체 텍스트 복사
                    </button>
                    <button class="daily-shipping-button" data-courier="${courier}" data-action="download-all" style="font-size:12px;padding:4px 8px;">
                        전체 엑셀 다운로드
                    </button>
                </div>
            `;
            courierSection.appendChild(courierTitle);

            // 판매처별 버튼 컨테이너
            const sitesContainer = doc.createElement('div');
            sitesContainer.className = 'sites-container';

            // 판매처별 버튼 생성
            Object.keys(courierData.sites).sort().forEach(site => {
                const siteData = courierData.sites[site];
                const trackingCount = siteData.trackingNumbers.length;

                const siteButtonContainer = doc.createElement('div');
                siteButtonContainer.style.display = 'flex';
                siteButtonContainer.style.flexDirection = 'column';
                siteButtonContainer.style.gap = '4px';

                const siteButton = doc.createElement('button');
                siteButton.className = 'site-button';
                siteButton.dataset.courier = courier;
                siteButton.dataset.site = site;
                siteButton.dataset.action = 'download';
                siteButton.innerHTML = `
                    ${site} <span class="count">${trackingCount}</span>
                `;

                const copyButton = doc.createElement('button');
                copyButton.className = 'site-button';
                copyButton.dataset.courier = courier;
                copyButton.dataset.site = site;
                copyButton.dataset.action = 'copy';
                copyButton.style.backgroundColor = '#e8f5e9';
                copyButton.style.borderColor = '#a5d6a7';
                copyButton.style.color = '#2e7d32';
                copyButton.innerHTML = `텍스트 복사`;

                siteButtonContainer.appendChild(siteButton);
                siteButtonContainer.appendChild(copyButton);
                sitesContainer.appendChild(siteButtonContainer);
            });

            courierSection.appendChild(sitesContainer);
            courierContainer.appendChild(courierSection);
        });

        // 이벤트 리스너 추가
        addDailyShippingEventListeners(doc, courierGroups);
    }

    // 금일 출고내역 이벤트 리스너 추가
    function addDailyShippingEventListeners(doc, courierGroups) {
        // 버튼 클릭 이벤트
        const buttons = doc.querySelectorAll('.site-button, [data-action]');
        buttons.forEach(button => {
            button.addEventListener('click', function() {
                const courier = this.dataset.courier;
                const site = this.dataset.site;
                const action = this.dataset.action;

                if (!courierGroups[courier]) return;

                let trackingNumbers = [];

                // 전체 택배사 데이터인지 특정 판매처 데이터인지 확인
                if (site) {
                    if (!courierGroups[courier].sites[site]) return;
                    trackingNumbers = courierGroups[courier].sites[site].trackingNumbers;
                } else {
                    trackingNumbers = courierGroups[courier].allTrackingNumbers;
                }

                // 액션에 따른 처리
                if (action === 'download' || action === 'download-all') {
                    downloadExcel(trackingNumbers, courier, site);
                } else if (action === 'copy' || action === 'copy-all') {
                    copyTrackingNumbers(trackingNumbers, courier, site);
                }
            });
        });
    }

    // 송장번호 텍스트 복사
    function copyTrackingNumbers(trackingNumbers, courier, site) {
        if (!trackingNumbers || trackingNumbers.length === 0) {
            alert('복사할 송장번호가 없습니다.');
            return;
        }

        // 텍스트 모달 창 표시
        showTrackingNumbersModal(trackingNumbers, courier, site);
    }

    // 송장번호 목록 모달 표시
    function showTrackingNumbersModal(trackingNumbers, courier, site) {
        const doc = dailyShippingWindow.document;

        // 이미 모달이 있으면 제거
        const existingModal = doc.getElementById('tracking-numbers-modal');
        if (existingModal) {
            existingModal.remove();
        }

        // 모달 컨테이너 생성
        const modalOverlay = doc.createElement('div');
        modalOverlay.id = 'tracking-numbers-modal';
        modalOverlay.style.position = 'fixed';
        modalOverlay.style.top = '0';
        modalOverlay.style.left = '0';
        modalOverlay.style.width = '100%';
        modalOverlay.style.height = '100%';
        modalOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
        modalOverlay.style.display = 'flex';
        modalOverlay.style.justifyContent = 'center';
        modalOverlay.style.alignItems = 'center';
        modalOverlay.style.zIndex = '1000';

        // 모달 내용 생성
        const modalContent = doc.createElement('div');
        modalContent.style.backgroundColor = 'white';
        modalContent.style.borderRadius = '8px';
        modalContent.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
        modalContent.style.width = '500px';
        modalContent.style.maxWidth = '90%';
        modalContent.style.maxHeight = '80vh';
        modalContent.style.display = 'flex';
        modalContent.style.flexDirection = 'column';
        modalContent.style.overflow = 'hidden';

        // 모달 헤더
        const modalHeader = doc.createElement('div');
        modalHeader.style.padding = '16px';
        modalHeader.style.borderBottom = '1px solid #eee';
        modalHeader.style.display = 'flex';
        modalHeader.style.justifyContent = 'space-between';
        modalHeader.style.alignItems = 'center';

        const modalTitle = doc.createElement('h3');
        modalTitle.style.margin = '0';
        modalTitle.style.fontSize = '18px';
        modalTitle.style.fontWeight = 'bold';
        modalTitle.style.color = '#333';

        const title = site ?
            `${courier} - ${site} 송장번호 복사 (${trackingNumbers.length}개)` :
            `${courier} 송장번호 복사 (${trackingNumbers.length}개)`;
        modalTitle.textContent = title;

        const closeButton = doc.createElement('button');
        closeButton.textContent = '×';
        closeButton.style.background = 'none';
        closeButton.style.border = 'none';
        closeButton.style.fontSize = '24px';
        closeButton.style.cursor = 'pointer';
        closeButton.style.color = '#999';
        closeButton.style.padding = '0';
        closeButton.style.lineHeight = '1';

        closeButton.addEventListener('click', () => {
            modalOverlay.remove();
        });

        modalHeader.appendChild(modalTitle);
        modalHeader.appendChild(closeButton);

        // 모달 본문
        const modalBody = doc.createElement('div');
        modalBody.style.padding = '16px';
        modalBody.style.flex = '1';
        modalBody.style.overflowY = 'auto';

        // 안내 메시지
        const infoText = doc.createElement('p');
        infoText.textContent = '아래 텍스트를 복사하여 사용하세요:';
        infoText.style.margin = '0 0 12px 0';
        infoText.style.color = '#666';
        modalBody.appendChild(infoText);

        // 텍스트 영역 (직접 복사용)
        const textarea = doc.createElement('textarea');
        textarea.style.width = '100%';
        textarea.style.height = '200px'; // 높이 증가
        textarea.style.padding = '8px';
        textarea.style.border = '1px solid #ddd';
        textarea.style.borderRadius = '4px';
        textarea.style.marginBottom = '16px';
        textarea.style.resize = 'vertical';
        textarea.style.fontFamily = 'monospace';
        textarea.style.fontSize = '14px';
        textarea.value = trackingNumbers.join('\n');
        textarea.readOnly = true;

        // 복사 버튼 컨테이너
        const buttonContainer = doc.createElement('div');
        buttonContainer.style.display = 'flex';
        buttonContainer.style.gap = '8px';

        // 복사 버튼
        const copyButton = doc.createElement('button');
        copyButton.textContent = '클립보드에 복사';
        copyButton.style.backgroundColor = '#3f51b5';
        copyButton.style.color = 'white';
        copyButton.style.border = 'none';
        copyButton.style.borderRadius = '4px';
        copyButton.style.padding = '8px 12px';
        copyButton.style.cursor = 'pointer';

        copyButton.addEventListener('click', () => {
            textarea.select();

            let success = false;
            try {
                success = doc.execCommand('copy');
            } catch (err) {
                console.error('복사 실패:', err);
            }

            if (success) {
                displayCopySuccess(buttonContainer);
            } else {
                // 대체 복사 방법 시도
                navigator.clipboard.writeText(textarea.value)
                    .then(() => {
                        displayCopySuccess(buttonContainer);
                    })
                    .catch(err => {
                        console.error('클립보드 복사 오류:', err);
                        alert('복사에 실패했습니다.');
                    });
            }
        });

        // 닫기 버튼
        const closeModalButton = doc.createElement('button');
        closeModalButton.textContent = '닫기';
        closeModalButton.style.backgroundColor = '#f0f0f0';
        closeModalButton.style.color = '#333';
        closeModalButton.style.border = '1px solid #ddd';
        closeModalButton.style.borderRadius = '4px';
        closeModalButton.style.padding = '8px 12px';
        closeModalButton.style.cursor = 'pointer';

        closeModalButton.addEventListener('click', () => {
            modalOverlay.remove();
        });

        buttonContainer.appendChild(copyButton);
        buttonContainer.appendChild(closeModalButton);

        // 모달 구성
        modalBody.appendChild(textarea);
        modalBody.appendChild(buttonContainer);

        modalContent.appendChild(modalHeader);
        modalContent.appendChild(modalBody);

        modalOverlay.appendChild(modalContent);
        doc.body.appendChild(modalOverlay);

        // 포커스를 텍스트 영역에 설정하고 모든 텍스트 선택
        setTimeout(() => {
            textarea.focus();
            textarea.select();
        }, 100);

        // ESC 키로 모달 닫기
        doc.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                modalOverlay.remove();
            }
        });
    }

    // 복사 성공 메시지 표시
    function displayCopySuccess(container) {
        const doc = dailyShippingWindow.document;

        // 복사 성공 메시지 생성
        const successMessage = doc.createElement('div');
        successMessage.textContent = '복사되었습니다!';
        successMessage.style.color = '#4CAF50';
        successMessage.style.fontWeight = 'bold';
        successMessage.style.marginLeft = '8px';
        successMessage.style.display = 'flex';
        successMessage.style.alignItems = 'center';

        // 컨테이너에 메시지 추가
        container.appendChild(successMessage);

        // 3초 후 메시지 제거
        setTimeout(() => {
            successMessage.remove();
        }, 3000);
    }

    // 엑셀 다운로드 함수
    function downloadExcel(trackingNumbers, courier, site) {
        if (!trackingNumbers || trackingNumbers.length === 0) {
            alert('다운로드할 송장번호가 없습니다.');
            return;
        }

        // ExcelJS 라이브러리 동적 로드
        const loadExcelJS = new Promise((resolve, reject) => {
            if (typeof ExcelJS !== 'undefined') {
                resolve(ExcelJS);
                return;
            }

            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/exceljs@4.3.0/dist/exceljs.min.js';
            script.onload = () => resolve(ExcelJS);
            script.onerror = () => {
                console.error('ExcelJS 로드 실패, SheetJS 시도');

                // ExcelJS 로드 실패 시 SheetJS 시도
                if (typeof XLSX !== 'undefined') {
                    resolve(null); // ExcelJS 없음, XLSX 사용
                    return;
                }

                const sheetjsScript = document.createElement('script');
                sheetjsScript.src = 'https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js';
                sheetjsScript.onload = () => resolve(null); // XLSX 로드 성공, ExcelJS 없음
                sheetjsScript.onerror = () => reject(new Error('라이브러리 로드 실패'));
                document.head.appendChild(sheetjsScript);
            };
            document.head.appendChild(script);
        });

        loadExcelJS.then((ExcelJS) => {
            try {
                // 날짜 형식 지정 (YYYYMMDD)
                const today = new Date();
                const year = today.getFullYear();
                const month = String(today.getMonth() + 1).padStart(2, '0');
                const day = String(today.getDate()).padStart(2, '0');
                const dateStr = `${year}${month}${day}`;

                // 파일명 생성 (ECMS_YYYYMMDD.xlsx)
                const filename = `ECMS_${dateStr}.xlsx`;

                // ExcelJS 있는 경우 사용 (더 많은 스타일링 옵션)
                if (ExcelJS) {
                    createExcelWithExcelJS(trackingNumbers, filename);
                } else {
                    // XLSX 사용 (기본 기능만)
                    createExcelWithXLSX(trackingNumbers, filename);
                }

                const message = site ?
                    `${courier} - ${site} 엑셀이 다운로드되었습니다.` :
                    `${courier} 전체 엑셀이 다운로드되었습니다.`;

                displayDailyShippingMessage(dailyShippingWindow.document, message, 'success');
            } catch (error) {
                console.error('엑셀 생성 오류:', error);
                alert('엑셀 파일 생성 중 오류가 발생했습니다. CSV로 다운로드합니다.');
                downloadCSV(trackingNumbers, `ECMS_${dateStr}`);
            }
        }).catch(error => {
            console.error('라이브러리 로드 오류:', error);

            // 날짜 형식 지정 (YYYYMMDD)
            const today = new Date();
            const year = today.getFullYear();
            const month = String(today.getMonth() + 1).padStart(2, '0');
            const day = String(today.getDate()).padStart(2, '0');
            const dateStr = `${year}${month}${day}`;

            downloadCSV(trackingNumbers, `ECMS_${dateStr}`);
        });
    }

    // ExcelJS로 엑셀 생성 (향상된 스타일링)
    function createExcelWithExcelJS(trackingNumbers, filename) {
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('List');

        // 컬럼 너비 설정
        worksheet.columns = [
            { header: 'No', key: 'no', width: 10 },
            { header: 'Tracking No', key: 'tracking', width: 20 }
        ];

        // 헤더 스타일 적용 - A1, B1 셀에만 배경색 적용
        const headerRow = worksheet.getRow(1);
        headerRow.font = { bold: true };
        headerRow.alignment = { horizontal: 'center' };

        // A1, B1 셀에만 배경색 적용
        worksheet.getCell('A1').fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FFC0E6F5' } // #C0E6F5 색상
        };

        worksheet.getCell('B1').fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FFC0E6F5' } // #C0E6F5 색상
        };

        // 데이터 추가
        trackingNumbers.forEach((trackingNo, index) => {
            worksheet.addRow({
                no: index + 1,
                tracking: trackingNo
            });

            // 각 셀에 스타일 적용
            const row = worksheet.getRow(index + 2);
            row.alignment = { horizontal: 'center' };

            // 모든 셀에 테두리 추가
            row.eachCell((cell) => {
                cell.border = {
                    top: { style: 'thin' },
                    left: { style: 'thin' },
                    bottom: { style: 'thin' },
                    right: { style: 'thin' }
                };
            });
        });

        // 첫 번째 행 셀에도 테두리 추가
        headerRow.eachCell((cell) => {
            cell.border = {
                top: { style: 'thin' },
                left: { style: 'thin' },
                bottom: { style: 'thin' },
                right: { style: 'thin' }
            };
        });

        // 엑셀 파일 다운로드
        workbook.xlsx.writeBuffer().then(buffer => {
            const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
            const url = URL.createObjectURL(blob);

            const downloadLink = document.createElement('a');
            downloadLink.href = url;
            downloadLink.download = filename;
            downloadLink.style.display = 'none';

            document.body.appendChild(downloadLink);
            downloadLink.click();

            setTimeout(() => {
                document.body.removeChild(downloadLink);
                URL.revokeObjectURL(url);
            }, 100);
        });
    }

    // XLSX로 엑셀 생성 (기본 기능)
    function createExcelWithXLSX(trackingNumbers, filename) {
        // 워크북 생성
        const wb = XLSX.utils.book_new();

        // 데이터 준비
        const data = [];

        // 헤더 추가
        data.push(['No', 'Tracking']);

        // 데이터 행 추가
        trackingNumbers.forEach((trackingNo, index) => {
            data.push([index + 1, trackingNo]);
        });

        // 워크시트 생성
        const ws = XLSX.utils.aoa_to_sheet(data);

        // 열 너비 설정
        ws['!cols'] = [{ wch: 10 }, { wch: 20 }];

        // 스타일 정보 추가 (제한적이지만 일부 가능)
        const range = XLSX.utils.decode_range(ws['!ref']);

        // 모든 셀에 중앙 정렬 스타일과 테두리 적용
        for (let R = range.s.r; R <= range.e.r; ++R) {
            for (let C = range.s.c; C <= range.e.c; ++C) {
                const cell_address = { c: C, r: R };
                const cell_ref = XLSX.utils.encode_cell(cell_address);

                if (!ws[cell_ref]) continue;

                // 셀 스타일 초기화
                if (!ws[cell_ref].s) ws[cell_ref].s = {};

                // 중앙 정렬
                ws[cell_ref].s.alignment = { horizontal: "center" };

                // 테두리
                ws[cell_ref].s.border = {
                    top: { style: "thin" },
                    bottom: { style: "thin" },
                    left: { style: "thin" },
                    right: { style: "thin" }
                };

                // 헤더 행 (A1, B1)의 특별 스타일
                if (R === 0) {
                    ws[cell_ref].s.font = { bold: true };

                    // A1, B1 셀에만 배경색 적용
                    if (C === 0 || C === 1) {
                        ws[cell_ref].s.fill = { fgColor: { rgb: "C0E6F5" } };
                    }
                }
            }
        }

        // 워크북에 워크시트 추가
        XLSX.utils.book_append_sheet(wb, ws, 'List');

        // 다운로드
        XLSX.writeFile(wb, filename);
    }

    // CSV 다운로드 (엑셀 생성이 실패할 경우 대체 방법)
    function downloadCSV(trackingNumbers, filename) {
        if (!trackingNumbers || trackingNumbers.length === 0) return;

        // CSV 형식으로 데이터 변환
        let csvContent = "No,Tracking No\n";
        trackingNumbers.forEach((trackingNo, index) => {
            csvContent += `${index + 1},${trackingNo}\n`;
        });

        // Blob 생성
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);

        // 다운로드 링크 생성 및 클릭
        const fullFilename = `${filename}.csv`;

        const downloadLink = document.createElement('a');
        downloadLink.href = url;
        downloadLink.download = fullFilename;
        downloadLink.style.display = 'none';

        document.body.appendChild(downloadLink);
        downloadLink.click();

        // 정리
        setTimeout(() => {
            document.body.removeChild(downloadLink);
            URL.revokeObjectURL(url);
        }, 100);

        displayDailyShippingMessage(dailyShippingWindow.document, 'CSV 파일이 다운로드되었습니다.', 'success');
    }

    // 금일 출고내역 메시지 표시
    function displayDailyShippingMessage(doc, message, type = 'error') {
        const className = type === 'error' ? 'status-message' : 'success-message';

        // 이전 메시지 제거
        const existingMessages = doc.querySelectorAll('.status-message, .success-message');
        existingMessages.forEach(msg => {
            if (msg.parentNode) {
                msg.remove();
            }
        });

        // 메시지 요소 생성
        const messageElement = doc.createElement('div');
        messageElement.className = className;
        messageElement.textContent = message;

        // 메시지 삽입
        const targetElement = doc.querySelector('.daily-shipping-input-group');
        targetElement.parentNode.insertBefore(messageElement, doc.getElementById('result-container'));

        // 3초 후 메시지 제거
        setTimeout(() => {
            if (messageElement.parentNode) {
                messageElement.remove();
            }
        }, 3000);
    }

    // 분석기 팝업창 열기
    function openAnalyzerWindow() {
        // 이미 열려있는 창이 있으면 포커스
        if (analyzerWindow && !analyzerWindow.closed) {
            analyzerWindow.focus();
            return;
        }

        // 팝업창 열기
        analyzerWindow = window.open('', 'patternAnalyzer', 'width=1400,height=800,resizable=yes,scrollbars=yes');

        // 팝업창 콘텐츠 생성
        const doc = analyzerWindow.document;
        doc.open();
        doc.write(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>주문패턴분석기</title>
                <meta charset="UTF-8">
                <style>
                    body {
                        font-family: 'Malgun Gothic', Arial, sans-serif;
                        margin: 0;
                        padding: 20px;
                        background-color: #f9f9fa;
                        color: #333;
                    }
                    .pattern-analyzer-header {
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        margin-bottom: 20px;
                        padding-bottom: 10px;
                        border-bottom: 2px solid #3f51b5;
                    }
                    .pattern-analyzer-title {
                        margin: 0;
                        color: #3f51b5;
                        font-size: 24px;
                        font-weight: bold;
                    }
                    .pattern-analyzer-input-group {
                        display: flex;
                        gap: 12px;
                        margin-bottom: 20px;
                        align-items: center;
                        flex-wrap: wrap;
                        background-color: #fff;
                        padding: 12px;
                        border-radius: 8px;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
                    }
                    .pattern-analyzer-input-group label {
                        font-weight: bold;
                        color: #555;
                    }
                    .pattern-analyzer-input-group input,
                    .pattern-analyzer-input-group select {
                        padding: 8px 12px;
                        border: 1px solid #ddd;
                        border-radius: 4px;
                        box-shadow: inset 0 1px 3px rgba(0,0,0,0.05);
                        transition: border-color 0.2s, box-shadow 0.2s;
                    }
                    .pattern-analyzer-input-group input:focus,
                    .pattern-analyzer-input-group select:focus {
                        border-color: #3f51b5;
                        outline: none;
                        box-shadow: 0 0 0 3px rgba(63, 81, 181, 0.25);
                    }
                    .pattern-analyzer-button {
                        padding: 8px 14px;
                        background: #3f51b5;
                        color: white;
                        border: none;
                        border-radius: 4px;
                        cursor: pointer;
                        transition: all 0.2s;
                        font-weight: bold;
                    }
                    .pattern-analyzer-button:hover {
                        background: #303f9f;
                        transform: translateY(-1px);
                        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                    }
                    .pattern-analyzer-button:active {
                        transform: translateY(0);
                    }
                    .pattern-analyzer-table {
                        width: 100%;
                        border-collapse: collapse;
                        margin-top: 15px;
                        margin-bottom: 15px;
                        font-size: 14px;
                        border: 1px solid #e0e0e0;
                        background-color: white;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
                    }
                    .pattern-analyzer-table th, .pattern-analyzer-table td {
                        border: 1px solid #e0e0e0;
                        padding: 10px;
                        text-align: center;
                    }
                    .pattern-analyzer-table th[data-sort="productName"],
                    .pattern-analyzer-table td.product-name {
                        text-align: left;
                    }
                    .pattern-analyzer-table th {
                        background-color: #f5f5f5;
                        position: sticky;
                        top: 0;
                        z-index: 1;
                        cursor: pointer;
                        user-select: none;
                        color: #555;
                    }
                    .pattern-analyzer-table th:hover {
                        background-color: #e0e0e0;
                    }
                    .pattern-analyzer-table tr:nth-child(even) {
                        background-color: #fafafa;
                    }
                    .pattern-analyzer-table tr:hover {
                        background-color: #f0f0f0;
                    }
                    .pattern-analyzer-table .total-row {
                        background-color: #f5f5f5;
                        font-weight: bold;
                        border-top: 2px solid #3f51b5;
                    }
                    .pattern-analyzer-filter {
                        display: flex;
                        gap: 12px;
                        margin-bottom: 20px;
                        flex-wrap: wrap;
                        padding: 15px;
                        background-color: #fff;
                        border-radius: 6px;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
                    }
                    .pattern-analyzer-filter-group {
                        display: flex;
                        align-items: center;
                        gap: 8px;
                    }
                    .pattern-analyzer-filter-group label {
                        font-weight: bold;
                        color: #555;
                    }
                    .pattern-analyzer-filter-group input, .pattern-analyzer-filter-group select {
                        padding: 6px 8px;
                        border: 1px solid #ddd;
                        border-radius: 4px;
                        min-width: 120px;
                        box-shadow: inset 0 1px 3px rgba(0,0,0,0.05);
                    }
                    .pattern-analyzer-filter-group input:focus, .pattern-analyzer-filter-group select:focus {
                        border-color: #3f51b5;
                        outline: none;
                        box-shadow: 0 0 0 3px rgba(63, 81, 181, 0.25);
                    }
                    .pattern-analyzer-tabs {
                        display: flex;
                        border-bottom: 2px solid #3f51b5;
                        margin-bottom: 20px;
                    }
                    .pattern-analyzer-tab {
                        padding: 10px 20px;
                        cursor: pointer;
                        background-color: #f5f5f5;
                        border: none;
                        border-radius: 6px 6px 0 0;
                        margin-right: 5px;
                        transition: all 0.2s;
                    }
                    .pattern-analyzer-tab:hover {
                        background-color: #e0e0e0;
                    }
                    .pattern-analyzer-tab.active {
                        background-color: #3f51b5;
                        color: white;
                        font-weight: bold;
                    }
                    .pattern-analyzer-tab-content {
                        display: none;
                        padding: 15px 0;
                    }
                    .pattern-analyzer-loading {
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        height: 100px;
                    }
                    .pattern-analyzer-invoice-link {
                        color: #3f51b5;
                        text-decoration: underline;
                        cursor: pointer;
                    }
                    .pattern-analyzer-invoice-link:hover {
                        color: #303f9f;
                        text-decoration: underline;
                    }
                    .pattern-analyzer-summary {
                        margin: 15px 0;
                        padding: 15px;
                        background-color: #fff;
                        border-radius: 6px;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
                        display: grid;
                        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
                        gap: 10px;
                    }
                    .pattern-analyzer-summary-item {
                        display: flex;
                        flex-direction: column;
                    }
                    .pattern-analyzer-summary-item .label {
                        font-size: 13px;
                        color: #666;
                    }
                    .pattern-analyzer-summary-item .value {
                        font-size: 16px;
                        font-weight: bold;
                        color: #3f51b5;
                    }
                    .pattern-analyzer-summary-tags {
                        display: flex;
                        flex-wrap: wrap;
                        gap: 5px;
                    }
                    .pattern-analyzer-tag {
                        background-color: #e8eaf6;
                        color: #3f51b5;
                        padding: 2px 8px;
                        border-radius: 12px;
                        font-size: 12px;
                    }
                    .status-message {
                        padding: 15px;
                        margin: 15px 0;
                        border-radius: 6px;
                        background-color: #f8d7da;
                        color: #721c24;
                        text-align: center;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
                    }
                    .success-message {
                        padding: 15px;
                        margin: 15px 0;
                        border-radius: 6px;
                        background-color: #d4edda;
                        color: #155724;
                        text-align: center;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
                    }
                    .data-info {
                        font-size: 12px;
                        color: #666;
                        margin-left: 10px;
                        background-color: #f5f5f5;
                        padding: 4px 8px;
                        border-radius: 4px;
                    }
                    .sort-icon {
                        margin-left: 5px;
                    }
                    .sort-asc:after {
                        content: "▲";
                        font-size: 10px;
                    }
                    .sort-desc:after {
                        content: "▼";
                        font-size: 10px;
                    }
                    .loading-spinner {
                        border: 4px solid #f3f3f3;
                        border-top: 4px solid #3f51b5;
                        border-radius: 50%;
                        width: 24px;
                        height: 24px;
                        animation: spin 2s linear infinite;
                        display: inline-block;
                        margin-right: 10px;
                    }
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                    .pattern-group {
                        border-bottom: 1px solid #e0e0e0;
                        margin-bottom: 5px;
                    }
                    .pattern-group:last-child {
                        border-bottom: none;
                    }
                    .leftover-row {
                        background-color: #ffebee !important;
                    }
                    .leftover-row:hover {
                        background-color: #ffcdd2 !important;
                    }
                    /* 개선된 배송상태 배지 스타일 */
                    .completed-badge {
                        background-color: #c8e6c9;
                        color: #2e7d32;
                        padding: 4px 8px;
                        border-radius: 4px;
                        font-size: 12px;
                        display: inline-block;
                        margin: 2px;
                        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
                    }
                    .completed-badge .count {
                        font-weight: bold;
                        font-size: 13px;
                    }
                    .pending-badge {
                        background-color: #ffecb3;
                        color: #ff8f00;
                        padding: 4px 8px;
                        border-radius: 4px;
                        font-size: 12px;
                        display: inline-block;
                        margin: 2px;
                        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
                    }
                    .pending-badge .count {
                        font-weight: bold;
                        font-size: 13px;
                    }
                    .print-button {
                        padding: 8px 14px;
                        background: #757575;
                        color: white;
                        border: none;
                        border-radius: 4px;
                        cursor: pointer;
                        transition: all 0.2s;
                        font-weight: bold;
                        display: flex;
                        align-items: center;
                    }
                    .print-button:hover {
                        background: #616161;
                        transform: translateY(-1px);
                        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                    }
                    .print-button:before {
                        content: "\\1F5B6";
                        margin-right: 5px;
                        font-size: 18px;
                    }
                    .output-button {
                        padding: 8px 14px;
                        background: #4CAF50;
                        color: white;
                        border: none;
                        border-radius: 4px;
                        cursor: pointer;
                        transition: all 0.2s;
                        font-weight: bold;
                        display: flex;
                        align-items: center;
                    }
                    .output-button:hover {
                        background: #388E3C;
                        transform: translateY(-1px);
                        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                    }
                    .output-button:before {
                        content: "\\1F4E4";
                        margin-right: 5px;
                        font-size: 18px;
                    }

                    /* 멀티셀렉트 스타일 */
                    .multi-select-container {
                        position: relative;
                        display: inline-block;
                        width: 220px;
                    }
                    .multi-select-selected {
                        display: flex;
                        align-items: center;
                        justify-content: space-between;
                        padding: 8px 12px;
                        border: 1px solid #ddd;
                        border-radius: 4px;
                        background-color: white;
                        cursor: pointer;
                        min-height: 40px;
                    }
                    .multi-select-selected-text {
                        white-space: nowrap;
                        overflow: hidden;
                        text-overflow: ellipsis;
                        flex: 1;
                    }
                    .multi-select-arrow {
                        margin-left: 8px;
                    }
                    .multi-select-dropdown {
                        position: absolute;
                        top: 100%;
                        left: 0;
                        right: 0;
                        background-color: white;
                        border: 1px solid #ddd;
                        border-radius: 0 0 4px 4px;
                        margin-top: 2px;
                        max-height: 200px;
                        overflow-y: auto;
                        z-index: 100;
                        box-shadow: 0 2px 10px rgba(0,0,0,0.15);
                        display: none;
                    }
                    .multi-select-dropdown.show {
                        display: block;
                    }
                    .multi-select-search {
                        padding: 8px;
                        border-bottom: 1px solid #eee;
                        position: sticky;
                        top: 0;
                        background-color: white;
                        z-index: 1;
                    }
                    .multi-select-search input {
                        width: 100%;
                        padding: 6px 8px;
                        border: 1px solid #ddd;
                        border-radius: 4px;
                        box-sizing: border-box;
                    }
                    .multi-select-options {
                        padding: 0;
                        margin: 0;
                        list-style: none;
                    }
                    .multi-select-option {
                        padding: 8px 12px;
                        border-bottom: 1px solid #eee;
                        display: flex;
                        align-items: center;
                    }
                    .multi-select-option:last-child {
                        border-bottom: none;
                    }
                    .multi-select-option:hover {
                        background-color: #f5f5f5;
                    }
                    .multi-select-option label {
                        margin-left: 8px;
                        cursor: pointer;
                        flex-grow: 1;
                    }
                    .multi-select-controls {
                        display: flex;
                        justify-content: space-between;
                        padding: 8px;
                        border-top: 1px solid #eee;
                        background-color: #f9f9f9;
                    }
                    .multi-select-count {
                        font-size: 12px;
                        color: #666;
                        display: flex;
                        align-items: center;
                    }
                    .multi-select-actions {
                        display: flex;
                        gap: 5px;
                    }
                    .multi-select-action {
                        font-size: 12px;
                        padding: 3px 6px;
                        background-color: #e0e0e0;
                        border: none;
                        border-radius: 3px;
                        cursor: pointer;
                    }
                    .multi-select-action:hover {
                        background-color: #d0d0d0;
                    }
                    .multi-select-badges {
                        display: flex;
                        flex-wrap: wrap;
                        gap: 4px;
                        margin-top: 5px;
                        max-height: 70px;
                        overflow-y: auto;
                    }
                    .multi-select-badge {
                        display: flex;
                        align-items: center;
                        background-color: #e8eaf6;
                        border-radius: 16px;
                        padding: 2px 8px;
                        font-size: 12px;
                        white-space: nowrap;
                    }
                    .multi-select-badge-remove {
                        margin-left: 4px;
                        cursor: pointer;
                        font-size: 14px;
                        font-weight: bold;
                        color: #999;
                    }
                    .multi-select-badge-remove:hover {
                        color: #f44336;
                    }

                    /* 출고 모달 스타일 */
                    .modal-overlay {
                        position: fixed;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background-color: rgba(0, 0, 0, 0.5);
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        z-index: 1000;
                    }
                    .modal-content {
                        background-color: white;
                        border-radius: 8px;
                        width: 600px;
                        max-width: 90%;
                        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
                        transition: all 0.3s ease;
                    }
                    .modal-header {
                        padding: 15px 20px;
                        border-bottom: 1px solid #eee;
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        transition: all 0.3s ease;
                    }
                    .modal-title {
                        font-size: 18px;
                        font-weight: bold;
                        color: #3f51b5;
                        margin: 0;
                        display: flex;
                        align-items: center;
                        transition: all 0.3s ease;
                    }
                    .modal-title-icon {
                        margin-right: 8px;
                        font-size: 24px;
                    }
                    .modal-close {
                        background: none;
                        border: none;
                        font-size: 20px;
                        cursor: pointer;
                        color: #999;
                    }
                    .modal-body {
                        padding: 20px;
                    }
                    .modal-footer {
                        padding: 15px 20px;
                        border-top: 1px solid #eee;
                        display: flex;
                        justify-content: flex-end;
                        gap: 10px;
                        transition: all 0.3s ease;
                    }

                    /* 모드 전환 토글 스위치 */
                    .mode-toggle-container {
                        display: flex;
                        align-items: center;
                        justify-content: space-between;
                        padding: 15px;
                        margin-bottom: 15px;
                        background-color: #f9f9f9;
                        border-radius: 8px;
                        border: 1px solid #eee;
                        transition: all 0.3s ease;
                    }
                    .mode-toggle-label {
                        font-weight: bold;
                        display: flex;
                        align-items: center;
                        font-size: 16px;
                        transition: all 0.3s ease;
                    }
                    .mode-toggle-label-icon {
                        margin-right: 8px;
                        font-size: 20px;
                    }
                    .mode-toggle-switch {
                        position: relative;
                        display: inline-block;
                        width: 60px;
                        height: 30px;
                    }
                    .mode-toggle-switch input {
                        opacity: 0;
                        width: 0;
                        height: 0;
                    }
                    .mode-toggle-slider {
                        position: absolute;
                        cursor: pointer;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background-color: #4CAF50;
                        transition: 0.4s;
                        border-radius: 34px;
                        box-shadow: inset 0 1px 3px rgba(0,0,0,0.2);
                    }
                    .mode-toggle-slider:before {
                        position: absolute;
                        content: "";
                        height: 22px;
                        width: 22px;
                        left: 4px;
                        bottom: 4px;
                        background-color: white;
                        transition: 0.4s;
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                    }
                    .mode-toggle-switch input:checked + .mode-toggle-slider {
                        background-color: #F44336;
                    }
                    .mode-toggle-switch input:checked + .mode-toggle-slider:before {
                        transform: translateX(30px);
                    }
                    .mode-toggle-text {
                        display: none; /* 한글 텍스트 숨김 처리 */
                    }
                    .mode-toggle-text.cancel-text {
                        left: auto;
                        right: 8px;
                        opacity: 0;
                    }
                    .mode-toggle-switch input:checked + .mode-toggle-slider .mode-toggle-text {
                        opacity: 0;
                    }
                    .mode-toggle-switch input:checked + .mode-toggle-slider .mode-toggle-text.cancel-text {
                        opacity: 1;
                    }

                    /* 모드별 스타일 */
                    .shipping-mode-output .modal-header {
                        background-color: #e8f5e9;
                        border-bottom: 1px solid #c8e6c9;
                    }
                    .shipping-mode-output .modal-title {
                        color: #2e7d32;
                    }
                    .shipping-mode-output .modal-footer {
                        background-color: #e8f5e9;
                        border-top: 1px solid #c8e6c9;
                    }
                    .shipping-mode-output #start-shipping-button {
                        background-color: #4CAF50;
                    }
                    .shipping-mode-output #start-shipping-button:hover {
                        background-color: #388E3C;
                    }

                    .shipping-mode-cancel .modal-header {
                        background-color: #ffebee;
                        border-bottom: 1px solid #ffcdd2;
                    }
                    .shipping-mode-cancel .modal-title {
                        color: #c62828;
                    }
                    .shipping-mode-cancel .modal-footer {
                        background-color: #ffebee;
                        border-top: 1px solid #ffcdd2;
                    }
                    .shipping-mode-cancel #start-shipping-button {
                        background-color: #F44336;
                    }
                    .shipping-mode-cancel #start-shipping-button:hover {
                        background-color: #D32F2F;
                    }

                    .shipping-form-group {
                        margin-bottom: 15px;
                    }
                    .shipping-form-group label {
                        display: block;
                        margin-bottom: 5px;
                        font-weight: bold;
                        color: #555;
                    }
                    .shipping-form-group input[type="date"] {
                        width: 100%;
                        padding: 8px;
                        border: 1px solid #ddd;
                        border-radius: 4px;
                    }
                    .shipping-form-group input[type="checkbox"] {
                        margin-right: 8px;
                    }
                    .shipping-stats {
                        display: grid;
                        grid-template-columns: repeat(4, 1fr);
                        gap: 10px;
                        margin-bottom: 20px;
                    }
                    .shipping-stat-item {
                        background-color: #f5f5f5;
                        padding: 10px;
                        border-radius: 4px;
                        text-align: center;
                    }
                    .shipping-stat-item .label {
                        font-size: 12px;
                        color: #666;
                    }
                    .shipping-stat-item .value {
                        font-size: 20px;
                        font-weight: bold;
                        color: #3f51b5;
                        cursor: pointer;
                        transition: all 0.2s;
                    }
                    .shipping-stat-item .value:hover {
                        color: #7986cb;
                        text-decoration: underline;
                    }
                    .shipping-stat-item .value.no-click {
                        cursor: default;
                    }
                    .shipping-stat-item .value.no-click:hover {
                        color: #3f51b5;
                        text-decoration: none;
                    }
                    .progress-bar-container {
                        width: 100%;
                        height: 20px;
                        background-color: #f0f0f0;
                        border-radius: 10px;
                        overflow: hidden;
                        margin-bottom: 15px;
                    }
                    .progress-bar {
                        height: 100%;
                        background-color: #4caf50;
                        width: 0%;
                        transition: width 0.3s;
                    }
                    .shipping-log {
                        max-height: 200px;
                        overflow-y: auto;
                        background-color: #f9f9f9;
                        border: 1px solid #ddd;
                        border-radius: 4px;
                        padding: 10px;
                        font-family: monospace;
                        font-size: 12px;
                        margin-top: 10px;
                    }
                    .shipping-log-item {
                        margin-bottom: 5px;
                        padding-bottom: 5px;
                        border-bottom: 1px solid #eee;
                    }
                    .shipping-log-item:last-child {
                        margin-bottom: 0;
                        padding-bottom: 0;
                        border-bottom: none;
                    }
                    .shipping-log-success {
                        color: #2e7d32;
                    }
                    .shipping-log-error {
                        color: #c62828;
                    }

                    /* 인보이스 모달 */
                    .invoice-modal-overlay {
                        position: fixed;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background-color: rgba(0, 0, 0, 0.5);
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        z-index: 1001;
                    }
                    .invoice-modal-content {
                        background-color: white;
                        border-radius: 8px;
                        width: 500px;
                        max-width: 90%;
                        max-height: 80vh;
                        display: flex;
                        flex-direction: column;
                        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
                    }
                    .invoice-modal-header {
                        padding: 15px 20px;
                        border-bottom: 1px solid #eee;
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        flex: 0 0 auto;
                    }
                    .invoice-modal-title {
                        font-size: 18px;
                        font-weight: bold;
                        color: #3f51b5;
                        margin: 0;
                    }
                    .invoice-modal-close {
                        background: none;
                        border: none;
                        font-size: 20px;
                        cursor: pointer;
                        color: #999;
                    }
                    .invoice-modal-body {
                        padding: 20px;
                        overflow-y: auto;
                        flex: 1 1 auto;
                    }
                    .invoice-list {
                        max-height: 300px;
                        overflow-y: auto;
                        border: 1px solid #ddd;
                        border-radius: 4px;
                        margin-bottom: 15px;
                    }
                    .invoice-item {
                        padding: 8px 10px;
                        border-bottom: 1px solid #eee;
                        font-family: monospace;
                    }
                    .invoice-item:last-child {
                        border-bottom: none;
                    }
                    .invoice-item:nth-child(odd) {
                        background-color: #f9f9f9;
                    }
                    .invoice-textarea {
                        width: 100%;
                        height: 100px;
                        padding: 8px;
                        border: 1px solid #ddd;
                        border-radius: 4px;
                        font-family: monospace;
                        resize: vertical;
                        margin-bottom: 15px;
                    }
                    .invoice-buttons {
                        display: flex;
                        gap: 10px;
                        flex-wrap: wrap;
                    }
                    .invoice-button {
                        padding: 6px 12px;
                        background: #3f51b5;
                        color: white;
                        border: none;
                        border-radius: 4px;
                        cursor: pointer;
                        font-size: 14px;
                    }
                    .invoice-button:hover {
                        background: #303f9f;
                    }
                    .invoice-info {
                        margin-bottom: 10px;
                        color: #666;
                        font-size: 14px;
                    }
                    .invoice-success {
                        color: #155724;
                        background-color: #d4edda;
                        padding: 8px;
                        border-radius: 4px;
                        margin-bottom: 10px;
                        display: none;
                    }

                    /* 파일 출력 관련 스타일 */
                    .folder-select-container {
                        display: none;
                        position: fixed;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background-color: rgba(0, 0, 0, 0.5);
                        z-index: 2000;
                        justify-content: center;
                        align-items: center;
                    }
                    .folder-select-modal {
                        background-color: white;
                        padding: 20px;
                        border-radius: 8px;
                        width: 500px;
                        max-width: 90%;
                        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
                    }
                    .folder-select-header {
                        margin-bottom: 20px;
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                    }
                    .folder-select-title {
                        font-size: 18px;
                        font-weight: bold;
                        color: #3f51b5;
                        margin: 0;
                    }
                    .folder-select-close {
                        background: none;
                        border: none;
                        font-size: 20px;
                        cursor: pointer;
                        color: #999;
                    }
                    .folder-select-input {
                        margin-bottom: 20px;
                    }
                    .folder-select-message {
                        font-size: 14px;
                        color: #555;
                        margin-bottom: 20px;
                    }
                    .folder-select-buttons {
                        display: flex;
                        justify-content: flex-end;
                        gap: 10px;
                    }
                    .print-output-log {
                        max-height: 200px;
                        overflow-y: auto;
                        background-color: #f9f9f9;
                        border: 1px solid #ddd;
                        border-radius: 4px;
                        padding: 10px;
                        font-family: monospace;
                        font-size: 12px;
                        margin-top: 10px;
                        display: none;
                    }
                    .hidden-file-input {
                        position: absolute;
                        width: 1px;
                        height: 1px;
                        padding: 0;
                        margin: -1px;
                        overflow: hidden;
                        clip: rect(0, 0, 0, 0);
                        border: 0;
                    }

                    @media print {
                        @page {
                            size: A4;
                            margin: 0.5cm;
                        }
                        body {
                            padding: 0;
                            background: white;
                        }
                        .pattern-analyzer-header,
                        .pattern-analyzer-input-group,
                        .pattern-analyzer-tabs,
                        .pattern-analyzer-filter,
                        .pattern-analyzer-tab-content,
                        .print-section-hide {
                            display: none !important;
                        }
                        #print-section {
                            display: block !important;
                        }
                        .pattern-analyzer-table {
                            font-size: 10pt;
                            border: 1px solid #000;
                            box-shadow: none;
                            page-break-inside: auto;
                        }
                        .pattern-analyzer-table th,
                        .pattern-analyzer-table td {
                            border: 1px solid #000;
                            padding: 4px;
                        }
                        .pattern-analyzer-table tr {
                            page-break-inside: avoid;
                            page-break-after: auto;
                        }
                        .pattern-analyzer-table thead {
                            display: table-header-group;
                        }
                        /* 인쇄 시 배경색이 보이도록 설정 */
                        .pattern-analyzer-table tr {
                            -webkit-print-color-adjust: exact !important;
                            print-color-adjust: exact !important;
                            color-adjust: exact !important;
                        }
                        .pattern-analyzer-summary {
                            border: 1px solid #000;
                            box-shadow: none;
                            page-break-inside: avoid;
                            grid-template-columns: repeat(3, 1fr) !important;
                            padding: 8px !important;
                            gap: 5px !important;
                            margin: 10px 0 !important;
                        }
                        .pattern-analyzer-summary-item {
                            margin-bottom: 5px !important;
                        }
                        .pattern-analyzer-summary-item .label {
                            font-size: 11px !important;
                        }
                        .pattern-analyzer-summary-item .value {
                            font-size: 14px !important;
                        }
                        .pattern-analyzer-tag {
                            font-size: 9px !important;
                            padding: 1px 4px !important;
                        }
                    }
                    #print-section {
                        display: none;
                    }

                    /* 중지 버튼 스타일 */
                    #stop-shipping-button {
                        background-color: #F44336;
                    }
                    #stop-shipping-button:hover {
                        background-color: #D32F2F;
                    }
                    #stop-shipping-button:disabled {
                        background-color: #ffcdd2;
                        cursor: not-allowed;
                    }
                </style>
            </head>
            <body>
                <div class="pattern-analyzer-header">
                    <h2 class="pattern-analyzer-title">주문패턴분석기</h2>
                </div>

                <div class="pattern-analyzer-input-group">
                    <label for="date-input">출력일:</label>
                    <input type="date" id="date-input">

                    <div>
                        <label for="site-select">판매처:</label>
                        <div id="site-multiselect" class="multi-select-container">
                            <div class="multi-select-selected">
                                <span class="multi-select-selected-text">전체</span>
                                <span class="multi-select-arrow">▼</span>
                            </div>
                            <div class="multi-select-badges"></div>
                        </div>
                    </div>

                    <div>
                        <label for="expr-select">택배사:</label>
                        <div id="expr-multiselect" class="multi-select-container">
                            <div class="multi-select-selected">
                                <span class="multi-select-selected-text">전체</span>
                                <span class="multi-select-arrow">▼</span>
                            </div>
                            <div class="multi-select-badges"></div>
                        </div>
                    </div>

                    <button id="search-button" class="pattern-analyzer-button">조회</button>
                    <span id="data-info" class="data-info">데이터 정보: 없음</span>
                </div>

                <div class="pattern-analyzer-tabs">
                    <button id="batch-tab" class="pattern-analyzer-tab active">차수 목록</button>
                    <button id="pattern-tab" class="pattern-analyzer-tab">패턴 분석</button>
                </div>

                <div id="batch-content" class="pattern-analyzer-tab-content" style="display: block;">
                    <table class="pattern-analyzer-table">
                        <thead>
                            <tr>
                                <th>차수</th>
                                <th>판매처</th>
                                <th>택배사</th>
                                <th>건수</th>
                                <th>배송상태</th>
                                <th>메모</th>
                                <th>패턴</th>
                                <th><input type="checkbox" id="select-all-batches"></th>
                            </tr>
                        </thead>
                        <tbody id="batch-table-body">
                            <tr>
                                <td colspan="8" class="pattern-analyzer-loading">
                                    <div class="loading-spinner"></div> 데이터를 조회해주세요...
                                </td>
                            </tr>
                        </tbody>
                        <tfoot id="batch-table-foot">
                        </tfoot>
                    </table>
                </div>

                <div id="pattern-content" class="pattern-analyzer-tab-content">
                    <div class="pattern-analyzer-filter print-section-hide">
                        <div class="pattern-analyzer-filter-group">
                            <label for="include-input">포함검색어:</label>
                            <input type="text" id="include-input" placeholder="예: 김치, 사과">
                        </div>

                        <div class="pattern-analyzer-filter-group">
                            <label for="exclude-input">제외검색어:</label>
                            <input type="text" id="exclude-input" placeholder="예: 김치, 사과">
                        </div>

                        <div class="pattern-analyzer-filter-group">
                            <label for="min-rep-input">최소반복수:</label>
                            <input type="number" id="min-rep-input" min="1" value="1" style="width: 80px;">
                        </div>

                        <button id="print-pattern-button" class="print-button">인쇄</button>
                        <button id="output-pattern-button" class="output-button">출력</button>
                    </div>

                    <div id="pattern-summary" class="pattern-analyzer-summary" style="display: none;"></div>

                    <table class="pattern-analyzer-table">
                        <thead>
                            <tr>
                                <th>순번</th>
                                <th>제품명</th>
                                <th>관리명</th>
                                <th>옵션명</th>
                                <th>수량</th>
                                <th>반복수</th>
                                <th>배송상태</th>
                                <th class="print-section-hide">송장번호</th>
                                <th class="print-section-hide"><input type="checkbox" id="select-all-patterns"></th>
                            </tr>
                        </thead>
                        <tbody id="pattern-table-body">
                            <tr>
                                <td colspan="9" class="status-message">패턴 데이터가 없습니다.</td>
                            </tr>
                        </tbody>
                        <tfoot id="pattern-table-foot">
                        </tfoot>
                    </table>

                    <div class="pattern-analyzer-input-group print-section-hide" style="justify-content: flex-end;">
                        <button id="show-invoices-button" class="pattern-analyzer-button">종합송장</button>
                        <button id="shipping-button" class="pattern-analyzer-button" style="background-color: #4caf50;">종합출고</button>
                    </div>
                </div>

                <div id="print-section" class="print-section">
                </div>

                <!-- 출고 모달 -->
                <div id="shipping-modal" class="modal-overlay shipping-mode-output" style="display: none;">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">
                                <span class="modal-title-icon">📦</span>
                                <span id="shipping-modal-title">종합 출고 처리</span>
                            </h3>
                            <button class="modal-close" id="close-shipping-modal">&times;</button>
                        </div>
                        <div class="modal-body">
                            <div class="shipping-stats">
                                <div class="shipping-stat-item">
                                    <div class="label">총 건수</div>
                                    <div class="value no-click" id="total-invoices">0</div>
                                </div>
                                <div class="shipping-stat-item">
                                    <div class="label">작업완료</div>
                                    <div class="value" id="completed-invoices">0</div>
                                </div>
                                <div class="shipping-stat-item">
                                    <div class="label">작업실패</div>
                                    <div class="value" id="failed-invoices">0</div>
                                </div>
                                <div class="shipping-stat-item">
                                    <div class="label">진행률</div>
                                    <div class="value no-click" id="progress-percentage">0%</div>
                                </div>
                            </div>

                            <div class="progress-bar-container">
                                <div class="progress-bar" id="shipping-progress-bar"></div>
                            </div>

                            <div class="mode-toggle-container" id="mode-toggle-container">
                                <div class="mode-toggle-label">
                                    <span class="mode-toggle-label-icon">🚚</span>
                                    <span id="current-mode-text">출고 모드</span>
                                </div>
                                <label class="mode-toggle-switch">
                                    <input type="checkbox" id="cancel-mode">
                                    <span class="mode-toggle-slider">
                                        <span class="mode-toggle-text">출고</span>
                                        <span class="mode-toggle-text cancel-text">취소</span>
                                    </span>
                                </label>
                            </div>

                            <div class="shipping-form-group">
                                <label for="shipping-date">출고날짜:</label>
                                <input type="date" id="shipping-date">
                            </div>

                            <div class="shipping-form-group">
                                <label for="parallel-count">병렬 처리 개수:</label>
                                <div style="display: flex; align-items: center;">
                                    <input type="number" id="parallel-count" min="1" max="10" value="2" style="width: 60px; text-align: center;">
                                    <div style="margin-left: 15px; display: flex; align-items: center;">
                                        <button id="decrease-parallel" style="width: 30px; height: 30px; font-size: 16px; padding: 0; margin: 0; background: #f5f5f5; color: #333; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">-</button>
                                        <button id="increase-parallel" style="width: 30px; height: 30px; font-size: 16px; padding: 0; margin: 0 10px 0 5px; background: #f5f5f5; color: #333; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">+</button>
                                        <small style="color: #666;">1~2개 범위 내(권장: 2)</small>
                                    </div>
                                </div>
                            </div>

                            <div class="shipping-log" id="shipping-log"></div>
                        </div>
                        <div class="modal-footer">
                            <button class="pattern-analyzer-button" id="start-shipping-button">작업시작</button>
                            <button class="pattern-analyzer-button" id="stop-shipping-button" style="background-color: #F44336; display: none;">작업중지</button>
                            <button class="pattern-analyzer-button" id="close-shipping-button" style="background-color: #9e9e9e;">닫기</button>
                        </div>
                    </div>
                </div>

                <!-- 송장번호 목록 모달 -->
                <div id="invoice-modal" class="invoice-modal-overlay" style="display: none;">
                    <div class="invoice-modal-content">
                        <div class="invoice-modal-header">
                            <h3 class="invoice-modal-title">송장번호 목록</h3>
                            <button class="invoice-modal-close" id="close-invoice-modal">&times;</button>
                        </div>
                        <div class="invoice-modal-body">
                            <div class="invoice-info">총 <span id="invoice-count">0</span>개의 송장번호가 있습니다.</div>
                            <div class="invoice-success" id="invoice-copy-success">클립보드에 복사되었습니다!</div>

                            <div class="invoice-list" id="invoice-list"></div>

                            <textarea class="invoice-textarea" id="invoice-textarea" placeholder="송장번호가 여기에 표시됩니다." readonly></textarea>

                            <div class="invoice-buttons">
                                <button class="invoice-button" id="copy-newline-button">개행으로 복사</button>
                                <button class="invoice-button" id="copy-comma-button">쉼표로 복사</button>
                                <button class="invoice-button" id="download-csv-button">CSV 다운로드</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 파일 출력 모달 -->
                <div id="folder-select-container" class="folder-select-container">
                    <div class="folder-select-modal">
                        <div class="folder-select-header">
                            <h3 class="folder-select-title">파일 출력 설정</h3>
                            <button class="folder-select-close" id="folder-select-close">&times;</button>
                        </div>
                        <div class="folder-select-message">
                            사진 파일이 있는 폴더를 선택해주세요. 패턴에 맞게 사진이 출력됩니다.
                        </div>
                        <div class="folder-select-input">
                            <input type="file" id="folder-select" webkitdirectory directory multiple class="hidden-file-input">
                            <button id="select-folder-button" class="pattern-analyzer-button">폴더 선택</button>
                            <span id="selected-folder-name" style="margin-left:10px;font-size:13px;color:#666;"></span>
                        </div>
                        <div class="print-output-log" id="print-output-log"></div>
                        <div class="folder-select-buttons">
                            <button id="start-print-button" class="pattern-analyzer-button" disabled>출력 시작</button>
                            <button id="cancel-folder-select" class="pattern-analyzer-button" style="background-color: #9e9e9e;">취소</button>
                        </div>
                    </div>
                </div>
            </body>
            </html>
        `);
        doc.close();

        // 팝업창에 이벤트 연결
        initializePopupEvents();
    }

    // 팝업창 이벤트 초기화
    function initializePopupEvents() {
        if (!analyzerWindow || analyzerWindow.closed) return;

        const doc = analyzerWindow.document;

        // 현재 날짜를 기본값으로 설정
        const today = new Date();
        const koreaTime = new Date(today.getTime() + (9 * 60 * 60 * 1000));
        const koreaDateString = koreaTime.toISOString().split('T')[0];
        doc.getElementById('date-input').value = koreaDateString;

        // 출고 모달에도 현재 날짜 설정
        doc.getElementById('shipping-date').value = koreaDateString;

        // 변수 초기화
        let selectedBatches = [];
        let currentPatterns = [];
        let leftoverCount = 0;
        let selectedFolder = null;
        let folderFiles = [];

        // 디바운스 타이머 변수 추가
        let patternFilterDebounceTimer = null;

        // 멀티셀렉트 초기화
        initMultiSelect(doc, 'site-multiselect', []);
        initMultiSelect(doc, 'expr-multiselect', []);

        // 멀티셀렉트 실시간 필터링 이벤트 추가
        doc.getElementById('site-multiselect').addEventListener('filterchange', function() {
            // 이미 데이터가 있는지 확인
            if (!dataStore.batches) {
                return;
            }

            // 선택된 필터 가져오기
            const selectedSites = getMultiSelectValues(doc, 'site-multiselect');
            const selectedExprs = getMultiSelectValues(doc, 'expr-multiselect');

            // 데이터 필터링
            filterLocalData(doc, selectedSites, selectedExprs, false); // 알림 메시지 표시 안함
        });

        doc.getElementById('expr-multiselect').addEventListener('filterchange', function() {
            // 이미 데이터가 있는지 확인
            if (!dataStore.batches) {
                return;
            }

            // 선택된 필터 가져오기
            const selectedSites = getMultiSelectValues(doc, 'site-multiselect');
            const selectedExprs = getMultiSelectValues(doc, 'expr-multiselect');

            // 데이터 필터링
            filterLocalData(doc, selectedSites, selectedExprs, false); // 알림 메시지 표시 안함
        });

        // 패턴 필터 입력 필드에 실시간 필터링 이벤트 추가 (디바운싱 적용)
        function applyPatternFilter() {
            if (!currentPatterns || currentPatterns.length === 0) {
                return;
            }

            const includeKeywords = doc.getElementById('include-input').value ?
                doc.getElementById('include-input').value.split(',').map(k => k.trim()) : [];
            const excludeKeywords = doc.getElementById('exclude-input').value ?
                doc.getElementById('exclude-input').value.split(',').map(k => k.trim()) : [];
            const minRepetition = parseInt(doc.getElementById('min-rep-input').value, 10) || 1;

            const filterResult = filterPatternsforanalysis(currentPatterns, includeKeywords, excludeKeywords, minRepetition);
            leftoverCount = filterResult.leftoverCount;
            displayPatterns(doc, filterResult.patterns, selectedBatches);
            updatePatternSummary(doc, filterResult.patterns, filterResult.stats);
        }

        // 디바운스 함수로 필터 적용
        function debouncePatternFilter() {
            if (patternFilterDebounceTimer) {
                clearTimeout(patternFilterDebounceTimer);
            }
            patternFilterDebounceTimer = setTimeout(applyPatternFilter, 300); // 300ms 디바운스
        }

        // 패턴 필터 입력 이벤트 처리
        doc.getElementById('include-input').addEventListener('input', debouncePatternFilter);
        doc.getElementById('exclude-input').addEventListener('input', debouncePatternFilter);
        doc.getElementById('min-rep-input').addEventListener('input', debouncePatternFilter);
        doc.getElementById('min-rep-input').addEventListener('change', debouncePatternFilter);

        // 탭 전환
        doc.getElementById('batch-tab').addEventListener('click', function() {
            this.classList.add('active');
            doc.getElementById('pattern-tab').classList.remove('active');
            doc.getElementById('batch-content').style.display = 'block';
            doc.getElementById('pattern-content').style.display = 'none';
        });

        doc.getElementById('pattern-tab').addEventListener('click', function() {
            this.classList.add('active');
            doc.getElementById('batch-tab').classList.remove('active');
            doc.getElementById('batch-content').style.display = 'none';
            doc.getElementById('pattern-content').style.display = 'block';
        });

        // 조회 버튼
        doc.getElementById('search-button').addEventListener('click', function() {
            const dateValue = doc.getElementById('date-input').value.replace(/-/g, '');
            fetchAllData(dateValue);
        });

        // 취소모드 체크박스 이벤트 핸들러 추가
        doc.getElementById('cancel-mode').addEventListener('change', function() {
            updateShippingLabels(doc, this.checked);

            // 모달 테마 변경
            const shippingModal = doc.getElementById('shipping-modal');
            const modeToggleContainer = doc.getElementById('mode-toggle-container');
            const currentModeText = doc.getElementById('current-mode-text');
            const modalTitleIcon = doc.querySelector('.modal-title-icon');
            const modalTitle = doc.getElementById('shipping-modal-title');

            // 로그 및 진행률 초기화
            doc.getElementById('shipping-log').innerHTML = '';
            doc.getElementById('completed-invoices').textContent = '0';
            doc.getElementById('failed-invoices').textContent = '0';
            doc.getElementById('progress-percentage').textContent = '0%';
            doc.getElementById('shipping-progress-bar').style.width = '0%';

            // 시작 버튼 활성화
            doc.getElementById('start-shipping-button').disabled = false;

            // 송장 로그 초기화
            dataStore.shippingLogs.completed = [];
            dataStore.shippingLogs.failed = [];

            if (this.checked) {
                // 취소 모드로 변경
                shippingModal.classList.remove('shipping-mode-output');
                shippingModal.classList.add('shipping-mode-cancel');
                currentModeText.textContent = '출고취소 모드';
                doc.querySelector('.mode-toggle-label-icon').textContent = '↩️';
                modalTitleIcon.textContent = '↩️';
                modalTitle.textContent = '종합 출고취소 처리';
            } else {
                // 출고 모드로 변경
                shippingModal.classList.remove('shipping-mode-cancel');
                shippingModal.classList.add('shipping-mode-output');
                currentModeText.textContent = '출고 모드';
                doc.querySelector('.mode-toggle-label-icon').textContent = '🚚';
                modalTitleIcon.textContent = '📦';
                modalTitle.textContent = '종합 출고 처리';
            }
        });

        // 인쇄 버튼
        doc.getElementById('print-pattern-button').addEventListener('click', function() {
            if (!currentPatterns || currentPatterns.length === 0) {
                displayPopupMessage(doc, '인쇄할 패턴 데이터가 없습니다.', 'error');
                return;
            }

            // 현재 필터링된 패턴 가져오기
            const includeKeywords = doc.getElementById('include-input').value ?
                doc.getElementById('include-input').value.split(',').map(k => k.trim()) : [];
            const excludeKeywords = doc.getElementById('exclude-input').value ?
                doc.getElementById('exclude-input').value.split(',').map(k => k.trim()) : [];
            const minRepetition = parseInt(doc.getElementById('min-rep-input').value, 10) || 1;

            const filterResult = filterPatternsforanalysis(currentPatterns, includeKeywords, excludeKeywords, minRepetition);

            // 인쇄용 섹션 준비
            preparePrintSection(doc, filterResult.patterns);

            // 인쇄 다이얼로그 열기
            analyzerWindow.print();
        });

        // 출력 버튼 클릭 이벤트 핸들러 수정
        doc.getElementById('output-pattern-button').addEventListener('click', function() {
            if (!currentPatterns || currentPatterns.length === 0) {
                displayPopupMessage(doc, '출력할 패턴 데이터가 없습니다.', 'error');
                return;
            }

            // 패턴 데이터 준비
            preparePrintPatterns();

            // 이전 출력 관련 상태 초기화
            resetPrintingState(doc);

            // 폴더 선택 모달 표시
            doc.getElementById('folder-select-container').style.display = 'flex';
            doc.getElementById('print-output-log').style.display = 'none';
            doc.getElementById('print-output-log').innerHTML = '';
            doc.getElementById('selected-folder-name').textContent = '';
            doc.getElementById('start-print-button').disabled = true;
            selectedFolder = null;
            folderFiles = [];
        });

        // 폴더 선택 버튼
        doc.getElementById('select-folder-button').addEventListener('click', function() {
            doc.getElementById('folder-select').click();
        });

        // 폴더 선택 이벤트
        doc.getElementById('folder-select').addEventListener('change', function(e) {
            const files = e.target.files;

            if (files.length > 0) {
                // 폴더 경로 추출 (Chrome에서는 webkitRelativePath 사용)
                const folderPath = files[0].webkitRelativePath.split('/')[0];
                doc.getElementById('selected-folder-name').textContent = `선택된 폴더: ${folderPath}`;

                // JPG 파일만 필터링
                folderFiles = Array.from(files).filter(file =>
                    file.name.toLowerCase().endsWith('.jpg') ||
                    file.name.toLowerCase().endsWith('.jpeg')
                );

                if (folderFiles.length === 0) {
                    addPrintLog(doc, '선택한 폴더에 JPG 이미지 파일이 없습니다.', 'error');
                    doc.getElementById('print-output-log').style.display = 'block';
                    doc.getElementById('start-print-button').disabled = true;
                    return;
                }

                // 파일명 분석 및 출력 준비
                analyzeImageFiles(doc, folderFiles);
                selectedFolder = folderPath;
                doc.getElementById('start-print-button').disabled = false;

                // 로그창 표시
                doc.getElementById('print-output-log').style.display = 'block';
            }
        });

        // 출력 시작 버튼 이벤트 핸들러 수정
        doc.getElementById('start-print-button').addEventListener('click', function() {
            if (folderFiles.length === 0 || !selectedFolder) {
                addPrintLog(doc, '출력할 파일이 없습니다. 폴더를 다시 선택해주세요.', 'error');
                return;
            }

            // 출력 실행 전 검증 다이얼로그가 있으면 제거
            const validationDialog = doc.getElementById('validation-dialog');
            if (validationDialog) {
                validationDialog.remove();
            }

            // 출력 실행
            startPrinting(doc, folderFiles);
        });

        // 폴더 선택 모달 닫기 버튼들
        doc.getElementById('folder-select-close').addEventListener('click', function() {
            doc.getElementById('folder-select-container').style.display = 'none';
            // 모달 닫을 때 상태 초기화
            resetPrintingState(doc);
        });

        doc.getElementById('cancel-folder-select').addEventListener('click', function() {
            doc.getElementById('folder-select-container').style.display = 'none';
            // 모달 닫을 때 상태 초기화
            resetPrintingState(doc);
        });

        // 엔터 키로 검색 트리거
        doc.getElementById('date-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                doc.getElementById('search-button').click();
            }
        });

        // 필터 엔터 키 처리
        doc.getElementById('include-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                doc.getElementById('apply-filter-button').click();
            }
        });

        doc.getElementById('exclude-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                doc.getElementById('apply-filter-button').click();
            }
        });

        doc.getElementById('min-rep-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                doc.getElementById('apply-filter-button').click();
            }
        });

        // 모든 체크박스 선택
        doc.getElementById('select-all-batches').addEventListener('change', function() {
            const checkboxes = doc.querySelectorAll('#batch-table-body input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });

            if (this.checked) {
                selectedBatches = Array.from(dataStore.filteredBatches || dataStore.batches || []).map(batch => batch.ivmstr_ivno);
            } else {
                selectedBatches = [];
            }
        });

        doc.getElementById('select-all-patterns').addEventListener('change', function() {
            const checkboxes = doc.querySelectorAll('#pattern-table-body input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
        });

        // 종합송장 버튼
        doc.getElementById('show-invoices-button').addEventListener('click', function() {
            const selectedPatterns = Array.from(doc.querySelectorAll('#pattern-table-body input[type="checkbox"]:checked'))
                .map(checkbox => parseInt(checkbox.dataset.patternId, 10));

            if (selectedPatterns.length === 0) {
                displayPopupMessage(doc, '선택된 패턴이 없습니다. 패턴을 선택해주세요.', 'error');
                return;
            }

            const invoiceNumbers = selectedPatterns.flatMap(patternId => {
                const pattern = currentPatterns.find(p => p.id === patternId);
                return pattern ? pattern.invoices : [];
            });

            showInvoiceModalList(doc, invoiceNumbers);
        });

        // 종합출고 버튼
        doc.getElementById('shipping-button').addEventListener('click', function() {
            const selectedPatterns = Array.from(doc.querySelectorAll('#pattern-table-body input[type="checkbox"]:checked'))
                .map(checkbox => parseInt(checkbox.dataset.patternId, 10));

            if (selectedPatterns.length === 0) {
                displayPopupMessage(doc, '선택된 패턴이 없습니다. 패턴을 선택해주세요.', 'error');
                return;
            }

            const invoiceNumbers = selectedPatterns.flatMap(patternId => {
                const pattern = currentPatterns.find(p => p.id === patternId);
                return pattern ? pattern.invoices : [];
            });

            showShippingModal(doc, invoiceNumbers);
        });

        // 출고 모달 닫기 버튼들
        doc.getElementById('close-shipping-modal').addEventListener('click', function() {
            doc.getElementById('shipping-modal').style.display = 'none';
        });

        doc.getElementById('close-shipping-button').addEventListener('click', function() {
            doc.getElementById('shipping-modal').style.display = 'none';
        });

        doc.getElementById('close-invoice-modal').addEventListener('click', function() {
            doc.getElementById('invoice-modal').style.display = 'none';
        });

        // 완료/실패 송장번호 클릭 이벤트
        doc.getElementById('completed-invoices').addEventListener('click', function() {
            const completedInvoices = dataStore.shippingLogs.completed;
            if (completedInvoices.length > 0) {
                // 현재 라벨 텍스트 가져오기
                const labelText = doc.querySelector('.shipping-stat-item:nth-child(2) .label').textContent;
                showInvoiceModalList(doc, completedInvoices, `${labelText} 송장번호`);
            }
        });

        doc.getElementById('failed-invoices').addEventListener('click', function() {
            const failedInvoices = dataStore.shippingLogs.failed;
            if (failedInvoices.length > 0) {
                // 현재 라벨 텍스트 가져오기
                const labelText = doc.querySelector('.shipping-stat-item:nth-child(3) .label').textContent;
                showInvoiceModalList(doc, failedInvoices, `${labelText} 송장번호`);
            }
        });

        // 송장번호 복사 버튼 이벤트
        doc.getElementById('copy-newline-button').addEventListener('click', function() {
            copyInvoices(doc, '\n');
        });

        doc.getElementById('copy-comma-button').addEventListener('click', function() {
            copyInvoices(doc, ',');
        });

        doc.getElementById('download-csv-button').addEventListener('click', function() {
            downloadInvoicesCSV(doc);
        });

        // 작업시작 버튼
        doc.getElementById('start-shipping-button').addEventListener('click', function() {
            const invoiceList = this.dataset.invoices ? JSON.parse(this.dataset.invoices) : [];
            const isCancelMode = doc.getElementById('cancel-mode').checked;
            const shippingDate = doc.getElementById('shipping-date').value;

            if (invoiceList.length === 0) {
                addShippingLog(doc, '처리할 송장번호가 없습니다.', 'error');
                return;
            }

            // 버튼 비활성화 및 출고취소모드 체크박스 비활성화
            this.disabled = true;
            doc.getElementById('cancel-mode').disabled = true;
            doc.getElementById('shipping-date').disabled = true;

            // 로그 초기화
            doc.getElementById('shipping-log').innerHTML = '';

            // 송장 로그 초기화
            dataStore.shippingLogs.completed = [];
            dataStore.shippingLogs.failed = [];

            // 통계 초기화
            doc.getElementById('completed-invoices').textContent = '0';
            doc.getElementById('failed-invoices').textContent = '0';
            doc.getElementById('progress-percentage').textContent = '0%';
            doc.getElementById('shipping-progress-bar').style.width = '0%';

            // 출고 작업 시작
            processShipping(doc, invoiceList, shippingDate, isCancelMode);
        });

        // 병렬 처리 개수 증가/감소 버튼 이벤트
        doc.getElementById('increase-parallel').addEventListener('click', function() {
            const parallelInput = doc.getElementById('parallel-count');
            const currentValue = parseInt(parallelInput.value, 10) || 2;
            const newValue = Math.min(currentValue + 1, 10); // 최대 10개까지
            parallelInput.value = newValue;
        });

        doc.getElementById('decrease-parallel').addEventListener('click', function() {
            const parallelInput = doc.getElementById('parallel-count');
            const currentValue = parseInt(parallelInput.value, 10) || 2;
            const newValue = Math.max(currentValue - 1, 1); // 최소 1개
            parallelInput.value = newValue;
        });

        // 패턴 처리 함수
        window.processPatterns = function(batchNumber = null) {
            if (!dataStore.orders || dataStore.orders.length === 0) {
                log('주문 데이터가 없습니다');
                displayPopupMessage(doc, '주문 데이터가 없습니다. 먼저 데이터를 조회해주세요.', 'error');
                return;
            }

            // 패턴 전환 시 출력 관련 상태 초기화
            resetPrintingState(doc);

            // 패턴 탭으로 전환 및 최상단으로 스크롤
            doc.getElementById('pattern-tab').click();
            doc.body.scrollTop = 0;
            doc.documentElement.scrollTop = 0;

            // 로딩 표시
            doc.getElementById('pattern-table-body').innerHTML = `
                <tr>
                    <td colspan="9" class="pattern-analyzer-loading">
                        <div class="loading-spinner"></div> 패턴 분석 중...
                    </td>
                </tr>
            `;
            doc.getElementById('pattern-summary').style.display = 'none';

            // 지정된 차수에 대한 주문 필터링
            let filteredOrders;
            if (batchNumber) {
                filteredOrders = dataStore.orders.filter(order => order.ordlist_ivno === batchNumber);
                log(`배치 ${batchNumber}에 대한 주문 필터링: ${filteredOrders.length}개 찾음`);
            } else if (selectedBatches.length > 0) {
                filteredOrders = dataStore.orders.filter(order => selectedBatches.includes(order.ordlist_ivno));
                log(`선택된 배치 ${selectedBatches.join(',')}에 대한 주문 필터링: ${filteredOrders.length}개 찾음`);
            } else {
                filteredOrders = dataStore.orders;
                log(`모든 주문 사용: ${filteredOrders.length}개`);
            }

            if (filteredOrders.length === 0) {
                log('필터링된 주문이 없습니다');
                doc.getElementById('pattern-table-body').innerHTML = `
                    <tr>
                        <td colspan="9" class="status-message">
                            해당 차수에 대한 주문 데이터가 없습니다.
                        </td>
                    </tr>
                `;
                return;
            }

            // 송장번호 샘플 로깅
            const sampleInvoices = filteredOrders.slice(0, 5).map(o => ({
                송장번호: o.ordlist_dno_ori || o.ordlist_dno,
                차수: o.ordlist_ivno,
                제품명: o.basic_name,
                출력순차: o.ordlist_ivnum,
                배송상태: o.ordlist_fnsh
            }));
            log('주문 샘플:', sampleInvoices);

            // 패턴 분석
            const patterns = analyzePatternsforanalysis(filteredOrders);
            log(`패턴 분석 결과: ${patterns.length}개 패턴 발견`);

            if (patterns.length === 0) {
                doc.getElementById('pattern-table-body').innerHTML = `
                    <tr>
                        <td colspan="9" class="status-message">
                            패턴을 찾을 수 없습니다.
                        </td>
                    </tr>
                `;
                return;
            }

            currentPatterns = patterns;

            // 기본 필터 적용
            const minRepetition = parseInt(doc.getElementById('min-rep-input').value, 10) || 1;
            const includeKeywords = doc.getElementById('include-input').value ?
                doc.getElementById('include-input').value.split(',').map(k => k.trim()) : [];
            const excludeKeywords = doc.getElementById('exclude-input').value ?
                doc.getElementById('exclude-input').value.split(',').map(k => k.trim()) : [];

            const filterResult = filterPatternsforanalysis(patterns, includeKeywords, excludeKeywords, minRepetition);
            leftoverCount = filterResult.leftoverCount;
            displayPatterns(doc, filterResult.patterns, selectedBatches);

            // 패턴 요약 정보 표시
            updatePatternSummary(doc, filterResult.patterns, filterResult.stats);
        };

        // 출력용 패턴 준비
        function preparePrintPatterns() {
            if (!currentPatterns || currentPatterns.length === 0) return;

            // 현재 필터링된 패턴 가져오기
            const includeKeywords = doc.getElementById('include-input').value ?
                doc.getElementById('include-input').value.split(',').map(k => k.trim()) : [];
            const excludeKeywords = doc.getElementById('exclude-input').value ?
                doc.getElementById('exclude-input').value.split(',').map(k => k.trim()) : [];
            const minRepetition = parseInt(doc.getElementById('min-rep-input').value, 10) || 1;

            const filterResult = filterPatternsforanalysis(currentPatterns, includeKeywords, excludeKeywords, minRepetition);
            const patterns = filterResult.patterns;

            // 패턴을 반복 횟수 기준 내림차순으로 정렬
            const sortedPatterns = [...patterns].sort((a, b) => {
                // 짜투리는 항상 마지막
                if (a.id === 999999) return 1;
                if (b.id === 999999) return -1;
                // 다른 패턴은 반복 횟수 기준 내림차순
                return b.count - a.count;
            });

            // 짜투리와 일반 패턴 분리
            const regularPatterns = sortedPatterns.filter(p => p.id !== 999999);
            const leftoverPattern = sortedPatterns.find(p => p.id === 999999);

            // 정렬된 패턴의 송장번호 모음 (일반 패턴, 출력순차 기준 정렬)
            const printPatterns = [];

            // 1. 일반 패턴 처리 (패턴 내에서 출력순차 오름차순)
            regularPatterns.forEach(pattern => {
                // 패턴 내 송장번호를 출력순차 기준으로 정렬
                const sortedInvoices = [...pattern.invoices].sort((a, b) => {
                    const orderA = pattern.orderSequences[pattern.invoices.indexOf(a)] || 0;
                    const orderB = pattern.orderSequences[pattern.invoices.indexOf(b)] || 0;
                    return orderA - orderB;
                });

                // 패턴과 정렬된 송장번호 저장
                printPatterns.push({
                    patternId: pattern.id,
                    patternItems: pattern.items,
                    invoices: sortedInvoices,
                    orderSequences: sortedInvoices.map(inv =>
                        pattern.orderSequences[pattern.invoices.indexOf(inv)] || 0
                    )
                });
            });

            // 2. 짜투리 패턴 처리 (출력순차 오름차순으로 정렬)
            if (leftoverPattern) {
                // 짜투리 송장번호를 출력순차 기준으로 정렬
                const sortedLeftoverInvoices = [...leftoverPattern.invoices].sort((a, b) => {
                    const orderA = leftoverPattern.orderSequences[leftoverPattern.invoices.indexOf(a)] || 0;
                    const orderB = leftoverPattern.orderSequences[leftoverPattern.invoices.indexOf(b)] || 0;
                    return orderA - orderB;
                });

                // 짜투리 패턴과 정렬된 송장번호 저장
                if (sortedLeftoverInvoices.length > 0) {
                    printPatterns.push({
                        patternId: leftoverPattern.id,
                        patternItems: [{ productName: '짜투리', managementName: '', optionName: '' }],
                        invoices: sortedLeftoverInvoices,
                        orderSequences: sortedLeftoverInvoices.map(inv =>
                            leftoverPattern.orderSequences[leftoverPattern.invoices.indexOf(inv)] || 0
                        )
                    });
                }
            }

            // 출력 패턴 저장
            dataStore.printPatterns = printPatterns;

            log('출력용 패턴 준비 완료:', dataStore.printPatterns);
        }

        // 이미지 파일 분석
        function analyzeImageFiles(doc, files) {
            const imageFiles = [];
            const fileNameRegex = /(.+)_(\d+)_(\d+)\.jpe?g$/i;  // 이름_출력순차_번호.jpg
            const defaultFileRegex = /(.+)\.jpe?g$/i;  // 이름.jpg (1차수용)

            // 출력 로그 초기화
            doc.getElementById('print-output-log').innerHTML = '';

            addPrintLog(doc, `총 ${files.length}개의 이미지 파일을 분석합니다...`);

            // 파일 분석
            files.forEach(file => {
                const fileName = file.name;
                let match = fileName.match(fileNameRegex);

                if (match) {
                    // 일반 파일 (이름_출력순차_번호.jpg)
                    const [, name, sequence, number] = match;
                    imageFiles.push({
                        fileName,
                        file,
                        name,
                        sequence: parseInt(sequence, 10),
                        number: parseInt(number, 10)
                    });
                } else {
                    // 기본 파일 (이름.jpg) - 1차수로 처리
                    match = fileName.match(defaultFileRegex);
                    if (match) {
                        const [, name] = match;
                        imageFiles.push({
                            fileName,
                            file,
                            name,
                            sequence: 1,  // 출력순차 1로 처리
                            number: 1     // 1번으로 처리
                        });
                    }
                }
            });

            // 순차번호별 파일 수 계산
            const sequenceCounts = {};
            imageFiles.forEach(img => {
                sequenceCounts[img.sequence] = (sequenceCounts[img.sequence] || 0) + 1;
            });

            // 중복 순차번호 표시
            const sequenceNumbers = Object.keys(sequenceCounts).map(Number).sort((a, b) => a - b);
            addPrintLog(doc, `분석된 출력순차: ${sequenceNumbers.join(', ')}`);

            // 각 순차번호별 최대 번호 표시
            for (const seq of sequenceNumbers) {
                const filesWithSeq = imageFiles.filter(img => img.sequence === seq);
                const maxNumber = Math.max(...filesWithSeq.map(img => img.number));
                addPrintLog(doc, `순차번호 ${seq}: ${filesWithSeq.length}개 파일, 최대 ${maxNumber}번째 이미지`);
            }

            // 파일 수와 순차 분석 통계
            addPrintLog(doc, `분석 완료: ${imageFiles.length}개 이미지, ${sequenceNumbers.length}개 출력순차`);

            // 전체 파일 목록 반환
            return imageFiles;
        }

        // 출력 시작 함수 수정
        // 기존 startPrinting 함수를 수정하여 실제 출력 기능 구현
        function startPrinting(doc, files) {
            if (!dataStore.printPatterns || dataStore.printPatterns.length === 0) {
                addPrintLog(doc, '출력할 패턴이 없습니다.', 'error');
                return;
            }

            if (files.length === 0) {
                addPrintLog(doc, '출력할 파일이 없습니다. 폴더를 다시 선택해주세요.', 'error');
                return;
            }

            // 이미지 파일 분석 및 DB화
            const imageFiles = analyzeImageFiles(doc, files);

            // 패턴 건수와 이미지 파일 건수 검증
            const validationResults = validatePatternImageCounts(doc, imageFiles, dataStore.printPatterns);

            // 검증 결과가 있으면 경고 대화상자 표시
            if (validationResults.length > 0) {
                showValidationDialog(doc, validationResults);
                return; // 대화상자에서 계속 진행하기 전까지 출력 중단
            } else {
                // 검증 통과 시 바로 출력 진행
                continueWithPrinting(doc);
            }
        }

        // 출력 계속 진행 함수 (검증 후 실제 출력 수행)
        function continueWithPrinting(doc) {
            addPrintLog(doc, '출력 준비 중...');

            // 이미지 파일 재분석 (continueWithPrinting 호출 시점에 따라 다시 필요할 수 있음)
            const files = folderFiles;
            const imageFiles = analyzeImageFiles(files);

            // 순차번호별로 그룹화
            const sequenceGroups = {};
            imageFiles.forEach(img => {
                if (!sequenceGroups[img.sequence]) {
                    sequenceGroups[img.sequence] = [];
                }
                sequenceGroups[img.sequence].push(img);
            });

            // 각 순차번호 내에서 번호순으로 정렬
            Object.keys(sequenceGroups).forEach(seq => {
                sequenceGroups[seq].sort((a, b) => a.number - b.number);
            });

            // 출력용 임시 창 생성
            const printWindow = window.open('', 'printWindow', 'width=800,height=600');
            if (!printWindow) {
                addPrintLog(doc, '팝업 창이 차단되었습니다. 팝업 차단을 해제해주세요.', 'error');
                return;
            }

            // 출력 HTML 준비
            printWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>송장 이미지 출력</title>
                    <style>
                        body {
                            margin: 0;
                            padding: 0;
                            background: white;
                        }
                        .print-container {
                            display: flex;
                            flex-direction: column;
                            width: 100%;
                        }
                        .invoice-wrapper {
                            page-break-after: always;
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            justify-content: center;
                            height: 100vh;
                        }
                        .invoice-image {
                            max-width: 100%;
                            max-height: 100%;
                            object-fit: contain;
                        }
                        .invoice-label {
                            display: none; /* 이미지 외 텍스트는 숨김 처리 */
                        }
                        @page {
                            size: auto;
                            margin: 0mm;
                        }
                        @media print {
                            body {
                                background: white;
                            }
                        }
                    </style>
                </head>
                <body>
                    <div class="print-container" id="printContainer"></div>
                    <script>
                        window.addEventListener('load', function() {
                            setTimeout(function() {
                                window.print();
                                setTimeout(function() {
                                    window.close();
                                }, 1000);
                            }, 1000);
                        });
                    </script>
                </body>
                </html>
            `);

            const container = printWindow.document.getElementById('printContainer');

            // 패턴별로 이미지 추가
            let printCount = 0;
            let failCount = 0;

            addPrintLog(doc, '출력 이미지 준비 중...');

            // 패턴별로 출력
            dataStore.printPatterns.forEach((pattern, patternIndex) => {
                const patternDesc = pattern.patternId === 999999 ?
                    '짜투리' :
                    pattern.patternItems.map(item => item.productName).join(', ').substring(0, 30) + '...';

                addPrintLog(doc, `패턴 ${patternIndex + 1}: ${patternDesc} (${pattern.invoices.length}건)`);

                // 각 송장번호별로 처리
                pattern.invoices.forEach((invoice, invIndex) => {
                    const sequence = pattern.orderSequences[invIndex];

                    if (sequenceGroups[sequence]) {
                        const images = sequenceGroups[sequence];
                        const imageCount = images.length;

                        if (imageCount > 0) {
                            addPrintLog(doc, `  송장번호 ${invoice} (순차 ${sequence}): ${imageCount}개 이미지 출력`);
                            printCount += imageCount;

                            // 이미지 추가
                            images.forEach((img, imgIndex) => {
                                addImageToPrintWindow(container, img.file, invoice, sequence, imgIndex + 1);
                            });
                        } else {
                            addPrintLog(doc, `  송장번호 ${invoice} (순차 ${sequence}): 해당 출력순차의 이미지가 없습니다.`, 'error');
                            failCount++;
                        }
                    } else {
                        addPrintLog(doc, `  송장번호 ${invoice} (순차 ${sequence}): 해당 출력순차의 이미지가 없습니다.`, 'error');
                        failCount++;
                    }
                });
            });

            // 출력 요약
            addPrintLog(doc, `출력 준비 완료: 총 ${printCount}개 이미지, ${failCount}건 실패`);

            // 문서 닫기
            printWindow.document.close();
        }

        // 이미지 파일을 분석하여 구조화된 데이터로 변환
        function analyzeImageFiles(files) {
            const imageFiles = [];
            // 정규 패턴: 이름_출력순차_번호.jpg (예: asdf_1_2.jpg, asdf_2_1.jpg 등)
            const fileNameRegex = /(.+)_(\d+)_(\d+)\.jpe?g$/i;
            // 1차수 첫번째 이미지용 패턴: 이름.jpg (예: asdf.jpg)
            const defaultFileRegex = /(.+)\.jpe?g$/i;

            // 파일 분석
            Array.from(files).forEach(file => {
                const fileName = file.name;
                let match = fileName.match(fileNameRegex);

                if (match) {
                    // 정규 패턴 (이름_출력순차_번호.jpg)
                    const [, name, sequence, number] = match;
                    imageFiles.push({
                        fileName,
                        file,
                        name,
                        sequence: parseInt(sequence, 10),
                        number: parseInt(number, 10)
                    });
                } else {
                    // 1차수 첫번째 이미지 패턴 (이름.jpg)
                    match = fileName.match(defaultFileRegex);
                    if (match) {
                        const [, name] = match;
                        imageFiles.push({
                            fileName,
                            file,
                            name,
                            sequence: 1,  // 1차수로 처리
                            number: 1     // 1번 이미지로 처리
                        });
                    }
                }
            });

            return imageFiles;
        }

        // 출력 창에 이미지 추가
        function addImageToPrintWindow(container, file, invoice, sequence, imageNumber) {
            // 이미지를 담을 래퍼 생성 (페이지 구분용)
            const wrapper = document.createElement('div');
            wrapper.className = 'invoice-wrapper';

            // 이미지용 URL 생성
            const imageUrl = URL.createObjectURL(file);

            // 이미지 요소 생성
            const img = document.createElement('img');
            img.className = 'invoice-image';
            img.src = imageUrl;
            img.alt = `송장 ${invoice} 이미지 ${imageNumber}`;

            // 라벨 요소 (숨김 처리)
            const label = document.createElement('div');
            label.className = 'invoice-label';
            label.textContent = `송장번호: ${invoice}, 출력순차: ${sequence}, 이미지번호: ${imageNumber}`;

            // 요소 추가
            wrapper.appendChild(img);
            wrapper.appendChild(label);
            container.appendChild(wrapper);

            // 이미지 로드 후 URL 해제 (메모리 누수 방지)
            img.onload = function() {
                URL.revokeObjectURL(imageUrl);
            };
        }

        // 폴더 선택 이벤트 핸들러 수정
        function setupFolderSelect(doc) {
            doc.getElementById('folder-select').addEventListener('change', function(e) {
                const files = e.target.files;

                if (files.length > 0) {
                    // 폴더 경로 추출 (Chrome에서는 webkitRelativePath 사용)
                    const folderPath = files[0].webkitRelativePath.split('/')[0];
                    doc.getElementById('selected-folder-name').textContent = `선택된 폴더: ${folderPath}`;

                    // JPG 파일만 필터링
                    folderFiles = Array.from(files).filter(file =>
                                                           file.name.toLowerCase().endsWith('.jpg') ||
                                                           file.name.toLowerCase().endsWith('.jpeg')
                                                          );

                    if (folderFiles.length === 0) {
                        addPrintLog(doc, '선택한 폴더에 JPG 이미지 파일이 없습니다.', 'error');
                        doc.getElementById('print-output-log').style.display = 'block';
                        doc.getElementById('start-print-button').disabled = true;
                        return;
                    }

                    // 간단한 파일 분석 (전체 파일 수만 표시)
                    addPrintLog(doc, `총 ${folderFiles.length}개의 이미지 파일을 찾았습니다.`);

                    selectedFolder = folderPath;
                    doc.getElementById('start-print-button').disabled = false;
                    doc.getElementById('print-output-log').style.display = 'block';
                }
            });
        }

        // 인쇄 스타일 추가
        function addPrintStyles() {
            const style = document.createElement('style');
            style.textContent = `
        @media print {
            body * {
                visibility: hidden;
            }
            .print-container, .print-container * {
                visibility: visible;
            }
            .print-container {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
            }
            .invoice-label {
                display: none !important;
            }
        }
    `;
            document.head.appendChild(style);
        }

        // 출력 로그 추가
        function addPrintLog(doc, message, type = 'info') {
            const logContainer = doc.getElementById('print-output-log');
            const logItem = doc.createElement('div');
            logItem.className = `shipping-log-item shipping-log-${type}`;
            logItem.textContent = message;

            logContainer.appendChild(logItem);
            logContainer.scrollTop = logContainer.scrollHeight; // 로그 스크롤 자동 이동
        }

        // 체크박스 이벤트
        window.updateSelectedBatches = function(batchNumber, checked) {
            if (checked) {
                if (!selectedBatches.includes(batchNumber)) {
                    selectedBatches.push(batchNumber);
                }
            } else {
                selectedBatches = selectedBatches.filter(bn => bn !== batchNumber);
            }
        };

        // 자동으로 현재 날짜로 조회 실행
        setTimeout(() => {
            doc.getElementById('search-button').click();
        }, 500);

        // 패턴 건수와 이미지 파일 건수 검증 함수 추가
        function validatePatternImageCounts(doc, imageFiles, patterns) {
            // 출력순차별 이미지 파일 그룹화
            const sequenceGroups = {};
            imageFiles.forEach(img => {
                if (!sequenceGroups[img.sequence]) {
                    sequenceGroups[img.sequence] = [];
                }
                sequenceGroups[img.sequence].push(img);
            });

            // 패턴별 송장 건수와 해당 순차의 이미지 매칭 검증
            const validationResults = [];

            patterns.forEach((pattern, patternIndex) => {
                const patternDesc = pattern.patternId === 999999 ?
                    '짜투리' :
                    pattern.patternItems.map(item => item.productName).join(', ').substring(0, 30) + '...';

                // 송장별 이미지 검증
                pattern.invoices.forEach((invoice, invIndex) => {
                    const sequence = pattern.orderSequences[invIndex];

                    // 해당 순차의 이미지 확인
                    if (!sequenceGroups[sequence] || sequenceGroups[sequence].length === 0) {
                        validationResults.push({
                            type: 'missing',
                            patternIndex,
                            patternDesc,
                            invoice,
                            sequence,
                            message: `패턴 ${patternIndex + 1}(${patternDesc})의 송장 ${invoice}(순차 ${sequence})에 해당하는 이미지 파일이 없습니다.`
                        });
                    }
                });
            });

            // 이미지는 있지만 매칭되는 송장이 없는 경우 검증
            Object.keys(sequenceGroups).forEach(sequence => {
                // 순차번호를 숫자로 변환
                const seqNum = parseInt(sequence, 10);
                let matched = false;

                // 모든 패턴의 송장 순차번호 확인
                patterns.forEach(pattern => {
                    pattern.orderSequences.forEach(orderSeq => {
                        if (orderSeq === seqNum) {
                            matched = true;
                        }
                    });
                });

                if (!matched) {
                    validationResults.push({
                        type: 'extra',
                        sequence: seqNum,
                        imageCount: sequenceGroups[sequence].length,
                        message: `순차번호 ${seqNum}의 이미지 ${sequenceGroups[sequence].length}개가 있지만, 패턴에 해당 순차번호가 없습니다.`
                    });
                }
            });

            return validationResults;
        }

        // 검증 결과를 표시하는 대화상자 추가
        function showValidationDialog(doc, validationResults) {
            // 이미 존재하는 검증 대화상자 제거
            const existingDialog = doc.getElementById('validation-dialog');
            if (existingDialog) {
                existingDialog.remove();
            }

            // 대화상자 컨테이너 생성
            const dialogOverlay = doc.createElement('div');
            dialogOverlay.id = 'validation-dialog';
            dialogOverlay.className = 'modal-overlay';
            dialogOverlay.style.zIndex = '2001'; // 폴더 선택 대화상자보다 위에 표시

            const dialogContent = doc.createElement('div');
            dialogContent.className = 'modal-content';
            dialogContent.style.width = '700px';
            dialogContent.style.maxHeight = '80vh';

            // 대화상자 헤더
            const dialogHeader = doc.createElement('div');
            dialogHeader.className = 'modal-header';
            dialogHeader.style.backgroundColor = '#ffebee';
            dialogHeader.style.borderBottom = '1px solid #ffcdd2';

            const dialogTitle = doc.createElement('h3');
            dialogTitle.className = 'modal-title';
            dialogTitle.style.color = '#c62828';
            dialogTitle.innerHTML = '⚠️ 패턴-이미지 건수 불일치 경고';

            const closeButton = doc.createElement('button');
            closeButton.className = 'modal-close';
            closeButton.innerHTML = '&times;';
            closeButton.addEventListener('click', () => {
                dialogOverlay.remove();
                // 닫을 때 상태 초기화
                resetPrintingState(doc);
            });

            dialogHeader.appendChild(dialogTitle);
            dialogHeader.appendChild(closeButton);

            // 대화상자 내용
            const dialogBody = doc.createElement('div');
            dialogBody.className = 'modal-body';
            dialogBody.style.maxHeight = 'calc(80vh - 130px)';
            dialogBody.style.overflowY = 'auto';

            const warningMessage = doc.createElement('div');
            warningMessage.style.padding = '10px';
            warningMessage.style.marginBottom = '15px';
            warningMessage.style.backgroundColor = '#fff3e0';
            warningMessage.style.borderRadius = '4px';
            warningMessage.style.border = '1px solid #ffe0b2';
            warningMessage.innerHTML = '<strong>주의:</strong> 패턴의 건수와 이미지 파일 건수가 일치하지 않습니다. 이는 차수가 다르거나 파일이 누락되었음을 의미할 수 있습니다.';

            dialogBody.appendChild(warningMessage);

            // 불일치 목록
            const issuesList = doc.createElement('div');
            issuesList.style.marginBottom = '15px';

            validationResults.forEach(result => {
                const issueItem = doc.createElement('div');
                issueItem.style.padding = '8px';
                issueItem.style.marginBottom = '5px';
                issueItem.style.borderLeft = result.type === 'missing' ? '4px solid #f44336' : '4px solid #ff9800';
                issueItem.style.backgroundColor = result.type === 'missing' ? '#ffebee' : '#fff3e0';
                issueItem.textContent = result.message;

                issuesList.appendChild(issueItem);
            });

            dialogBody.appendChild(issuesList);

            // 대화상자 푸터
            const dialogFooter = doc.createElement('div');
            dialogFooter.className = 'modal-footer';
            dialogFooter.style.backgroundColor = '#ffebee';
            dialogFooter.style.borderTop = '1px solid #ffcdd2';

            const continueButton = doc.createElement('button');
            continueButton.className = 'pattern-analyzer-button';
            continueButton.style.backgroundColor = '#FF5722';
            continueButton.textContent = '계속 진행';
            continueButton.addEventListener('click', () => {
                dialogOverlay.remove();
                // 출력 계속 진행
                continueWithPrinting(doc);
            });

            const cancelButton = doc.createElement('button');
            cancelButton.className = 'pattern-analyzer-button';
            cancelButton.style.backgroundColor = '#9e9e9e';
            cancelButton.textContent = '취소';
            cancelButton.addEventListener('click', () => {
                dialogOverlay.remove();
                // 취소 시 상태 초기화
                resetPrintingState(doc);
            });

            dialogFooter.appendChild(continueButton);
            dialogFooter.appendChild(cancelButton);

            // 대화상자 조립
            dialogContent.appendChild(dialogHeader);
            dialogContent.appendChild(dialogBody);
            dialogContent.appendChild(dialogFooter);
            dialogOverlay.appendChild(dialogContent);

            // 문서에 추가
            doc.body.appendChild(dialogOverlay);
        }

        // 출력 모달 상태 초기화 함수 추가
        function resetPrintingState(doc) {
            // 출력 관련 상태 변수 초기화
            folderFiles = [];
            selectedFolder = null;

            // 출력 로그 초기화
            const logContainer = doc.getElementById('print-output-log');
            if (logContainer) {
                logContainer.innerHTML = '';
                logContainer.style.display = 'none';
            }

            // 폴더 선택 컨테이너 초기화
            const folderSelectContainer = doc.getElementById('folder-select-container');
            if (folderSelectContainer) {
                folderSelectContainer.style.display = 'none';
            }

            // 폴더 선택 input 초기화
            const folderSelect = doc.getElementById('folder-select');
            if (folderSelect) {
                folderSelect.value = '';
            }

            // 선택된 폴더명 초기화
            const selectedFolderName = doc.getElementById('selected-folder-name');
            if (selectedFolderName) {
                selectedFolderName.textContent = '';
            }

            // 출력 시작 버튼 비활성화
            const startPrintButton = doc.getElementById('start-print-button');
            if (startPrintButton) {
                startPrintButton.disabled = true;
            }

            // 혹시 남아있는 검증 다이얼로그 제거
            const validationDialog = doc.getElementById('validation-dialog');
            if (validationDialog) {
                validationDialog.remove();
            }
        }

        // 출고 처리 함수 (병렬 처리 지원)
        function processShipping(doc, invoices, shippingDate, isCancelMode) {
            const totalCount = invoices.length;
            let completedCount = 0;
            let failedCount = 0;
            let processingCount = 0;
            let isProcessing = true;
            let currentIndex = 0;

            // 병렬 처리 개수 설정
            const maxParallelCount = parseInt(doc.getElementById('parallel-count').value, 10) || 2;
            // 최소 1, 최대 10으로 제한
            const parallelCount = Math.min(Math.max(maxParallelCount, 1), 10);

            // 작업 중지 버튼 표시
            const startButton = doc.getElementById('start-shipping-button');
            const stopButton = doc.getElementById('stop-shipping-button');
            startButton.style.display = 'none';
            stopButton.style.display = 'inline-block';

            // 출고/취소 모드에 따라 라벨 업데이트
            updateShippingLabels(doc, isCancelMode);

            // 진행바 색상 변경
            const progressBar = doc.getElementById('shipping-progress-bar');
            progressBar.style.backgroundColor = isCancelMode ? '#F44336' : '#4CAF50';

            // 날짜 포맷 변환
            const formattedDate = shippingDate.replace(/-/g, '');

            // API 파라미터 설정
            const defaultParams = isCancelMode ? {
                CANCEL_TYPE: '2',
                RDNO_DATE: shippingDate
            } : {
                rdno_date: shippingDate,
                inoutstock_gbn1: '4871',
                inoutstock_wah: '1060',
                loca_wah_none: '1059',
                loca_zone_none: '2244',
                loca_seq_none: '210221',
                ebutcam_start: 'N',
                ebutcam_ofc_code: '',
                ebutcam_wuser: 'BMF1',
                SOfc_dbtype: 'A',
                SUser_ofc: '377',
                SUser_id: 'BMF1',
                SOfc_jaego: 'Y',
                SOfc_matyn: 'Y',
                SOfc_dnoayn: 'N',
                SUser_gbn: '2',
                SUser_cust: '4603',
                SOfc_jgtyp: '4'
            };

            // 출고 처리 시작 로그
            addShippingLog(doc, `${isCancelMode ? '출고취소' : '출고'} 작업 시작 (총 ${totalCount}건, 병렬 처리 개수: ${parallelCount})`);

            // 처리할 송장번호가 없는 경우
            if (totalCount === 0) {
                addShippingLog(doc, '처리할 송장번호가 없습니다.', 'error');
                finishProcessing();
                return;
            }

            // 중지 버튼 클릭 이벤트 처리
            function setupStopButton() {
                stopButton.addEventListener('click', function stopButtonHandler() {
                    if (isProcessing) {
                        isProcessing = false;
                        addShippingLog(doc, '작업 중지 요청됨. 진행 중인 요청이 완료되면 중지됩니다...', 'error');
                        stopButton.disabled = true;
                        stopButton.textContent = '중지 중...';
                    }
                    // 이벤트 핸들러 제거 (중복 실행 방지)
                    stopButton.removeEventListener('click', stopButtonHandler);
                });
            }

            // 작업 완료 시 정리 작업
            function finishProcessing() {
                isProcessing = false;

                // 버튼 상태 원복
                startButton.style.display = 'inline-block';
                startButton.disabled = false;
                stopButton.style.display = 'none';
                stopButton.disabled = false;
                stopButton.textContent = '작업중지';

                // 컨트롤 활성화
                doc.getElementById('cancel-mode').disabled = false;
                doc.getElementById('shipping-date').disabled = false;
                doc.getElementById('parallel-count').disabled = false;

                // 완료 메시지 추가
                const statusText = isProcessing ? '작업 중지됨' : '작업 완료';
                addShippingLog(doc, `${statusText}: ${isCancelMode ? '취소' : '출고'}완료 ${completedCount}건, ${isCancelMode ? '취소' : '출고'}실패 ${failedCount}건`);
            }

            // 개별 송장 처리 함수
            function processInvoice(index) {
                if (!isProcessing) return Promise.resolve();

                const invoiceNumber = invoices[index];

                // URL 준비
                let apiUrl;
                let params;

                if (isCancelMode) {
                    // 출고취소 API
                    apiUrl = 'https://www.ebut3pl.co.kr/site/site410save';
                    params = {
                        ...defaultParams,
                        RDNO_NUM: invoiceNumber
                    };
                } else {
                    // 출고 API
                    apiUrl = 'https://www.ebut3pl.co.kr/site/site413save';
                    params = {
                        ...defaultParams,
                        rdno_num: invoiceNumber
                    };
                }

                // 쿼리 파라미터로 변환
                const queryParams = Object.entries(params)
                    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
                    .join('&');

                const fullUrl = `${apiUrl}?${queryParams}`;

                // API 호출을 Promise로 랩핑
                return new Promise((resolve) => {
                    GM_xmlhttpRequest({
                        method: 'GET',
                        url: fullUrl,
                        headers: {
                            'Accept': 'application/json, text/javascript, */*; q=0.01',
                            'X-Requested-With': 'XMLHttpRequest',
                            'Cookie': document.cookie,
                            'User-Agent': navigator.userAgent
                        },
                        onload: function(response) {
                            try {
                                if (!response.responseText) {
                                    throw new Error('응답이 비어있습니다.');
                                }

                                const responseData = JSON.parse(response.responseText);

                                // 성공 여부 확인
                                let isSuccess = false;

                                if (isCancelMode) {
                                    // 출고취소 성공 조건
                                    isSuccess = responseData.sucess === 'true' && parseInt(responseData.cnt, 10) > 0;
                                } else {
                                    // 출고 성공 조건
                                    isSuccess = responseData.fnsh === '0';
                                }

                                if (isSuccess) {
                                    // 성공
                                    completedCount++;
                                    addShippingLog(doc, `성공: ${invoiceNumber}`, 'success');

                                    // 성공한 송장번호 저장
                                    dataStore.shippingLogs.completed.push(invoiceNumber);
                                } else {
                                    // 실패
                                    failedCount++;
                                    addShippingLog(doc, `실패: ${invoiceNumber} (${isCancelMode ? '취소실패' : '출고실패'})`, 'error');

                                    // 실패한 송장번호 저장
                                    dataStore.shippingLogs.failed.push(invoiceNumber);
                                }
                            } catch (error) {
                                // 응답 처리 실패
                                failedCount++;
                                addShippingLog(doc, `오류: ${invoiceNumber} (${error.message})`, 'error');

                                // 실패한 송장번호 저장
                                dataStore.shippingLogs.failed.push(invoiceNumber);
                            }

                            // 진행률 업데이트
                            const processedCount = completedCount + failedCount;
                            updateProgress(doc, processedCount, totalCount, completedCount, failedCount);

                            // 작업 완료 표시
                            processingCount--;
                            resolve();
                        },
                        onerror: function(error) {
                            // 요청 실패
                            failedCount++;
                            addShippingLog(doc, `요청 실패: ${invoiceNumber} (${error.statusText || '네트워크 오류'})`, 'error');

                            // 실패한 송장번호 저장
                            dataStore.shippingLogs.failed.push(invoiceNumber);

                            // 진행률 업데이트
                            const processedCount = completedCount + failedCount;
                            updateProgress(doc, processedCount, totalCount, completedCount, failedCount);

                            // 작업 완료 표시
                            processingCount--;
                            resolve();
                        }
                    });
                });
            }

            // 다음 작업 시작 함수
            function startNextBatch() {
                if (!isProcessing || processingCount >= parallelCount) {
                    return;
                }

                // 현재 인덱스부터 병렬 처리 개수만큼 처리
                while (processingCount < parallelCount && currentIndex < totalCount && isProcessing) {
                    processingCount++;
                    const taskIndex = currentIndex++;

                    // 비동기 처리
                    processInvoice(taskIndex).then(() => {
                        // 모든 작업이 완료되었는지 확인
                        if (completedCount + failedCount >= totalCount || !isProcessing) {
                            if (processingCount === 0) {
                                finishProcessing();
                            }
                        } else {
                            // 다음 작업 시작
                            startNextBatch();
                        }
                    });
                }

                // 남은 작업이 없는 경우
                if (currentIndex >= totalCount && processingCount === 0) {
                    finishProcessing();
                }
            }

            // 중지 버튼 설정
            setupStopButton();

            // 컨트롤 비활성화
            doc.getElementById('cancel-mode').disabled = true;
            doc.getElementById('shipping-date').disabled = true;
            doc.getElementById('parallel-count').disabled = true;

            // 작업 시작
            startNextBatch();
        }

        // 진행률 업데이트
        function updateProgress(doc, current, total, completed, failed) {
            const percentage = Math.round((current / total) * 100);

            doc.getElementById('completed-invoices').textContent = completed;
            doc.getElementById('failed-invoices').textContent = failed;
            doc.getElementById('progress-percentage').textContent = `${percentage}%`;
            doc.getElementById('shipping-progress-bar').style.width = `${percentage}%`;
        }

        // 테이블 정렬
        function sortTable(doc, data, column, tableType, selectedBatches) {
            if (!data || data.length === 0) return;

            // 정렬 방향 결정
            let direction = 'asc';
            const th = doc.querySelector(`th[data-sort="${column}"]`);
            if (th) {
                const currentDirection = th.querySelector('.sort-icon').className.includes('sort-asc') ? 'asc' : 'desc';
                direction = currentDirection === 'asc' ? 'desc' : 'asc';

                // 정렬 아이콘 업데이트
                doc.querySelectorAll('.sort-icon').forEach(icon => {
                    icon.className = 'sort-icon';
                });

                th.querySelector('.sort-icon').className = `sort-icon sort-${direction}`;
            }

            // 데이터 정렬
            const sortedData = [...data].sort((a, b) => {
                let valA, valB;

                if (tableType === 'pattern' && column === 'invoices') {
                    valA = a.invoices ? a.invoices.length : 0;
                    valB = b.invoices ? b.invoices.length : 0;
                } else if (tableType === 'pattern' && column !== 'id' && column !== 'count') {
                    valA = a.items && a.items[0] ? a.items[0][column] || '' : '';
                    valB = b.items && b.items[0] ? b.items[0][column] || '' : '';
                } else {
                    valA = a[column] !== undefined ? a[column] : '';
                    valB = b[column] !== undefined ? b[column] : '';
                }

                // 숫자인 경우 숫자 정렬
                if (!isNaN(valA) && !isNaN(valB)) {
                    valA = Number(valA);
                    valB = Number(valB);
                } else {
                    // 문자열 정렬
                    valA = String(valA).toLowerCase();
                    valB = String(valB).toLowerCase();
                }

                if (valA < valB) return direction === 'asc' ? -1 : 1;
                if (valA > valB) return direction === 'asc' ? 1 : -1;
                return 0;
            });

            // 정렬된 데이터 표시
            if (tableType === 'batch') {
                displayBatches(doc, sortedData);
            } else {
                // 패턴 필터링 정보 계산
                const minRepetition = parseInt(doc.getElementById('min-rep-input').value, 10) || 1;
                const includeKeywords = doc.getElementById('include-input').value ?
                    doc.getElementById('include-input').value.split(',').map(k => k.trim()) : [];
                const excludeKeywords = doc.getElementById('exclude-input').value ?
                    doc.getElementById('exclude-input').value.split(',').map(k => k.trim()) : [];

                const filterResult = filterPatternsforanalysis(sortedData, includeKeywords, excludeKeywords, minRepetition);
                displayPatterns(doc, filterResult.patterns, selectedBatches);
                updatePatternSummary(doc, filterResult.patterns, filterResult.stats);
            }
        }

        // 페이지 로드 후 네비게이션 메뉴에 버튼 추가
        window.addEventListener('load', function() {
            setTimeout(function() {
                addNavMenuButton();
            }, 1000); // 1초 후에 실행 (페이지가 완전히 로드되도록)
        });
    }

    // 멀티셀렉트 초기화
    function initMultiSelect(doc, containerId, options) {
        const container = doc.getElementById(containerId);
        const selectedElement = container.querySelector('.multi-select-selected');
        const selectedTextElement = container.querySelector('.multi-select-selected-text');
        const badgesContainer = container.querySelector('.multi-select-badges');

        // 드롭다운 생성
        if (!container.querySelector('.multi-select-dropdown')) {
            const dropdown = doc.createElement('div');
            dropdown.className = 'multi-select-dropdown';

            // 검색 필드
            const searchContainer = doc.createElement('div');
            searchContainer.className = 'multi-select-search';
            const searchInput = doc.createElement('input');
            searchInput.type = 'text';
            searchInput.placeholder = '검색...';
            searchContainer.appendChild(searchInput);
            dropdown.appendChild(searchContainer);

            // 옵션 목록
            const optionsList = doc.createElement('ul');
            optionsList.className = 'multi-select-options';
            dropdown.appendChild(optionsList);

            // 컨트롤 버튼
            const controls = doc.createElement('div');
            controls.className = 'multi-select-controls';

            const countElement = doc.createElement('div');
            countElement.className = 'multi-select-count';
            countElement.textContent = '선택: 0';

            const actions = doc.createElement('div');
            actions.className = 'multi-select-actions';

            const selectAllButton = doc.createElement('button');
            selectAllButton.className = 'multi-select-action';
            selectAllButton.textContent = '전체선택';
            selectAllButton.addEventListener('click', function() {
                const checkboxes = dropdown.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(cb => {
                    if (!cb.checked) {
                        cb.checked = true;
                        cb.dispatchEvent(new Event('change'));
                    }
                });
            });

            const clearButton = doc.createElement('button');
            clearButton.className = 'multi-select-action';
            clearButton.textContent = '선택해제';
            clearButton.addEventListener('click', function() {
                const checkboxes = dropdown.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(cb => {
                    if (cb.checked) {
                        cb.checked = false;
                        cb.dispatchEvent(new Event('change'));
                    }
                });
            });

            actions.appendChild(selectAllButton);
            actions.appendChild(clearButton);

            controls.appendChild(countElement);
            controls.appendChild(actions);
            dropdown.appendChild(controls);

            container.appendChild(dropdown);

            // 검색 필드 이벤트
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const options = optionsList.querySelectorAll('li');
                options.forEach(option => {
                    const label = option.querySelector('label').textContent.toLowerCase();
                    if (label.includes(searchTerm)) {
                        option.style.display = '';
                    } else {
                        option.style.display = 'none';
                    }
                });
            });
        }

        // 드롭다운 참조
        const dropdown = container.querySelector('.multi-select-dropdown');
        const optionsList = dropdown.querySelector('.multi-select-options');
        const countElement = dropdown.querySelector('.multi-select-count');

        // 선택 영역 클릭 이벤트
        selectedElement.addEventListener('click', function(e) {
            e.stopPropagation();
            dropdown.classList.toggle('show');

            if (dropdown.classList.contains('show')) {
                selectedElement.querySelector('.multi-select-arrow').textContent = '▲';

                // 다른 곳 클릭 시 닫기
                const closeDropdown = function(e) {
                    if (!container.contains(e.target)) {
                        dropdown.classList.remove('show');
                        selectedElement.querySelector('.multi-select-arrow').textContent = '▼';
                        doc.removeEventListener('click', closeDropdown);
                    }
                };

                doc.addEventListener('click', closeDropdown);
            } else {
                selectedElement.querySelector('.multi-select-arrow').textContent = '▼';
            }
        });

        // 옵션 업데이트
        container.updateOptions = function(newOptions) {
            optionsList.innerHTML = '';

            // 전체 옵션 추가
            const allOption = doc.createElement('li');
            allOption.className = 'multi-select-option';
            allOption.innerHTML = `
                <input type="checkbox" id="${containerId}-all" value="">
                <label for="${containerId}-all">전체</label>
            `;
            optionsList.appendChild(allOption);

            const allCheckbox = allOption.querySelector('input[type="checkbox"]');
            allCheckbox.addEventListener('change', function() {
                const checkboxes = optionsList.querySelectorAll('input[type="checkbox"]');
                if (this.checked) {
                    // 전체 선택 시 다른 항목 선택 해제
                    checkboxes.forEach(cb => {
                        if (cb !== this) {
                            cb.checked = false;
                            cb.dispatchEvent(new Event('change', { bubbles: true }));
                        }
                    });

                    // 선택된 옵션 표시 업데이트
                    selectedTextElement.textContent = '전체';
                    badgesContainer.innerHTML = '';
                    countElement.textContent = '선택: 전체';
                } else {
                    // 전체 선택 해제시 선택 메시지 변경
                    selectedTextElement.textContent = '선택해주세요';
                    countElement.textContent = '선택: 0';
                }

                // 실시간 필터링 적용 - 값 변경 시 이벤트 발생
                const changeEvent = new CustomEvent('filterchange', {
                    detail: { containerId: containerId }
                });
                container.dispatchEvent(changeEvent);
            });

            // 개별 옵션 추가
            newOptions.forEach((option, index) => {
                const item = doc.createElement('li');
                item.className = 'multi-select-option';

                const id = `${containerId}-option-${index}`;
                item.innerHTML = `
                    <input type="checkbox" id="${id}" value="${option}">
                    <label for="${id}">${option}</label>
                `;

                optionsList.appendChild(item);

                const checkbox = item.querySelector('input[type="checkbox"]');
                checkbox.addEventListener('change', function() {
                    if (this.checked) {
                        // 개별 항목 선택 시 전체 선택 해제
                        allCheckbox.checked = false;

                        // 배지 추가
                        addBadge(this.value);
                    } else {
                        // 배지 제거
                        removeBadge(this.value);
                    }

                    // 선택된 항목 개수 계산
                    updateSelectedCount();

                    // 선택된 옵션 표시 업데이트
                    updateSelectedText();

                    // 실시간 필터링 적용 - 값 변경 시 이벤트 발생
                    const changeEvent = new CustomEvent('filterchange', {
                        detail: { containerId: containerId }
                    });
                    container.dispatchEvent(changeEvent);
                });
            });

            // 초기 상태는 전체 선택
            allCheckbox.checked = true;
            selectedTextElement.textContent = '전체';
            badgesContainer.innerHTML = '';
            countElement.textContent = '선택: 전체';
        };

        // 배지 추가
        function addBadge(value) {
            // 이미 있는 배지인지 확인
            const existingBadge = badgesContainer.querySelector(`.multi-select-badge[data-value="${value}"]`);
            if (existingBadge) return;

            const badge = doc.createElement('div');
            badge.className = 'multi-select-badge';
            badge.dataset.value = value;
            badge.innerHTML = `
                ${value}
                <span class="multi-select-badge-remove">×</span>
            `;

            badge.querySelector('.multi-select-badge-remove').addEventListener('click', function(e) {
                e.stopPropagation();

                // 체크박스 선택 해제
                const checkbox = optionsList.querySelector(`input[value="${value}"]`);
                if (checkbox) {
                    checkbox.checked = false;
                    checkbox.dispatchEvent(new Event('change'));
                }

                // 배지 제거
                badge.remove();

                // 선택된 항목 업데이트
                updateSelectedCount();
                updateSelectedText();

                // 실시간 필터링 적용 - 배지 제거 시에도 필터링 이벤트 발생
                const changeEvent = new CustomEvent('filterchange', {
                    detail: { containerId: containerId }
                });
                container.dispatchEvent(changeEvent);
            });

            badgesContainer.appendChild(badge);
        }

        // 배지 제거
        function removeBadge(value) {
            const badge = badgesContainer.querySelector(`.multi-select-badge[data-value="${value}"]`);
            if (badge) {
                badge.remove();
            }
        }

        // 선택된 항목 개수 업데이트
        function updateSelectedCount() {
            const checkedOptions = optionsList.querySelectorAll('input[type="checkbox"]:checked:not(#' + containerId + '-all)');
            countElement.textContent = '선택: ' + checkedOptions.length;
        }

        // 선택된 텍스트 업데이트
        function updateSelectedText() {
            const checkedOptions = optionsList.querySelectorAll('input[type="checkbox"]:checked:not(#' + containerId + '-all)');

            if (checkedOptions.length === 0) {
                selectedTextElement.textContent = '선택해주세요';
            } else if (checkedOptions.length <= 2) {
                // 2개 이하면 모두 표시
                const values = Array.from(checkedOptions).map(cb => cb.value);
                selectedTextElement.textContent = values.join(', ');
            } else {
                // 3개 이상이면 개수만 표시
                selectedTextElement.textContent = `${checkedOptions.length}개 선택됨`;
            }
        }

        // 외부에서 접근 가능한 함수들
        container.getValues = function() {
            const allCheckbox = optionsList.querySelector(`#${containerId}-all`);

            if (allCheckbox && allCheckbox.checked) {
                return [];  // 전체 선택 시 빈 배열 반환 (모든 항목)
            }

            const checkedOptions = optionsList.querySelectorAll('input[type="checkbox"]:checked:not(#' + containerId + '-all)');
            return Array.from(checkedOptions).map(cb => cb.value);
        };

        container.updateOptions(options);
    }

    // 멀티셀렉트 값 가져오기
    function getMultiSelectValues(doc, containerId) {
        const container = doc.getElementById(containerId);
        if (container && typeof container.getValues === 'function') {
            return container.getValues();
        }
        return [];
    }

    // 인쇄용 섹션 준비
    function preparePrintSection(doc, patterns) {
        const printSection = doc.getElementById('print-section');
        printSection.innerHTML = '';

        // 현재 날짜 계산
        const currentDate = new Date();
        const formattedDate = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}`;

        // 인쇄 헤더 추가 (출력일 포함)
        const headerContainer = doc.createElement('div');
        headerContainer.style.display = 'flex';
        headerContainer.style.justifyContent = 'space-between';
        headerContainer.style.alignItems = 'center';
        headerContainer.style.marginBottom = '20px';
        headerContainer.style.borderBottom = '2px solid #3f51b5';
        headerContainer.style.paddingBottom = '10px';

        const header = doc.createElement('h2');
        header.style.margin = '0';
        header.style.color = '#3f51b5';
        header.textContent = '주문 패턴 분석 결과';

        const dateInfo = doc.createElement('div');
        dateInfo.style.fontSize = '14px';
        dateInfo.style.color = '#666';
        dateInfo.textContent = `출력일: ${formattedDate}`;

        headerContainer.appendChild(header);
        headerContainer.appendChild(dateInfo);
        printSection.appendChild(headerContainer);

        // 요약 정보 복사 - 한 줄로 컴팩트하게 표시
        const summaryElement = doc.getElementById('pattern-summary');
        const summary = doc.createElement('div');
        summary.className = 'pattern-analyzer-summary';
        summary.style.display = 'flex';
        summary.style.flexWrap = 'wrap';
        summary.style.gap = '15px';
        summary.style.margin = '10px 0';
        summary.style.padding = '12px';
        summary.style.backgroundColor = '#fff';
        summary.style.borderRadius = '6px';
        summary.style.boxShadow = '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)';
        summary.style.alignItems = 'center';

        // 요약 정보 항목들을 한 줄에 표시할 항목들로 재구성
        const summaryData = {
            패턴수: null,
            패턴건수: null,
            짜투리건수: null,
            판매처: [],
            차수: []
        };

        // 기존 요약 정보에서 데이터 추출
        Array.from(summaryElement.children).forEach(item => {
            const label = item.querySelector('.label');
            const value = item.querySelector('.value');

            if (label && value) {
                const labelText = label.textContent.trim();

                if (labelText === '패턴 수') {
                    summaryData.패턴수 = value.textContent;
                } else if (labelText === '패턴 건수') {
                    summaryData.패턴건수 = value.textContent;
                } else if (labelText === '짜투리 건수') {
                    summaryData.짜투리건수 = value.textContent;
                } else if (labelText === '판매처') {
                    const tags = item.querySelectorAll('.pattern-analyzer-tag');
                    summaryData.판매처 = Array.from(tags).map(tag => tag.textContent);
                } else if (labelText === '차수') {
                    const tags = item.querySelectorAll('.pattern-analyzer-tag');
                    summaryData.차수 = Array.from(tags).map(tag => tag.textContent);
                }
            }
        });

        // 주요 숫자 데이터 항목 생성 (패턴 수, 패턴 건수, 짜투리 건수)
        const createInfoItem = (label, value) => {
            const item = doc.createElement('div');
            item.style.display = 'flex';
            item.style.alignItems = 'center';

            const labelElement = doc.createElement('span');
            labelElement.textContent = label + ': ';
            labelElement.style.fontWeight = 'bold';
            labelElement.style.fontSize = '13px';
            labelElement.style.color = '#555';
            labelElement.style.marginRight = '5px';

            const valueElement = doc.createElement('span');
            valueElement.textContent = value;
            valueElement.style.fontSize = '14px';
            valueElement.style.fontWeight = 'bold';
            valueElement.style.color = '#3f51b5';

            item.appendChild(labelElement);
            item.appendChild(valueElement);

            return item;
        };

        // 주요 정보 추가
        if (summaryData.패턴수) {
            summary.appendChild(createInfoItem('패턴 수', summaryData.패턴수));
        }

        if (summaryData.패턴건수) {
            summary.appendChild(createInfoItem('패턴 건수', summaryData.패턴건수));
        }

        if (summaryData.짜투리건수) {
            summary.appendChild(createInfoItem('짜투리 건수', summaryData.짜투리건수));
        }

        // 구분자 추가
        const divider = doc.createElement('div');
        divider.style.height = '20px';
        divider.style.width = '1px';
        divider.style.backgroundColor = '#e0e0e0';
        summary.appendChild(divider);

        // 판매처 정보
        if (summaryData.판매처.length > 0) {
            const siteContainer = doc.createElement('div');
            siteContainer.style.display = 'flex';
            siteContainer.style.alignItems = 'center';
            siteContainer.style.flexGrow = '1';

            const siteLabel = doc.createElement('span');
            siteLabel.textContent = '판매처: ';
            siteLabel.style.fontWeight = 'bold';
            siteLabel.style.fontSize = '13px';
            siteLabel.style.color = '#555';
            siteLabel.style.marginRight = '5px';

            const siteTags = doc.createElement('div');
            siteTags.style.display = 'flex';
            siteTags.style.flexWrap = 'wrap';
            siteTags.style.gap = '4px';

            summaryData.판매처.forEach(site => {
                const tag = doc.createElement('span');
                tag.className = 'pattern-analyzer-tag';
                tag.style.backgroundColor = '#e8eaf6';
                tag.style.color = '#3f51b5';
                tag.style.padding = '2px 6px';
                tag.style.borderRadius = '12px';
                tag.style.fontSize = '11px';
                tag.textContent = site;
                siteTags.appendChild(tag);
            });

            siteContainer.appendChild(siteLabel);
            siteContainer.appendChild(siteTags);
            summary.appendChild(siteContainer);
        }

        // 차수 정보
        if (summaryData.차수.length > 0) {
            const batchContainer = doc.createElement('div');
            batchContainer.style.display = 'flex';
            batchContainer.style.alignItems = 'center';
            batchContainer.style.flexGrow = '1';

            const batchLabel = doc.createElement('span');
            batchLabel.textContent = '차수: ';
            batchLabel.style.fontWeight = 'bold';
            batchLabel.style.fontSize = '13px';
            batchLabel.style.color = '#555';
            batchLabel.style.marginRight = '5px';

            const batchTags = doc.createElement('div');
            batchTags.style.display = 'flex';
            batchTags.style.flexWrap = 'wrap';
            batchTags.style.gap = '4px';

            summaryData.차수.forEach(batch => {
                const tag = doc.createElement('span');
                tag.className = 'pattern-analyzer-tag';
                tag.style.backgroundColor = '#e8eaf6';
                tag.style.color = '#3f51b5';
                tag.style.padding = '2px 6px';
                tag.style.borderRadius = '12px';
                tag.style.fontSize = '11px';
                tag.textContent = batch;
                batchTags.appendChild(tag);
            });

            batchContainer.appendChild(batchLabel);
            batchContainer.appendChild(batchTags);
            summary.appendChild(batchContainer);
        }

        // 필터 정보 추가
        const includeKeywords = doc.getElementById('include-input').value;
        const excludeKeywords = doc.getElementById('exclude-input').value;
        const minRepetition = doc.getElementById('min-rep-input').value;

        if (includeKeywords || excludeKeywords || (minRepetition && minRepetition !== '1')) {
            const filterInfo = doc.createElement('div');
            filterInfo.style.width = '100%';
            filterInfo.style.marginTop = '8px';
            filterInfo.style.paddingTop = '5px';
            filterInfo.style.borderTop = '1px solid #e0e0e0';
            filterInfo.style.fontSize = '11px';
            filterInfo.style.color = '#666';

            let filterText = '<strong>적용된 필터: </strong>';

            if (includeKeywords) {
                filterText += `포함검색어: ${includeKeywords} `;
            }

            if (excludeKeywords) {
                filterText += `제외검색어: ${excludeKeywords} `;
            }

            if (minRepetition && minRepetition !== '1') {
                filterText += `최소반복수: ${minRepetition}`;
            }

            filterInfo.innerHTML = filterText;
            summary.appendChild(filterInfo);
        }

        printSection.appendChild(summary);

        // 새로운, 단순화된 테이블 생성
        const table = doc.createElement('table');
        table.className = 'pattern-analyzer-table';
        table.style.width = '100%';
        table.style.borderCollapse = 'collapse';
        table.style.marginTop = '15px';
        table.style.fontSize = '12px';
        table.style.border = '1px solid #e0e0e0';
        table.style.backgroundColor = 'white';

        // 테이블 헤더
        const thead = doc.createElement('thead');
        const headerRow = doc.createElement('tr');

        const columns = ['순번', '제품명', '관리명', '옵션명', '수량', '반복수'];

        columns.forEach(colName => {
            const th = doc.createElement('th');
            th.textContent = colName;
            th.style.padding = '8px';
            th.style.border = '1px solid #e0e0e0';
            th.style.backgroundColor = '#f5f5f5';
            th.style.color = '#333';
            th.style.fontWeight = 'bold';

            // 제품명 컬럼만 왼쪽 정렬
            if (colName === '제품명') {
                th.style.textAlign = 'left';
            } else {
                th.style.textAlign = 'center';
            }

            headerRow.appendChild(th);
        });

        thead.appendChild(headerRow);
        table.appendChild(thead);

        // 테이블 내용
        const tbody = doc.createElement('tbody');
        let rowIndex = 1;

        patterns.forEach((pattern, patternIndex) => {
            // 짜투리 패턴은 제외
            if (pattern.id === 999999) return;

            // 음영 처리를 위한 배경색 지정
            const patternBgColor = patternIndex % 2 === 0 ? '#ffffff' : '#f5f9ff';

            pattern.items.forEach((item, itemIndex) => {
                const row = doc.createElement('tr');

                // 패턴별 음영 처리
                row.style.backgroundColor = patternBgColor;

                // 패턴 그룹 간 구분선
                if (itemIndex === 0 && patternIndex > 0) {
                    row.style.borderTop = '2px solid #e0e0e0';
                }

                // 순번은 첫 아이템에만 표시
                const indexCell = doc.createElement('td');
                if (itemIndex === 0) {
                    indexCell.textContent = rowIndex++;
                    indexCell.rowSpan = pattern.items.length;
                }

                // 제품명, 관리명, 옵션명, 수량
                const productCell = doc.createElement('td');
                productCell.textContent = item.productName;
                productCell.style.textAlign = 'left';
                productCell.style.padding = '8px';
                productCell.style.border = '1px solid #e0e0e0';

                const managementCell = doc.createElement('td');
                managementCell.textContent = item.managementName;
                managementCell.style.padding = '8px';
                managementCell.style.border = '1px solid #e0e0e0';

                const optionCell = doc.createElement('td');
                optionCell.textContent = item.optionName;
                optionCell.style.padding = '8px';
                optionCell.style.border = '1px solid #e0e0e0';

                const quantityCell = doc.createElement('td');
                quantityCell.textContent = item.quantity;
                quantityCell.style.padding = '8px';
                quantityCell.style.border = '1px solid #e0e0e0';

                // 반복수는 첫 아이템에만 표시
                const countCell = doc.createElement('td');
                if (itemIndex === 0) {
                    countCell.textContent = pattern.count;
                    countCell.rowSpan = pattern.items.length;
                }
                countCell.style.padding = '8px';
                countCell.style.border = '1px solid #e0e0e0';

                // 행에 셀 추가
                if (itemIndex === 0) {
                    row.appendChild(indexCell);
                }
                row.appendChild(productCell);
                row.appendChild(managementCell);
                row.appendChild(optionCell);
                row.appendChild(quantityCell);
                if (itemIndex === 0) {
                    row.appendChild(countCell);
                }

                tbody.appendChild(row);
            });
        });

        table.appendChild(tbody);
        printSection.appendChild(table);
    }

    // 필터 적용 (로컬 데이터)
    function filterLocalData(doc, siteFilters = [], exprFilters = [], showMessage = false) {
        if (!dataStore.batches || dataStore.batches.length === 0) {
            if (showMessage) {
                displayPopupMessage(doc, '필터링할 데이터가 없습니다.', 'error');
            }
            return;
        }

        // 원본 데이터 복사
        let filteredBatches = [...dataStore.batches];

        // 판매처 필터 적용
        if (siteFilters.length > 0) {
            filteredBatches = filteredBatches.filter(batch =>
                siteFilters.includes(batch.site_name)
            );
        }

        // 택배사 필터 적용
        if (exprFilters.length > 0) {
            filteredBatches = filteredBatches.filter(batch =>
                exprFilters.includes(batch.expr_name)
            );
        }

        // 필터링된 데이터 저장
        dataStore.filteredBatches = filteredBatches;

        // 차수 데이터 표시
        displayBatches(doc, filteredBatches);

    }

    // 모든 데이터를 한번에 가져오는 함수
    function fetchAllData(date) {
        if (!analyzerWindow || analyzerWindow.closed) return;

        const doc = analyzerWindow.document;

        // 패턴 탭이 활성화되어 있으면 즉시 차수 탭으로 전환
        if (doc.getElementById('pattern-tab').classList.contains('active')) {
            doc.getElementById('batch-tab').click();
        }

        // 로딩 표시
        doc.getElementById('batch-table-body').innerHTML = `
            <tr>
                <td colspan="8" class="pattern-analyzer-loading">
                    <div class="loading-spinner"></div> 데이터 로딩 중...
                </td>
            </tr>
        `;

        // API용 날짜 형식 지정
        const formattedDate = `${date.substring(0, 4)}-${date.substring(4, 6)}-${date.substring(6, 8)}`;

        // 90일 전 날짜 계산
        const currentDate = new Date(formattedDate);
        const days90Before = new Date(currentDate);
        days90Before.setDate(currentDate.getDate() - 90);
        const formattedDays90Before = days90Before.toISOString().split('T')[0];

        // 차수 목록 URL
        const batchesUrl = `https://www.ebut3pl.co.kr/site/site320main_jdata?IVMSTR_DATE=${formattedDate}&ORDLIST_DATE1=${formattedDays90Before}&ORDLIST_DATE2=${formattedDate}&IVMSTR_VIEWYN=Y&_search=false&rows=1000&page=1&sidx=ivmstr_seq&sord=asc`;

        // 주문 목록 URL
        const ordersUrl = `https://www.ebut3pl.co.kr/site/site210main_jdata?site_code=&basic_prov=&basic_prov_name=&VIEW_TYPE=2&ORDLIST_CUST=&ORDLIST_BRAND=&ORDLIST_IVLEVEL=&ORDLIST_NO1=&ORDLIST_OMAN=&ORDLIST_RMAN=&ORDLIST_TEL=&ORDLIST_FNSH=&ORDLIST_IVTRUE=Y&ORDLIST_GBN=&ORDLIST_MIYN=&DATE_GBN=ord_ivdate&DATE1=${formattedDate}&DATE2=${formattedDate}&ORDLIST_UPTYPE=&ORDLIST_NAME=&ORDLIST_MAT=&ORDLIST_DNO=&ORDLIST_SEQ=&ORDLIST_DOFC=&GROUP_VIEW_TYPE=1&ORDLIST_IVAFYN=&BASIC_NAME_GBN=&BASIC_NAME_VAL=&BASIC_BRAND=&ORDADD_REYN=&ORDLIST_NAME_NOT=&ORDLIST_OPT1_NOT=&gridReload=true&_search=false&nd=${Date.now()}&rows=2000000&page=1&sidx=ordlist_code&sord=asc`;

        log(`데이터 요청 시작 (${date})`);
        log(`차수 URL: ${batchesUrl}`);
        log(`주문 URL: ${ordersUrl}`);

        // 차수 데이터 가져오기
        GM_xmlhttpRequest({
            method: 'GET',
            url: batchesUrl,
            headers: {
                'Accept': 'application/json, text/javascript, */*; q=0.01',
                'X-Requested-With': 'XMLHttpRequest'
            },
            onload: function(batchResponse) {
                try {
                    if (!batchResponse.responseText) {
                        throw new Error('차수 데이터 응답이 비어있습니다.');
                    }

                    log('차수 데이터 응답 받음');

                    const batchData = JSON.parse(batchResponse.responseText);
                    if (!batchData || !batchData.rows) {
                        throw new Error('차수 데이터 형식이 올바르지 않습니다.');
                    }

                    // 차수 데이터 저장
                    dataStore.batches = batchData.rows || [];
                    dataStore.filteredBatches = null; // 필터링 데이터 초기화
                    log(`차수 데이터 저장 완료: ${dataStore.batches.length}개`);

                    // 이제 주문 데이터 가져오기
                    GM_xmlhttpRequest({
                        method: 'GET',
                        url: ordersUrl,
                        headers: {
                            'Accept': 'application/json, text/javascript, */*; q=0.01',
                            'X-Requested-With': 'XMLHttpRequest',
                            'Referer': 'https://www.ebut3pl.co.kr/jsp/site/site210main.jsp',
                            'Cookie': document.cookie,
                            'User-Agent': navigator.userAgent
                        },
                        onload: function(orderResponse) {
                            try {
                                if (!orderResponse.responseText) {
                                    throw new Error('주문 데이터 응답이 비어있습니다.');
                                }

                                log('주문 데이터 응답 받음');
                                log(`응답 길이: ${orderResponse.responseText.length} 바이트`);

                                const orderData = JSON.parse(orderResponse.responseText);
                                if (!orderData || !orderData.rows) {
                                    throw new Error('주문 데이터 형식이 올바르지 않습니다.');
                                }

                                // 주문 데이터 저장
                                dataStore.orders = orderData.rows || [];
                                log(`주문 데이터 저장 완료: ${dataStore.orders.length}개`);

                                // 데이터 샘플 로깅
                                if (dataStore.orders.length > 0) {
                                    const firstOrder = dataStore.orders[0];
                                    log('주문 데이터 샘플:', {
                                        송장번호: firstOrder.ordlist_dno_ori || firstOrder.ordlist_dno,
                                        차수: firstOrder.ordlist_ivno,
                                        제품명: firstOrder.basic_name,
                                        관리명: firstOrder.basic_nicn,
                                        옵션명: firstOrder.boptcode_name,
                                        출력순차: firstOrder.ordlist_ivnum,
                                        배송상태: firstOrder.ordlist_fnsh
                                    });
                                }

                                // 데이터 정보 업데이트
                                dataStore.currentDate = date;
                                dataStore.lastFetchTime = new Date().getTime();

                                // 데이터 처리
                                processData(doc);

                            } catch (error) {
                                console.error('주문 데이터 처리 오류:', error);
                                log(`주문 데이터 처리 오류: ${error.message}`);
                                if (orderResponse.responseText) {
                                    log(`응답 일부: ${orderResponse.responseText.substring(0, 200)}...`);
                                }
                                doc.getElementById('batch-table-body').innerHTML = `
                                    <tr>
                                        <td colspan="8" class="status-message">
                                            주문 데이터를 불러오는 중 오류가 발생했습니다. (${error.message})
                                        </td>
                                    </tr>
                                `;
                            }
                        },
                        onerror: function(error) {
                            console.error('주문 데이터 요청 오류:', error);
                            log(`주문 데이터 요청 오류: ${error.statusText || '알 수 없는 오류'}`);
                            doc.getElementById('batch-table-body').innerHTML = `
                                <tr>
                                    <td colspan="8" class="status-message">
                                        주문 데이터를 불러오는 중 오류가 발생했습니다.
                                    </td>
                                </tr>
                            `;
                        }
                    });

                } catch (error) {
                    console.error('차수 데이터 처리 오류:', error);
                    log(`차수 데이터 처리 오류: ${error.message}`);
                    doc.getElementById('batch-table-body').innerHTML = `
                        <tr>
                            <td colspan="8" class="status-message">
                                차수 데이터를 불러오는 중 오류가 발생했습니다. (${error.message})
                            </td>
                        </tr>
                    `;
                }
            },
            onerror: function(error) {
                console.error('차수 데이터 요청 오류:', error);
                log(`차수 데이터 요청 오류: ${error.statusText || '알 수 없는 오류'}`);
                doc.getElementById('batch-table-body').innerHTML = `
                    <tr>
                        <td colspan="8" class="status-message">
                            차수 데이터를 불러오는 중 오류가 발생했습니다.
                        </td>
                    </tr>
                `;
            }
        });
    }

    // 데이터 처리 함수
    function processData(doc) {
        // 데이터 정보 업데이트
        updateDataInfo(doc);

        // 필터 옵션 업데이트 - 멀티셀렉트 사용
        updateFilterOptions(doc);

        // 차수 데이터 표시
        displayBatches(doc, dataStore.batches);

    }

    // 필터 옵션 업데이트
    function updateFilterOptions(doc) {
        // 판매처 필터 업데이트
        const sites = [...new Set(dataStore.batches.map(batch => batch.site_name))].filter(Boolean).sort();
        const siteMultiselect = doc.getElementById('site-multiselect');
        if (siteMultiselect && typeof siteMultiselect.updateOptions === 'function') {
            siteMultiselect.updateOptions(sites);
        }

        // 택배사 필터 업데이트
        const exprs = [...new Set(dataStore.batches.map(batch => batch.expr_name))].filter(Boolean).sort();
        const exprMultiselect = doc.getElementById('expr-multiselect');
        if (exprMultiselect && typeof exprMultiselect.updateOptions === 'function') {
            exprMultiselect.updateOptions(exprs);
        }
    }

    // 데이터 정보 업데이트
    function updateDataInfo(doc) {
        const dataInfoElement = doc.getElementById('data-info');
        if (!dataInfoElement) return;

        if (!dataStore.lastFetchTime) {
            dataInfoElement.textContent = '데이터 정보: 없음';
            return;
        }

        const time = new Date(dataStore.lastFetchTime).toLocaleTimeString();
        dataInfoElement.textContent = `데이터 정보: ${dataStore.currentDate} (${time}) - 차수: ${dataStore.batches.length}개, 주문: ${dataStore.orders.length}개`;
    }

    // 배송 상태 계산
    function calculateShippingStatus(orders) {
        // 송장번호별 상태 추적
        const invoiceStatus = {};
        let hasInvoices = false;

        orders.forEach(order => {
            const invoiceNumber = order.ordlist_dno_ori || order.ordlist_dno;
            if (!invoiceNumber) return;

            hasInvoices = true;

            // 송장번호가 이미 처리되었는지 확인
            if (!invoiceStatus[invoiceNumber]) {
                invoiceStatus[invoiceNumber] = order.ordlist_fnsh;
            }
        });

        // 상태별 카운트
        const completed = Object.values(invoiceStatus).filter(status => status === "완료").length;
        const pending = Object.values(invoiceStatus).filter(status => status === "발송대기").length;
        const total = Object.keys(invoiceStatus).length;

        return {
            completed,
            pending,
            total,
            completedPercent: total > 0 ? Math.round((completed / total) * 100) : 0,
            hasInvoices // 송장번호 존재 여부
        };
    }

    // 차수 목록 표시
    function displayBatches(doc, batches) {
        const batchTableBody = doc.getElementById('batch-table-body');
        const batchTableFoot = doc.getElementById('batch-table-foot');

        if (!batches || batches.length === 0) {
            batchTableBody.innerHTML = '<tr><td colspan="8" class="status-message">데이터가 없습니다.</td></tr>';
            batchTableFoot.innerHTML = '';
            return;
        }

        batchTableBody.innerHTML = '';

        let totalCount = 0;
        let totalCompleted = 0;
        let totalPending = 0;

        // 차수별 배송상태 계산
        const batchShippingStatus = {};
        batches.forEach(batch => {
            const batchOrders = dataStore.orders.filter(order => order.ordlist_ivno === batch.ivmstr_ivno);
            batchShippingStatus[batch.ivmstr_ivno] = calculateShippingStatus(batchOrders);
        });

        batches.forEach(batch => {
            const row = doc.createElement('tr');

            // 행 클릭 시 체크박스 토글 기능 추가
            row.style.cursor = 'pointer';

            // 셀 생성
            const ivnoCell = doc.createElement('td');
            ivnoCell.textContent = batch.ivmstr_ivno;

            const siteCell = doc.createElement('td');
            siteCell.textContent = batch.site_name;

            const exprCell = doc.createElement('td');
            exprCell.textContent = batch.expr_name;

            const countCell = doc.createElement('td');
            const count = parseInt(batch.ivcnt) || 0;
            countCell.textContent = count;
            countCell.style.fontWeight = 'bold';
            totalCount += count;

            // 배송상태 셀 - 개선된 배지 표시
            const statusCell = doc.createElement('td');
            const status = batchShippingStatus[batch.ivmstr_ivno] || { completed: 0, pending: 0, total: 0, completedPercent: 0, hasInvoices: false };

            if (!status.hasInvoices) {
                // 송장번호가 없는 경우 "송장 발번 전" 표시
                const noBadge = doc.createElement('span');
                noBadge.className = 'pending-badge';
                noBadge.style.backgroundColor = '#e0e0e0';
                noBadge.style.color = '#616161';
                noBadge.textContent = '송장 발번 전';
                statusCell.appendChild(noBadge);
            } else {
                totalCompleted += status.completed;
                totalPending += status.pending;

                const completedBadge = doc.createElement('span');
                completedBadge.className = 'completed-badge';
                completedBadge.innerHTML = `완료: <span class="count">${status.completed}</span>`;

                const pendingBadge = doc.createElement('span');
                pendingBadge.className = 'pending-badge';
                pendingBadge.innerHTML = `대기: <span class="count">${status.pending}</span>`;

                statusCell.appendChild(completedBadge);
                statusCell.appendChild(pendingBadge);
            }

            const memoCell = doc.createElement('td');
            memoCell.textContent = batch.ivmstr_memo;

            const patternCell = doc.createElement('td');
            const patternButton = doc.createElement('button');
            patternButton.className = 'pattern-analyzer-button';
            patternButton.textContent = '패턴';
            patternButton.dataset.batchNumber = batch.ivmstr_ivno;
            patternButton.addEventListener('click', function(e) {
                e.stopPropagation(); // 버튼 클릭 시 행 클릭 이벤트 전파 방지
                window.processPatterns(this.dataset.batchNumber);
            });
            patternCell.appendChild(patternButton);

            const checkboxCell = doc.createElement('td');
            const checkbox = doc.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.id = `batch-checkbox-${batch.ivmstr_ivno}`;
            checkbox.dataset.batchNumber = batch.ivmstr_ivno;
            checkbox.addEventListener('change', function(e) {
                e.stopPropagation(); // 체크박스 클릭 시 행 클릭 이벤트 전파 방지
                window.updateSelectedBatches(this.dataset.batchNumber, this.checked);
            });

            // 체크박스 클릭 이벤트 전파 방지
            checkbox.addEventListener('click', function(e) {
                e.stopPropagation();
            });

            checkboxCell.appendChild(checkbox);

            // 행에 셀 추가
            row.appendChild(ivnoCell);
            row.appendChild(siteCell);
            row.appendChild(exprCell);
            row.appendChild(countCell);
            row.appendChild(statusCell);
            row.appendChild(memoCell);
            row.appendChild(patternCell);
            row.appendChild(checkboxCell);

            // 행 클릭 시 체크박스 토글
            row.addEventListener('click', function() {
                const cb = this.querySelector(`#batch-checkbox-${batch.ivmstr_ivno}`);
                if (cb) {
                    cb.checked = !cb.checked;
                    // 체크박스 변경 이벤트 수동 발생
                    window.updateSelectedBatches(batch.ivmstr_ivno, cb.checked);
                }
            });

            // 테이블 본문에 행 추가
            batchTableBody.appendChild(row);
        });

        // 종합 패턴 버튼 추가
        const comprehensiveRow = doc.createElement('tr');
        comprehensiveRow.style.backgroundColor = '#e8eaf6';

        const emptyCell1 = doc.createElement('td');
        emptyCell1.colSpan = 6;
        emptyCell1.textContent = '선택된 차수로 종합 패턴 분석';
        emptyCell1.style.fontWeight = 'bold';
        emptyCell1.style.textAlign = 'right';

        const patternCell = doc.createElement('td');
        const comprehensiveButton = doc.createElement('button');
        comprehensiveButton.className = 'pattern-analyzer-button';
        comprehensiveButton.textContent = '종합패턴';
        comprehensiveButton.addEventListener('click', function() {
            window.processPatterns();
        });
        patternCell.appendChild(comprehensiveButton);

        const emptyCell2 = doc.createElement('td');

        comprehensiveRow.appendChild(emptyCell1);
        comprehensiveRow.appendChild(patternCell);
        comprehensiveRow.appendChild(emptyCell2);

        batchTableBody.appendChild(comprehensiveRow);

        // 총계 행 추가
        batchTableFoot.innerHTML = '';
        const totalRow = doc.createElement('tr');
        totalRow.className = 'total-row';

        const totalLabelCell = doc.createElement('td');
        totalLabelCell.colSpan = 3;
        totalLabelCell.textContent = '총계';
        totalLabelCell.style.textAlign = 'right';

        const totalCountCell = doc.createElement('td');
        totalCountCell.textContent = totalCount;
        totalCountCell.style.fontWeight = 'bold';

        const totalStatusCell = doc.createElement('td');
        const totalCompletedBadge = doc.createElement('span');
        totalCompletedBadge.className = 'completed-badge';
        totalCompletedBadge.innerHTML = `완료: <span class="count">${totalCompleted}</span>`;

        const totalPendingBadge = doc.createElement('span');
        totalPendingBadge.className = 'pending-badge';
        totalPendingBadge.innerHTML = `대기: <span class="count">${totalPending}</span>`;

        totalStatusCell.appendChild(totalCompletedBadge);
        totalStatusCell.appendChild(totalPendingBadge);

        const totalEmptyCell = doc.createElement('td');
        totalEmptyCell.colSpan = 3;

        totalRow.appendChild(totalLabelCell);
        totalRow.appendChild(totalCountCell);
        totalRow.appendChild(totalStatusCell);
        totalRow.appendChild(totalEmptyCell);

        batchTableFoot.appendChild(totalRow);
    }

    // 패턴 분석
    function analyzePatternsforanalysis(orders) {
        // 송장번호별 주문 그룹화
        const ordersByInvoice = {};
        const invoiceStatus = {};
        const invoiceSequences = {}; // 송장번호별 출력순차 저장

        orders.forEach(order => {
            const invoiceNumber = order.ordlist_dno_ori || order.ordlist_dno;
            if (!invoiceNumber) return; // 송장번호가 없는 경우 건너뜀

            if (!ordersByInvoice[invoiceNumber]) {
                ordersByInvoice[invoiceNumber] = [];
                invoiceStatus[invoiceNumber] = order.ordlist_fnsh || '';
                // 출력순차(ordlist_ivnum) 저장
                invoiceSequences[invoiceNumber] = parseInt(order.ordlist_ivnum || '0', 10);
            }

            ordersByInvoice[invoiceNumber].push({
                productName: order.basic_name || '',
                managementName: order.basic_nicn || '',
                optionName: order.boptcode_name || '',
                quantity: parseInt(order.ordlist_qty, 10) || 0,
                invoiceNumber: invoiceNumber,
                batchNumber: order.ordlist_ivno || '',
                siteName: order.site_name || '',
                shippingStatus: order.ordlist_fnsh || '',
                orderSequence: parseInt(order.ordlist_ivnum || '0', 10) // 출력순차 추가
            });
        });

        // 패턴 구조 정의
        const patterns = {};
        let patternId = 1;

        // 각 송장 처리
        Object.entries(ordersByInvoice).forEach(([invoiceNumber, orderItems]) => {
            // 일관된 패턴 매칭을 위해 항목 정렬
            orderItems.sort((a, b) => {
                if (a.productName !== b.productName) return a.productName.localeCompare(b.productName);
                if (a.managementName !== b.managementName) return a.managementName.localeCompare(b.managementName);
                if (a.optionName !== b.optionName) return a.optionName.localeCompare(b.optionName);
                return a.quantity - b.quantity;
            });

            // 패턴 키 생성
            const patternKey = orderItems.map(item =>
                `${item.productName}|${item.managementName}|${item.optionName}|${item.quantity}`
            ).join('||');

            // 패턴이 이미 존재하면 업데이트
            if (patterns[patternKey]) {
                patterns[patternKey].count += 1;
                patterns[patternKey].invoices.push(invoiceNumber);
                patterns[patternKey].orderSequences.push(invoiceSequences[invoiceNumber]); // 출력순차 추가

                // 배치 정보 추가
                if (!patterns[patternKey].batchNumbers.includes(orderItems[0].batchNumber)) {
                    patterns[patternKey].batchNumbers.push(orderItems[0].batchNumber);
                }

                // 판매처 정보 추가
                if (orderItems[0].siteName && !patterns[patternKey].siteNames.includes(orderItems[0].siteName)) {
                    patterns[patternKey].siteNames.push(orderItems[0].siteName);
                }

                // 배송상태 정보 추가
                if (invoiceStatus[invoiceNumber] === '완료') {
                    patterns[patternKey].completedCount += 1;
                } else if (invoiceStatus[invoiceNumber] === '발송대기') {
                    patterns[patternKey].pendingCount += 1;
                }
            } else {
                // 새 패턴 생성
                patterns[patternKey] = {
                    id: patternId++,
                    items: orderItems,
                    count: 1,
                    invoices: [invoiceNumber],
                    orderSequences: [invoiceSequences[invoiceNumber]], // 출력순차 추가
                    batchNumbers: [orderItems[0].batchNumber],
                    siteNames: orderItems[0].siteName ? [orderItems[0].siteName] : [],
                    completedCount: invoiceStatus[invoiceNumber] === '완료' ? 1 : 0,
                    pendingCount: invoiceStatus[invoiceNumber] === '발송대기' ? 1 : 0
                };
            }
        });

        // 배열로 변환하고 개수별로 정렬 (내림차순)
        return Object.values(patterns).sort((a, b) => b.count - a.count);
    }

    // 패턴 필터링
    function filterPatternsforanalysis(patterns, includeKeywords, excludeKeywords, minRepetition) {
        if (!patterns || patterns.length === 0) {
            return {
                patterns: [],
                leftoverCount: 0,
                stats: {
                    totalPatternCount: 0,
                    totalInvoiceCount: 0,
                    regularPatternCount: 0,
                    leftoverPatternCount: 0,
                    leftoverInvoiceCount: 0,
                    regularInvoiceCount: 0,
                    batchNumbers: [],
                    siteNames: [],
                    completedCount: 0,
                    pendingCount: 0
                }
            };
        }

        let filteredPatterns = [...patterns];
        let leftoverInvoices = [];
        let leftoverPatterns = [];
        let leftoverOrderSequences = []; // 짜투리 출력순차 목록

        // 키워드 필터 적용
        if (includeKeywords.length > 0 || excludeKeywords.length > 0) {
            // 빈 문자열 제거
            const cleanIncludeKeywords = includeKeywords.filter(Boolean).map(k => k.toLowerCase());
            const cleanExcludeKeywords = excludeKeywords.filter(Boolean).map(k => k.toLowerCase());

            filteredPatterns = filteredPatterns.filter(pattern => {
                const patternText = pattern.items.map(item =>
                    `${item.productName} ${item.managementName} ${item.optionName}`
                ).join(' ').toLowerCase();

                // 포함 키워드 검사 (OR 조건)
                const includesMatch = cleanIncludeKeywords.length === 0 ||
                    cleanIncludeKeywords.some(keyword => patternText.includes(keyword));

                // 제외 키워드 검사 (모든 제외 키워드가 없어야 함)
                const excludesMatch = cleanExcludeKeywords.length === 0 ||
                    cleanExcludeKeywords.every(keyword => !patternText.includes(keyword));

                return includesMatch && excludesMatch;
            });
        }

        // 최소 반복 수보다 적은 패턴 수집 (짜투리)
        if (minRepetition > 1) {
            leftoverPatterns = filteredPatterns.filter(pattern => pattern.count < minRepetition);

            // 낮은 반복 패턴에서 모든 송장번호와 출력순차 수집
            leftoverPatterns.forEach(pattern => {
                leftoverInvoices = [...leftoverInvoices, ...pattern.invoices];
                leftoverOrderSequences = [...leftoverOrderSequences, ...pattern.orderSequences]; // 출력순차 추가
            });

            // 낮은 반복 패턴 필터링
            filteredPatterns = filteredPatterns.filter(pattern => pattern.count >= minRepetition);
        }

        // 모든 패턴의 고유 배치번호와 판매처 수집
        const allBatchNumbers = new Set();
        const allSiteNames = new Set();

        patterns.forEach(pattern => {
            pattern.batchNumbers.forEach(bn => allBatchNumbers.add(bn));
            pattern.siteNames.forEach(sn => allSiteNames.add(sn));
        });

        // 총 송장 개수 계산
        const totalInvoiceCount = patterns.reduce((sum, pattern) => sum + pattern.invoices.length, 0);
        const regularInvoiceCount = filteredPatterns.reduce((sum, pattern) => sum + pattern.invoices.length, 0);

        // 배송 상태 합계 계산
        const totalCompletedCount = patterns.reduce((sum, pattern) => sum + pattern.completedCount, 0);
        const totalPendingCount = patterns.reduce((sum, pattern) => sum + pattern.pendingCount, 0);

        // 짜투리 패턴 배송 상태 합계
        const leftoverCompletedCount = leftoverPatterns.reduce((sum, pattern) => sum + pattern.completedCount, 0);
        const leftoverPendingCount = leftoverPatterns.reduce((sum, pattern) => sum + pattern.pendingCount, 0);

        // 짜투리 패턴이 있는 경우 추가
        if (leftoverInvoices.length > 0) {
            filteredPatterns.push({
                id: 999999, // 짜투리용 특별 ID
                items: [{
                    productName: '짜투리',
                    managementName: '짜투리',
                    optionName: '짜투리',
                    quantity: 0
                }],
                count: leftoverInvoices.length,
                invoices: leftoverInvoices,
                orderSequences: leftoverOrderSequences, // 출력순차 추가
                batchNumbers: [],
                siteNames: [],
                completedCount: leftoverCompletedCount,
                pendingCount: leftoverPendingCount
            });
        }

        // 통계 정보 반환
        return {
            patterns: filteredPatterns,
            leftoverCount: leftoverPatterns.length,
            stats: {
                totalPatternCount: patterns.length,
                totalInvoiceCount: totalInvoiceCount,
                regularPatternCount: filteredPatterns.length - (leftoverInvoices.length > 0 ? 1 : 0),
                leftoverPatternCount: leftoverPatterns.length,
                leftoverInvoiceCount: leftoverInvoices.length,
                regularInvoiceCount: regularInvoiceCount,
                batchNumbers: [...allBatchNumbers].sort(),
                siteNames: [...allSiteNames].sort(),
                completedCount: totalCompletedCount,
                pendingCount: totalPendingCount
            }
        };
    }

    // 패턴 표시
    function displayPatterns(doc, patterns, selectedBatches) {
        const patternTableBody = doc.getElementById('pattern-table-body');
        const patternTableFoot = doc.getElementById('pattern-table-foot');

        if (!patterns || patterns.length === 0) {
            patternTableBody.innerHTML = '<tr><td colspan="9" class="status-message">패턴 데이터가 없습니다.</td></tr>';
            patternTableFoot.innerHTML = '';
            return;
        }

        patternTableBody.innerHTML = '';

        let totalItems = 0;
        let totalInvoices = 0;
        let totalCompleted = 0;
        let totalPending = 0;

        patterns.forEach((pattern, index) => {
            // 각 패턴에 대해 항목별로 행 생성
            const isLeftover = pattern.id === 999999;
            let lastGroupRow = null;

            pattern.items.forEach((item, itemIndex) => {
                const row = doc.createElement('tr');
                row.className = isLeftover ? 'leftover-row' : 'pattern-group';

                // 행 클릭 시 체크박스 토글 기능 추가 (첫 번째 행에만)
                if (itemIndex === 0) {
                    row.style.cursor = 'pointer';
                }

                // 패턴의 첫 번째 행에만 패턴 번호, 개수, 체크박스 표시
                if (itemIndex === 0) {
                    const numCell = doc.createElement('td');
                    numCell.textContent = index + 1;
                    numCell.rowSpan = pattern.items.length;

                    const productCell = doc.createElement('td');
                    productCell.textContent = item.productName;
                    productCell.className = 'product-name';
                    productCell.style.textAlign = 'left';

                    const managementCell = doc.createElement('td');
                    managementCell.textContent = item.managementName;

                    const optionCell = doc.createElement('td');
                    optionCell.textContent = item.optionName;

                    const quantityCell = doc.createElement('td');
                    if (isLeftover) {
                        quantityCell.textContent = pattern.count;
                    } else {
                        // 패턴 아이템의 __quantity__ 값만 사용 (반복 횟수를 곱하지 않음)
                        const itemQuantities = pattern.items.map(item => item.__quantity__ || 0);
                        const totalQuantity = itemQuantities.reduce((sum, qty) => sum + qty, 0);

                        if (totalQuantity > 0) {
                            const badges = pattern.items.map(item => {
                                if (item.__quantity__ && item.__quantity__ > 1) {
                                    return `<span class="quantity-badge">${item.__quantity__}</span>`;
                                }
                                return '';
                            }).filter(Boolean).join(' ');

                            quantityCell.innerHTML = totalQuantity + (badges ? ' ' + badges : '');
                        } else {
                            quantityCell.textContent = '-';
                        }
                    }

                    const countCell = doc.createElement('td');
                    countCell.textContent = pattern.count;
                    countCell.style.fontWeight = 'bold';
                    countCell.rowSpan = pattern.items.length;
                    totalItems += pattern.count;

                    // 배송상태 셀 - 개선된 배지
                    const statusCell = doc.createElement('td');
                    statusCell.rowSpan = pattern.items.length;
                    totalCompleted += pattern.completedCount;
                    totalPending += pattern.pendingCount;

                    if (pattern.completedCount > 0) {
                        const completedBadge = doc.createElement('span');
                        completedBadge.className = 'completed-badge';
                        completedBadge.innerHTML = `완료: <span class="count">${pattern.completedCount}</span>`;
                        statusCell.appendChild(completedBadge);
                    }

                    if (pattern.pendingCount > 0) {
                        const pendingBadge = doc.createElement('span');
                        pendingBadge.className = 'pending-badge';
                        pendingBadge.innerHTML = `대기: <span class="count">${pattern.pendingCount}</span>`;
                        statusCell.appendChild(pendingBadge);
                    }

                    const invoiceCell = doc.createElement('td');
                    const invoiceLink = doc.createElement('a');
                    invoiceLink.className = 'pattern-analyzer-invoice-link';
                    invoiceLink.textContent = `${pattern.invoices.length}개`;
                    invoiceLink.style.fontWeight = 'bold';
                    invoiceLink.dataset.invoices = JSON.stringify(pattern.invoices);
                    invoiceLink.addEventListener('click', function(e) {
                        e.stopPropagation(); // 링크 클릭 시 행 클릭 이벤트 전파 방지
                        const invoices = JSON.parse(this.dataset.invoices);
                        showInvoiceModalList(doc, invoices);
                    });
                    invoiceCell.appendChild(invoiceLink);
                    invoiceCell.rowSpan = pattern.items.length;
                    totalInvoices += pattern.invoices.length;

                    const checkboxCell = doc.createElement('td');
                    const checkbox = doc.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.id = `pattern-checkbox-${pattern.id}`;
                    checkbox.dataset.patternId = pattern.id;
                    // 체크박스 클릭 이벤트 전파 방지
                    checkbox.addEventListener('click', function(e) {
                        e.stopPropagation();
                    });
                    checkboxCell.appendChild(checkbox);
                    checkboxCell.rowSpan = pattern.items.length;

                    row.appendChild(numCell);
                    row.appendChild(productCell);
                    row.appendChild(managementCell);
                    row.appendChild(optionCell);
                    row.appendChild(quantityCell);
                    row.appendChild(countCell);
                    row.appendChild(statusCell);
                    row.appendChild(invoiceCell);
                    row.appendChild(checkboxCell);

                    lastGroupRow = row;

                    // 첫 번째 행에만 클릭 이벤트 추가
                    row.addEventListener('click', function() {
                        const cb = this.querySelector(`#pattern-checkbox-${pattern.id}`);
                        if (cb) {
                            cb.checked = !cb.checked;
                        }
                    });
                } else {
                    const productCell = doc.createElement('td');
                    productCell.textContent = item.productName;
                    productCell.style.textAlign = 'left'; // 두 번째 이후 행의 제품명도 좌측 정렬

                    const managementCell = doc.createElement('td');
                    managementCell.textContent = item.managementName;

                    const optionCell = doc.createElement('td');
                    optionCell.textContent = item.optionName;

                    const quantityCell = doc.createElement('td');
                    quantityCell.textContent = item.quantity;

                    row.appendChild(productCell);
                    row.appendChild(managementCell);
                    row.appendChild(optionCell);
                    row.appendChild(quantityCell);
                }

                patternTableBody.appendChild(row);
            });

            // 패턴 그룹 간 구분선 추가 (마지막 행 제외)
            if (index < patterns.length - 1 && lastGroupRow) {
                lastGroupRow.style.borderBottom = '2px solid #e0e0e0';
            }
        });

        // 총계 행 추가
        patternTableFoot.innerHTML = '';
        const totalRow = doc.createElement('tr');
        totalRow.className = 'total-row';

        const totalLabelCell = doc.createElement('td');
        totalLabelCell.colSpan = 5;
        totalLabelCell.textContent = '총계';
        totalLabelCell.style.textAlign = 'right';

        const totalItemsCell = doc.createElement('td');
        totalItemsCell.textContent = totalItems;
        totalItemsCell.style.fontWeight = 'bold';

        const totalStatusCell = doc.createElement('td');
        const totalCompletedBadge = doc.createElement('span');
        totalCompletedBadge.className = 'completed-badge';
        totalCompletedBadge.innerHTML = `완료: <span class="count">${totalCompleted}</span>`;

        const totalPendingBadge = doc.createElement('span');
        totalPendingBadge.className = 'pending-badge';
        totalPendingBadge.innerHTML = `대기: <span class="count">${totalPending}</span>`;

        totalStatusCell.appendChild(totalCompletedBadge);
        totalStatusCell.appendChild(totalPendingBadge);

        const totalInvoicesCell = doc.createElement('td');
        totalInvoicesCell.textContent = totalInvoices;
        totalInvoicesCell.style.fontWeight = 'bold';

        const totalEmptyCell = doc.createElement('td');

        totalRow.appendChild(totalLabelCell);
        totalRow.appendChild(totalItemsCell);
        totalRow.appendChild(totalStatusCell);
        totalRow.appendChild(totalInvoicesCell);
        totalRow.appendChild(totalEmptyCell);

        patternTableFoot.appendChild(totalRow);
    }

    // 패턴 요약 정보 업데이트
    function updatePatternSummary(doc, patterns, stats) {
        const patternSummary = doc.getElementById('pattern-summary');

        if (!patterns || patterns.length === 0) {
            patternSummary.style.display = 'none';
            return;
        }

        // 고유 송장 수 계산
        const uniqueInvoices = new Set();
        patterns.forEach(pattern => {
            pattern.invoices.forEach(invoice => {
                uniqueInvoices.add(invoice);
            });
        });

        // 짜투리를 제외한 패턴 수 계산
        const regularPatternCount = patterns.filter(pattern => pattern.id !== 999999).length;

        // 요약 정보 업데이트
        patternSummary.innerHTML = `
        <div class="pattern-analyzer-summary-item">
                <span class="label">패턴 수</span>
                <span class="value">${regularPatternCount}개</span>
            </div>
            <div class="pattern-analyzer-summary-item">
                <span class="label">패턴 건수</span>
                <span class="value">${stats.regularInvoiceCount}개</span>
            </div>
            <div class="pattern-analyzer-summary-item">
                <span class="label">짜투리 건수</span>
                <span class="value">${stats.leftoverInvoiceCount}개</span>
            </div>
            <div class="pattern-analyzer-summary-item">
                <span class="label">판매처</span>
                <div class="pattern-analyzer-summary-tags">
                    ${stats.siteNames.map(site => `<span class="pattern-analyzer-tag">${site}</span>`).join('')}
                </div>
            </div>
            <div class="pattern-analyzer-summary-item">
                <span class="label">차수</span>
                <div class="pattern-analyzer-summary-tags">
                    ${stats.batchNumbers.map(batch => `<span class="pattern-analyzer-tag">${batch}</span>`).join('')}
                </div>
            </div>
        `;
        patternSummary.style.display = 'grid';
    }

    // 팝업 메시지 표시
    function displayPopupMessage(doc, message, type = 'error') {
        const className = type === 'error' ? 'status-message' : 'success-message';

        // 이전 메시지 제거
        const existingMessages = doc.querySelectorAll('.status-message, .success-message');
        existingMessages.forEach(msg => {
            if (msg.parentNode && msg.parentNode.tagName !== 'TD') {
                msg.remove();
            }
        });

        // 메시지 요소 생성
        const messageElement = doc.createElement('div');
        messageElement.className = className;
        messageElement.textContent = message;

        // 메시지 삽입
        const targetElement = doc.querySelector('.pattern-analyzer-tabs');
        targetElement.parentNode.insertBefore(messageElement, targetElement);

        // 3초 후 메시지 제거
        setTimeout(() => {
            messageElement.remove();
        }, 3000);
    }

    // 송장번호 모달 목록 표시 (간소화된 버전)
    function showInvoiceModalList(doc, invoices, title = '송장번호 목록') {
        const invoiceModal = doc.getElementById('invoice-modal');

        // 모달 제목 설정
        doc.querySelector('.invoice-modal-title').textContent = title;

        // 송장번호 정보 숨기기
        doc.querySelector('.invoice-info').style.display = 'none';

        // 리스트 숨기기
        doc.getElementById('invoice-list').style.display = 'none';

        // 텍스트 영역에 송장번호 표시
        const invoiceTextarea = doc.getElementById('invoice-textarea');
        invoiceTextarea.value = invoices.join('\n');

        // 모달 표시
        invoiceModal.style.display = 'flex';

        // 성공 메시지 숨기기
        doc.getElementById('invoice-copy-success').style.display = 'none';
    }

    // 송장번호 복사 함수
    function copyInvoices(doc, separator) {
        const textarea = doc.getElementById('invoice-textarea');

        // 현재 텍스트 가져오기
        const invoiceText = textarea.value;

        // 구분자로 텍스트 변환
        const invoices = invoiceText.split('\n').map(line => {
            // 앞의 번호 제거
            const parts = line.split('. ');
            return parts.length > 1 ? parts[1] : line;
        }).filter(Boolean); // 빈 줄 제거

        // 새 구분자로 결합
        textarea.value = invoices.join(separator);

        // 선택 및 복사
        textarea.select();
        doc.execCommand('copy');

        // 성공 메시지 표시
        const successMessage = doc.getElementById('invoice-copy-success');
        successMessage.style.display = 'block';

        // 3초 후 메시지 숨기기
        setTimeout(() => {
            successMessage.style.display = 'none';
        }, 3000);
    }

    // 송장번호 CSV 다운로드
    function downloadInvoicesCSV(doc) {
        const textarea = doc.getElementById('invoice-textarea');

        // 현재 텍스트 가져오기
        const invoiceText = textarea.value;

        // 구분자로 텍스트 변환
        const invoices = invoiceText.split('\n').map(line => {
            // 앞의 번호 제거
            const parts = line.split('. ');
            return parts.length > 1 ? parts[1] : line;
        }).filter(Boolean); // 빈 줄 제거

        // CSV 형식으로 변환
        let csvContent = "송장번호\n";
        invoices.forEach(invoice => {
            csvContent += invoice + "\n";
        });

        // Blob 생성 및 다운로드 링크 생성
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);

        const downloadLink = doc.createElement('a');
        downloadLink.href = url;
        downloadLink.download = `송장번호_${new Date().toISOString().slice(0, 10)}.csv`;
        downloadLink.style.display = 'none';

        // 링크 추가 및 클릭
        doc.body.appendChild(downloadLink);
        downloadLink.click();

        // 정리
        setTimeout(() => {
            doc.body.removeChild(downloadLink);
            window.URL.revokeObjectURL(url);
        }, 100);
    }

    // 종합 출고 모달 표시
    function showShippingModal(doc, invoices) {
        // 모달 표시
        const modal = doc.getElementById('shipping-modal');
        modal.style.display = 'flex';

        // 기본 출고 모드로 설정
        modal.classList.remove('shipping-mode-cancel');
        modal.classList.add('shipping-mode-output');
        doc.querySelector('.modal-title-icon').textContent = '📦';
        doc.getElementById('shipping-modal-title').textContent = '종합 출고 처리';
        doc.querySelector('.mode-toggle-label-icon').textContent = '🚚';
        doc.getElementById('current-mode-text').textContent = '출고 모드';

        // 송장번호 목록 설정
        const startButton = doc.getElementById('start-shipping-button');
        startButton.dataset.invoices = JSON.stringify(invoices);
        startButton.disabled = false;
        startButton.style.display = 'inline-block';

        // 중지 버튼 초기화
        const stopButton = doc.getElementById('stop-shipping-button');
        stopButton.style.display = 'none';
        stopButton.disabled = false;
        stopButton.textContent = '작업중지';

        // 출고취소모드 초기화
        const cancelModeCheckbox = doc.getElementById('cancel-mode');
        cancelModeCheckbox.checked = false;
        cancelModeCheckbox.disabled = false;

        // 작업완료/작업실패 텍스트 변경
        updateShippingLabels(doc, false);

        // 출고날짜 초기화
        doc.getElementById('shipping-date').disabled = false;

        // 병렬 처리 개수 초기화
        doc.getElementById('parallel-count').disabled = false;

        // 로그 초기화
        doc.getElementById('shipping-log').innerHTML = '';

        // 송장 로그 초기화
        dataStore.shippingLogs.completed = [];
        dataStore.shippingLogs.failed = [];

        // 통계 초기화
        doc.getElementById('total-invoices').textContent = invoices.length;
        doc.getElementById('completed-invoices').textContent = '0';
        doc.getElementById('failed-invoices').textContent = '0';
        doc.getElementById('progress-percentage').textContent = '0%';
        doc.getElementById('shipping-progress-bar').style.width = '0%';
    }

    // 출고/취소 모드에 따라 라벨 변경
    function updateShippingLabels(doc, isCancelMode) {
        const completedLabel = doc.querySelector('.shipping-stat-item:nth-child(2) .label');
        const failedLabel = doc.querySelector('.shipping-stat-item:nth-child(3) .label');

        if (isCancelMode) {
            completedLabel.textContent = '취소완료';
            failedLabel.textContent = '취소실패';
        } else {
            completedLabel.textContent = '출고완료';
            failedLabel.textContent = '출고실패';
        }
    }

    // 출고 로그 추가
    function addShippingLog(doc, message, type = 'info') {
        const logContainer = doc.getElementById('shipping-log');
        const logItem = doc.createElement('div');
        logItem.className = `shipping-log-item shipping-log-${type}`;

        const timestamp = new Date().toLocaleTimeString();
        logItem.textContent = `[${timestamp}] ${message}`;

        logContainer.appendChild(logItem);
        logContainer.scrollTop = logContainer.scrollHeight; // 로그 스크롤 자동 이동
    }
    // 페이지 로드 후 네비게이션 메뉴에 버튼 추가
    window.addEventListener('load', function() {
        setTimeout(function() {
            addNavMenuButton();
        }, 1000); // 1초 후에 실행 (페이지가 완전히 로드되도록)
    });

    // 주문 가공 팝업창 열기
    function openOrderProcessWindow() {
        // 이미 열려있는 창이 있으면 포커스
        if (orderProcessWindow && !orderProcessWindow.closed) {
            orderProcessWindow.focus();
            return;
        }

        // 팝업창 열기
        orderProcessWindow = window.open('', 'orderProcessWindow', 'width=1200,height=800,resizable=yes,scrollbars=yes');

        // 팝업창 콘텐츠 생성
        const doc = orderProcessWindow.document;
        doc.open();
        doc.write(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>주문 가공</title>
            <meta charset="UTF-8">
            <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
            <style>
                :root {
                    --primary: #FF9800;
                    --primary-dark: #F57C00;
                    --primary-light: #FFE0B2;
                    --primary-bg: #FFF8E1;
                    --secondary: #607D8B;
                    --secondary-dark: #455A64;
                    --secondary-light: #CFD8DC;
                    --success: #4CAF50;
                    --success-light: #E8F5E9;
                    --error: #F44336;
                    --error-light: #FFEBEE;
                    --gray-100: #F5F5F5;
                    --gray-200: #EEEEEE;
                    --gray-300: #E0E0E0;
                    --gray-400: #BDBDBD;
                    --gray-500: #9E9E9E;
                    --gray-600: #757575;
                    --gray-700: #616161;
                    --gray-800: #424242;
                    --text-primary: #212121;
                    --text-secondary: #757575;
                    --border-radius: 8px;
                    --shadow-sm: 0 1px 2px rgba(0,0,0,0.05);
                    --shadow-md: 0 2px 4px rgba(0,0,0,0.1);
                    --shadow-lg: 0 4px 8px rgba(0,0,0,0.15);
                    --transition: all 0.2s ease;
                }

                * {
                    box-sizing: border-box;
                    margin: 0;
                    padding: 0;
                }

                body {
                    font-family: 'Malgun Gothic', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
                    color: var(--text-primary);
                    background-color: #f9fafc;
                    line-height: 1.5;
                    font-size: 14px;
                }

                .container {
                    width: 100%;
                    max-width: 100%;
                    padding: 0 15px;
                    margin: 0 auto;
                }

                .app-header {
                    background: #fff;
                    border-bottom: 1px solid var(--gray-200);
                    box-shadow: var(--shadow-sm);
                    position: sticky;
                    top: 0;
                    z-index: 100;
                }

                .header-content {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    height: 60px;
                    padding: 0 20px;
                }

                .app-title {
                    font-size: 18px;
                    font-weight: 600;
                    color: var(--primary);
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }

                .app-title::before {
                    content: "🔄";
                    font-size: 20px;
                }

                .main-content {
                    padding: 20px 0;
                }

                /* 탭 스타일 */
                .tab-container {
                    margin-bottom: 20px;
                }

                .tab-nav {
                    display: flex;
                    background: #fff;
                    border-radius: var(--border-radius);
                    box-shadow: var(--shadow-sm);
                    overflow: hidden;
                    position: relative;
                }

                .tab-nav-item {
                    flex: 1;
                    padding: 14px 20px;
                    text-align: center;
                    font-weight: 500;
                    color: var(--text-secondary);
                    background: #fff;
                    border: none;
                    cursor: pointer;
                    transition: var(--transition);
                    position: relative;
                    overflow: hidden;
                }

                .tab-nav-item.active {
                    color: var(--primary);
                    font-weight: 600;
                }

                .tab-nav-item.active::after {
                    content: '';
                    position: absolute;
                    bottom: 0;
                    left: 0;
                    width: 100%;
                    height: 3px;
                    background-color: var(--primary);
                }

                .tab-nav-item:hover:not(.active) {
                    background: var(--gray-100);
                }

                .tab-content {
                    display: none;
                    animation: fadeIn 0.3s ease;
                }

                .tab-content.active {
                    display: block;
                }

                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(5px); }
                    to { opacity: 1; transform: translateY(0); }
                }

                /* 카드 스타일 */
                .card {
                    background: #fff;
                    border-radius: var(--border-radius);
                    box-shadow: var(--shadow-md);
                    margin-bottom: 20px;
                    overflow: hidden;
                }

                .card-header {
                    padding: 16px 20px;
                    border-bottom: 1px solid var(--gray-200);
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                }

                .card-title {
                    font-size: 16px;
                    font-weight: 600;
                    color: var(--primary);
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }

                .card-title-icon {
                    color: var(--primary);
                    font-size: 18px;
                }

                .card-body {
                    padding: 20px;
                }

                .card-footer {
                    padding: 16px 20px;
                    border-top: 1px solid var(--gray-200);
                    display: flex;
                    justify-content: flex-end;
                    gap: 10px;
                }

                /* 폼 요소 스타일 */
                .form-group {
                    margin-bottom: 16px;
                }

                .form-label {
                    display: block;
                    margin-bottom: 6px;
                    font-weight: 500;
                    color: var(--text-secondary);
                }

                .form-control {
                    display: block;
                    width: 100%;
                    padding: 10px 12px;
                    font-size: 14px;
                    line-height: 1.4;
                    color: var(--text-primary);
                    background-color: #fff;
                    border: 1px solid var(--gray-300);
                    border-radius: var(--border-radius);
                    transition: var(--transition);
                }

                .form-control:focus {
                    border-color: var(--primary);
                    outline: none;
                    box-shadow: 0 0 0 3px rgba(255, 152, 0, 0.1);
                }

                .form-row {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 16px;
                    margin-bottom: 16px;
                }

                .form-col {
                    flex: 1;
                    min-width: 200px;
                }

                /* 버튼 스타일 */
                .btn {
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    padding: 10px 16px;
                    font-size: 14px;
                    font-weight: 500;
                    line-height: 1;
                    text-align: center;
                    white-space: nowrap;
                    vertical-align: middle;
                    cursor: pointer;
                    border: 1px solid transparent;
                    border-radius: var(--border-radius);
                    transition: var(--transition);
                    box-shadow: var(--shadow-sm);
                    gap: 8px;
                }

                .btn-primary {
                    color: #fff;
                    background-color: var(--primary);
                    border-color: var(--primary);
                }

                .btn-primary:hover {
                    background-color: var(--primary-dark);
                    border-color: var(--primary-dark);
                    transform: translateY(-1px);
                    box-shadow: var(--shadow-md);
                }

                .btn-primary:active {
                    transform: translateY(0);
                    box-shadow: var(--shadow-sm);
                }

                .btn-outline {
                    color: var(--primary);
                    background-color: transparent;
                    border-color: var(--primary);
                }

                .btn-outline:hover {
                    color: #fff;
                    background-color: var(--primary);
                    transform: translateY(-1px);
                }

                .btn-success {
                    color: #fff;
                    background-color: var(--success);
                    border-color: var(--success);
                }

                .btn-success:hover {
                    background-color: #388E3C;
                    border-color: #388E3C;
                }

                .btn-sm {
                    padding: 6px 10px;
                    font-size: 12px;
                }

                .btn-icon-only {
                    width: 36px;
                    height: 36px;
                    padding: 0;
                    border-radius: 6px;
                }

                /* 파일 업로드 영역 */
                .upload-area {
                    border: 2px dashed var(--primary-light);
                    padding: 30px;
                    text-align: center;
                    border-radius: var(--border-radius);
                    background-color: var(--primary-bg);
                    cursor: pointer;
                    transition: var(--transition);
                    margin-bottom: 20px;
                }

                .upload-area:hover {
                    border-color: var(--primary);
                    background-color: rgba(255, 248, 225, 0.7);
                }

                .upload-area.dragging {
                    border-color: var(--primary);
                    background-color: rgba(255, 248, 225, 0.7);
                }

                .upload-icon {
                    font-size: 36px;
                    color: var(--primary);
                    margin-bottom: 12px;
                    display: block;
                }

                .upload-title {
                    font-size: 16px;
                    font-weight: 500;
                    color: var(--text-primary);
                    margin-bottom: 6px;
                }

                .upload-subtitle {
                    font-size: 13px;
                    color: var(--text-secondary);
                }

                /* 메시지 스타일 */
                .alert {
                    position: relative;
                    padding: 12px 16px;
                    margin-bottom: 16px;
                    border: 1px solid transparent;
                    border-radius: var(--border-radius);
                    font-size: 14px;
                    animation: slideDown 0.3s ease;
                }

                @keyframes slideDown {
                    from { opacity: 0; transform: translateY(-10px); }
                    to { opacity: 1; transform: translateY(0); }
                }

                .alert-success {
                    color: #155724;
                    background-color: var(--success-light);
                    border-color: #C3E6CB;
                }

                .alert-error {
                    color: #721c24;
                    background-color: var(--error-light);
                    border-color: #F5C6CB;
                }

                /* 테이블 스타일 */
                .table-responsive {
                    width: 100%;
                    overflow-x: auto;
                    margin-bottom: 20px;
                    border-radius: var(--border-radius);
                    box-shadow: var(--shadow-sm);
                }

                .table {
                    width: 100%;
                    margin-bottom: 1rem;
                    border-collapse: collapse;
                }

                .table th,
                .table td {
                    padding: 0.75rem;
                    vertical-align: middle;
                    border: 1px solid var(--border-color);
                    white-space: nowrap;
                }

                .table th {
                    background-color: var(--gray-100);
                    font-weight: 600;
                    color: var(--text-secondary);
                    white-space: nowrap;
                    position: sticky;
                    top: 0;
                    z-index: 1;
                }

                .table tr:last-child td {
                    border-bottom: none;
                }

                .table-hover tr:hover td {
                    background-color: var(--gray-100);
                }

                .table-striped tr:nth-child(even) {
                    background-color: var(--gray-100);
                }

                /* 컬럼 설정 스타일 */
                .column-settings {
                    display: grid;
                    gap: 20px;
                    margin-bottom: 20px;
                }

                .column-setting-card {
                    background: #fff;
                    border-radius: var(--border-radius);
                    border: 1px solid var(--gray-200);
                    overflow: hidden;
                    transition: var(--transition);
                }

                .column-setting-card:hover {
                    border-color: var(--primary-light);
                    box-shadow: var(--shadow-md);
                }

                .column-setting-header {
                    padding: 14px 16px;
                    background-color: var(--gray-100);
                    border-bottom: 1px solid var(--gray-200);
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }

                .column-setting-icon {
                    width: 24px;
                    height: 24px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    background-color: var(--primary-light);
                    color: var(--primary);
                    border-radius: 50%;
                    font-size: 14px;
                }

                .column-setting-title {
                    flex: 1;
                }

                .column-setting-title h3 {
                    font-size: 14px;
                    font-weight: 600;
                    margin: 0;
                    color: var(--text-primary);
                }

                .column-setting-title p {
                    font-size: 12px;
                    color: var(--text-secondary);
                    margin: 2px 0 0 0;
                }

                .column-setting-body {
                    padding: 16px;
                }

                .column-selects {
                    display: flex;
                    flex-direction: column;
                    gap: 8px;
                }

                .column-select-wrapper {
                    display: flex;
                    gap: 8px;
                }

                .column-select-wrapper select {
                    flex: 1;
                }

                .column-add-button {
                    align-self: flex-start;
                    margin-top: 8px;
                }

                /* 결과 요약 */
                .result-summary {
                    display: grid;
                    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
                    gap: 16px;
                    margin-bottom: 20px;
                }

                .summary-item {
                    background: #fff;
                    border-radius: var(--border-radius);
                    padding: 16px;
                    box-shadow: var(--shadow-sm);
                }

                .summary-label {
                    font-size: 12px;
                    color: var(--text-secondary);
                    margin-bottom: 4px;
                }

                .summary-value {
                    font-size: 20px;
                    font-weight: 600;
                    color: var(--primary);
                }

                /* 패턴 필터 */
                .pattern-filter {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 16px;
                    margin-bottom: 20px;
                    padding: 16px;
                    background-color: #fff;
                    border-radius: var(--border-radius);
                    box-shadow: var(--shadow-sm);
                }

                .filter-item {
                    flex: 1;
                    min-width: 150px;
                }

                .filter-label {
                    display: block;
                    margin-bottom: 6px;
                    font-weight: 500;
                    font-size: 12px;
                    color: var(--text-secondary);
                }

                /* 설정 버튼 */
                .config-buttons {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 10px;
                    margin-top: 16px;
                }

                .config-button {
                    display: flex;
                    align-items: center;
                    padding: 10px 14px;
                    background-color: #fff;
                    border: 1px solid var(--gray-200);
                    border-radius: var(--border-radius);
                    font-size: 13px;
                    font-weight: 500;
                    color: var(--text-primary);
                    cursor: pointer;
                    transition: var(--transition);
                    gap: 8px;
                    box-shadow: var(--shadow-sm);
                }

                .config-button:hover {
                    border-color: var(--primary);
                    color: var(--primary);
                    background-color: rgba(255, 248, 225, 0.3);
                    transform: translateY(-1px);
                    box-shadow: var(--shadow-md);
                }

                .config-button-icon {
                    color: var(--primary);
                    font-size: 16px;
                }

                /* 설정 항목 */
                .config-item {
                    border: 1px solid var(--gray-200);
                    border-radius: var(--border-radius);
                    overflow: hidden;
                    margin-bottom: 16px;
                    transition: var(--transition);
                }

                .config-item:hover {
                    border-color: var(--primary-light);
                    box-shadow: var(--shadow-md);
                }

                .config-item-header {
                    padding: 14px 16px;
                    display: flex;
                    align-items: center;
                    background-color: var(--gray-100);
                    border-bottom: 1px solid var(--gray-200);
                }

                .config-item-name {
                    flex: 1;
                    margin-right: 10px;
                    font-weight: 500;
                }

                .config-item-body {
                    padding: 16px;
                    font-size: 13px;
                    color: var(--text-secondary);
                }

                .config-detail {
                    display: flex;
                    margin-bottom: 4px;
                }

                .config-detail strong {
                    width: 90px;
                    font-weight: 500;
                    color: var(--text-primary);
                }

                .config-item-actions {
                    display: flex;
                    gap: 8px;
                }

                /* 파일 정보 */
                .file-info {
                    background-color: #fff;
                    border-radius: var(--border-radius);
                    padding: 16px;
                    margin-bottom: 20px;
                    display: none;
                    box-shadow: var(--shadow-sm);
                    border: 1px solid var(--gray-200);
                }

                .file-name {
                    font-weight: 500;
                    color: var(--text-primary);
                    margin-bottom: 4px;
                }

                .file-meta {
                    font-size: 12px;
                    color: var(--text-secondary);
                    margin-bottom: 10px;
                }

                .progress {
                    height: 6px;
                    background-color: var(--gray-200);
                    border-radius: 3px;
                    overflow: hidden;
                }

                .progress-bar {
                    height: 100%;
                    background-color: var(--primary);
                    border-radius: 3px;
                    transition: width 0.3s ease;
                }

                /* 유틸리티 클래스 */
                .hidden {
                    display: none !important;
                }

                .text-center {
                    text-align: center;
                }

                .mt-0 { margin-top: 0 !important; }
                .mt-2 { margin-top: 8px !important; }
                .mt-3 { margin-top: 12px !important; }
                .mt-4 { margin-top: 16px !important; }

                .mb-0 { margin-bottom: 0 !important; }
                .mb-2 { margin-bottom: 8px !important; }
                .mb-3 { margin-bottom: 12px !important; }
                .mb-4 { margin-bottom: 16px !important; }

                .p-0 { padding: 0 !important; }

                /* 대시보드 스타일 개선 */
                .dashboard-grid {
                    display: grid;
                    grid-template-columns: 1fr 1fr;
                    gap: 20px;
                }

                @media (max-width: 768px) {
                    .dashboard-grid {
                        grid-template-columns: 1fr;
                    }
                }

                .dashboard-card {
                    height: 100%;
                    display: flex;
                    flex-direction: column;
                }

                .dashboard-card .card-body {
                    flex: 1;
                }

                /* 메시지 컨테이너 */
                #message-container {
                    position: fixed;
                    top: 16px;
                    right: 16px;
                    z-index: 9999;
                    max-width: 350px;
                    width: 100%;
                }

                @media (max-width: 768px) {
                    .container {
                        padding: 0 10px;
                    }
                }

                .pattern-table-container {
                    width: 100%;
                    overflow-x: auto;
                    margin-top: 20px;
                    background: white;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                }

                .pattern-table {
                    width: 100%;
                    border-collapse: separate;
                    border-spacing: 0;
                    margin-bottom: 0;
                    font-size: 14px;
                }

                .pattern-table th {
                    background-color: #f8f9fa;
                    color: #495057;
                    font-weight: 600;
                    padding: 15px;
                    text-align: center;
                    border-bottom: 2px solid #dee2e6;
                    white-space: nowrap;
                }

                .pattern-table td {
                    padding: 12px 15px;
                    vertical-align: middle;
                    text-align: center;
                    border-bottom: 1px solid #e9ecef;
                }

                .pattern-table tbody tr {
                    transition: all 0.2s;
                }

                /* 패턴별 배경색 */
                .pattern-table tbody tr[data-pattern-index="even"] {
                    background-color: #ffffff;
                }

                .pattern-table tbody tr[data-pattern-index="odd"] {
                    background-color: #f8f9fa;
                }

                .pattern-table tbody tr:hover {
                    background-color: #f1f3f5;
                }

                .pattern-table tbody tr.leftover-pattern {
                    background-color: #fff5f5;
                }

                .pattern-table tbody tr.leftover-pattern:hover {
                    background-color: #ffe3e3;
                }

                /* 반복수 셀 스타일 - 배경색 제거 */
                .pattern-table td[rowspan] {
                    font-weight: 600;
                }

                @media (max-width: 768px) {
                    .pattern-table th,
                    .pattern-table td {
                        padding: 10px;
                        font-size: 13px;
                    }
                }

                .pattern-table tbody tr[data-pattern-index="odd"] {
                    background-color: #f8f9fa;
                }

                .pattern-table tbody tr:hover {
                    background-color: #f1f3f5;
                }

                .pattern-table tbody tr.leftover-pattern {
                    background-color: #fff5f5;
                }

                .pattern-table tbody tr.leftover-pattern:hover {
                    background-color: #ffe3e3;
                }

                /* 반복수 셀 스타일 - 배경색 제거 */
                .pattern-table td[rowspan] {
                    font-weight: 600;
                }

                @media (max-width: 768px) {
                    .pattern-table th,
                    .pattern-table td {
                        padding: 10px;
                        font-size: 13px;
                    }
                }
            </style>
        </head>
        <body>
            <header class="app-header">
                <div class="container">
                    <div class="header-content">
                        <h1 class="app-title">주문 데이터 가공</h1>
                    </div>
                </div>
            </header>

            <!-- 메시지 컨테이너 추가 -->
            <div id="message-container"></div>

            <main class="main-content">
                <div class="container">
                    <div class="tab-container">
                        <div class="tab-nav">
                            <button id="upload-tab" class="tab-nav-item active">
                                엑셀 업로드
                            </button>
                            <button id="config-tab" class="tab-nav-item">
                                설정 관리
                            </button>
                            <button id="pattern-tab" class="tab-nav-item">
                                패턴 결과
                            </button>
                        </div>
                    </div>

                    <!-- 엑셀 업로드 탭 -->
                    <div id="upload-content" class="tab-content active">
                        <div class="dashboard-grid">
                            <div class="card dashboard-card">
                                <div class="card-header">
                                    <h2 class="card-title">
                                        <span class="card-title-icon">📊</span>
                                        엑셀 파일 업로드
                                    </h2>
                                </div>
                                <div class="card-body">
                                    <input type="file" id="excel-file" class="hidden" accept=".xls,.xlsx">

                                    <div id="upload-area" class="upload-area">
                                        <span class="upload-icon">📄</span>
                                        <h3 class="upload-title">파일을 드래그하거나 클릭하여 업로드</h3>
                                        <p class="upload-subtitle">지원 형식: Excel (.xls, .xlsx)</p>
                                    </div>

                                    <div id="file-info" class="file-info">
                                        <div class="file-name"></div>
                                        <div class="file-meta"></div>
                                        <div class="progress">
                                            <div id="upload-progress-bar" class="progress-bar" style="width: 0%"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="card dashboard-card">
                                <div class="card-header">
                                    <h2 class="card-title">
                                        <span class="card-title-icon">⚙️</span>
                                        빠른 설정
                                    </h2>
                                </div>
                                <div class="card-body">
                                    <p class="mb-3" style="color: var(--text-secondary);">저장된 설정을 선택하여 빠르게 분석을 시작하세요.</p>

                                    <div id="config-buttons-container" class="config-buttons">
                                        <!-- 설정 버튼들이 여기에 추가됩니다 -->
                                        <div style="color: var(--gray-500); font-size: 13px; padding: 16px 0;">
                                            저장된 설정이 없습니다. 패턴 분석 후 설정을 저장하면 여기에 표시됩니다.
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 열 매핑 섹션 -->
                        <div id="column-mapping-container" class="hidden">
                            <div class="card mt-4">
                                <div class="card-header">
                                    <h2 class="card-title">
                                        <span class="card-title-icon">🔧</span>
                                        데이터 분석 설정
                                    </h2>
                                </div>
                                <div class="card-body">
                                    <div class="form-row">
                                        <div class="form-col">
                                            <div class="form-group">
                                                <label for="config-select" class="form-label">저장된 설정</label>
                                                <div style="display: flex; gap: 8px;">
                                                    <select id="config-select" class="form-control">
                                                        <option value="">새 설정</option>
                                                    </select>
                                                    <button id="load-config-button" class="btn btn-outline" style="width: 110px;">불러오기</button>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-col">
                                            <div class="form-group">
                                                <label for="config-name" class="form-label">설정 이름</label>
                                                <div style="display: flex; gap: 8px;">
                                                    <input type="text" id="config-name" class="form-control" placeholder="설정 이름을 입력하세요">
                                                    <button id="save-config-button" class="btn btn-primary" style="width: 110px;">설정 저장</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="column-settings">
                                        <!-- 기준 열 설정 -->
                                        <div class="column-setting-card">
                                            <div class="column-setting-header">
                                                <div class="column-setting-icon">🔑</div>
                                                <div class="column-setting-title">
                                                    <h3>기준 열</h3>
                                                    <p>패턴을 구분하는 기준이 되는 열을 선택하세요</p>
                                                </div>
                                            </div>
                                            <div class="column-setting-body">
                                                <select id="key-column" class="form-control">
                                                    <option value="">선택하세요</option>
                                                </select>
                                            </div>
                                        </div>

                                        <!-- 분석 열 설정 -->
                                        <div class="column-setting-card">
                                            <div class="column-setting-header">
                                                <div class="column-setting-icon">📊</div>
                                                <div class="column-setting-title">
                                                    <h3>분석 열</h3>
                                                    <p>패턴을 찾을 데이터가 있는 열들을 선택하세요</p>
                                                </div>
                                                <button id="add-data-column" class="btn btn-sm btn-outline btn-icon-only">+</button>
                                            </div>
                                            <div class="column-setting-body">
                                                <div id="data-columns-container" class="column-selects"></div>
                                            </div>
                                        </div>

                                        <!-- 수량 열 설정 -->
                                        <div class="column-setting-card">
                                            <div class="column-setting-header">
                                                <div class="column-setting-icon">🔢</div>
                                                <div class="column-setting-title">
                                                    <h3>수량 열</h3>
                                                    <p>수량 정보가 있는 열을 선택하세요 (필수)</p>
                                                </div>
                                            </div>
                                            <div class="column-setting-body">
                                                <select id="quantity-column" class="form-control">
                                                    <option value="">선택하세요 (선택사항)</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <button id="analyze-button" class="btn btn-primary">
                                        패턴 분석 시작
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 설정 관리 탭 -->
                    <div id="config-content" class="tab-content">
                        <div class="card">
                            <div class="card-header">
                                <h2 class="card-title">
                                    <span class="card-title-icon">⚙️</span>
                                    저장된 설정 관리
                                </h2>
                            </div>
                            <div class="card-body">
                                <div id="saved-configurations">
                                    <!-- 저장된 설정 목록이 여기에 표시됩니다 -->
                                </div>

                                <div id="no-configurations" class="text-center" style="padding: 40px 0; color: var(--text-secondary);">
                                    저장된 설정이 없습니다. 설정을 저장하면 여기에 표시됩니다.
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 패턴 결과 탭 -->
                    <div id="pattern-content" class="tab-content">
                        <div id="pattern-result-container" class="hidden">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h2 class="card-title">
                                        <span class="card-title-icon">🔍</span>
                                        패턴 필터
                                    </h2>
                                    <button id="print-pattern-result" class="btn btn-primary">
                                        📄 패턴 분석 결과 인쇄
                                    </button>
                                </div>
                                <div class="card-body">
                                    <div class="pattern-filter">
                                        <div class="filter-item">
                                            <label for="include-input" class="filter-label">포함검색어</label>
                                            <input type="text" id="include-input" class="form-control" placeholder="예: 김치, 사과">
                                        </div>
                                        <div class="filter-item">
                                            <label for="exclude-input" class="filter-label">제외검색어</label>
                                            <input type="text" id="exclude-input" class="form-control" placeholder="예: 김치, 사과">
                                        </div>
                                        <div class="filter-item" style="max-width: 120px;">
                                            <label for="min-rep-input" class="filter-label">최소반복수</label>
                                            <input type="number" id="min-rep-input" class="form-control" min="1" value="1">
                                        </div>
                                    </div>

                                    <div id="pattern-summary" class="result-summary">
                                        <!-- 패턴 요약 정보가 여기에 표시됩니다 -->
                                    </div>

                                    <div class="pattern-table-container">
                                        <table class="pattern-table">
                                            <thead id="pattern-table-head">
                                                <tr>
                                                    <th>순번</th>
                                                    <th>패턴</th>
                                                    <th>수량</th>
                                                    <th>반복수</th>
                                                </tr>
                                            </thead>
                                            <tbody id="pattern-table-body">
                                                <!-- 패턴 목록이 여기에 표시됩니다 -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <button id="process-button" class="btn btn-success">
                                        가공 및 다운로드
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div id="no-pattern-data" class="text-center" style="padding: 80px 0; color: var(--text-secondary);">
                            <div style="font-size: 36px; margin-bottom: 16px;">📈</div>
                            <h3 style="margin-bottom: 8px; color: var(--text-primary);">패턴 데이터가 없습니다</h3>
                            <p>엑셀 파일을 업로드하고 패턴 분석을 진행하세요.</p>
                        </div>
                    </div>
                </div>
            </main>
        </body>
        </html>
    `);
        doc.close();

        // DOM이 완전히 로드된 후 이벤트 초기화
        orderProcessWindow.addEventListener('load', function() {
            initializeOrderProcessEvents();
        });
    }

    // 주문 가공 이벤트 초기화
    function initializeOrderProcessEvents() {
        if (!orderProcessWindow || orderProcessWindow.closed) return;

        const doc = orderProcessWindow.document;

        // 주문 처리용 데이터 저장소
        const orderProcessor = {
            excelData: null,         // 원본 Excel 데이터
            columns: [],             // 컬럼명 배열
            keyColumn: '',           // 기준 열 (송장번호 등)
            dataColumns: [],         // 패턴 분석할 데이터 열
            quantityColumn: '',      // 수량 열
            sortColumns: [],         // 정렬 기준 열
            configName: '',          // 현재 설정 이름
            patterns: [],            // 분석된 패턴 배열
            filteredPatterns: [],    // 필터링된 패턴 배열
            configurations: loadConfigurations(), // 저장된 설정 불러오기
            minRepetition: 1,        // 최소 반복 수
            includeKeywords: [],     // 포함 키워드
            excludeKeywords: []      // 제외 키워드
        };

        // 메시지 표시 함수 (수정된 버전)
        function showMessage(doc, message, type = 'error') {
            const messageContainer = doc.getElementById('message-container');
            if (!messageContainer) return;

            const className = type === 'error' ? 'alert-error' : 'alert-success';

            // 메시지 요소 생성
            const messageElement = doc.createElement('div');
            messageElement.className = `alert ${className}`;
            messageElement.style.marginBottom = '10px';
            messageElement.textContent = message;

            // 메시지 컨테이너에 추가
            messageContainer.appendChild(messageElement);

            // 3초 후 제거
            setTimeout(() => {
                if (messageElement.parentNode) {
                    messageElement.remove();
                }
            }, 3000);
        }

        // 저장된 설정 로컬스토리지에서 로드
        function loadConfigurations() {
            try {
                const savedConfigs = localStorage.getItem('orderProcessConfigurations');
                return savedConfigs ? JSON.parse(savedConfigs) : {};
            } catch (e) {
                console.error('설정 로드 오류:', e);
                return {};
            }
        }

        // 설정 로컬스토리지에 저장
        function saveConfigurations() {
            try {
                localStorage.setItem('orderProcessConfigurations', JSON.stringify(orderProcessor.configurations));
            } catch (e) {
                console.error('설정 저장 오류:', e);
                showMessage(doc, '설정 저장 중 오류가 발생했습니다.', 'error');
            }
        }

        // 설정 목록 업데이트
        function updateConfigList() {
            const configSelect = doc.getElementById('config-select');
            const savedConfigurations = doc.getElementById('saved-configurations');
            const noConfigurations = doc.getElementById('no-configurations');
            const configButtonsContainer = doc.getElementById('config-buttons-container');

            if (!configSelect || !savedConfigurations || !noConfigurations || !configButtonsContainer) return;

            // 빠른 실행 버튼 업데이트
            configButtonsContainer.innerHTML = '';
            const configNames = Object.keys(orderProcessor.configurations);

            if (configNames.length > 0) {
                configNames.forEach(name => {
                    const config = orderProcessor.configurations[name];
                    const button = doc.createElement('button');
                    button.className = 'config-button';
                    button.innerHTML = `<span class="config-button-icon">⚡</span>${name}`;
                    button.title = `클릭하여 "${name}" 설정으로 바로 분석`;

                    button.addEventListener('click', function() {
                        // 설정 적용 및 분석 시작
                        doc.getElementById('config-select').value = name;
                        loadSelectedConfig();
                        analyzePatternsforprocess();
                        doc.getElementById('pattern-tab').click(); // 패턴 결과 탭으로 자동 전환
                    });

                    configButtonsContainer.appendChild(button);
                });
            } else {
                const noConfigMsg = doc.createElement('div');
                noConfigMsg.style.color = 'var(--gray-500)';
                noConfigMsg.style.fontSize = '13px';
                noConfigMsg.style.padding = '16px 0';
                noConfigMsg.textContent = '저장된 설정이 없습니다.';
                configButtonsContainer.appendChild(noConfigMsg);
            }

            // 기존의 설정 목록 업데이트 코드
            configSelect.innerHTML = '<option value="">새 설정</option>';

            configNames.forEach(name => {
                const option = doc.createElement('option');
                option.value = name;
                option.textContent = name;
                configSelect.appendChild(option);
            });

            // 설정 관리 탭 업데이트
            savedConfigurations.innerHTML = '';

            if (configNames.length === 0) {
                noConfigurations.style.display = 'block';
            } else {
                noConfigurations.style.display = 'none';

                configNames.forEach(name => {
                    const config = orderProcessor.configurations[name];

                    const configItem = doc.createElement('div');
                    configItem.className = 'config-item';

                    const configHeader = doc.createElement('div');
                    configHeader.className = 'config-item-header';

                    const nameInput = doc.createElement('input');
                    nameInput.type = 'text';
                    nameInput.className = 'form-control config-item-name';
                    nameInput.value = name;
                    nameInput.readOnly = true;

                    const actionsDiv = doc.createElement('div');
                    actionsDiv.className = 'config-item-actions';

                    // 편집 버튼
                    const editButton = doc.createElement('button');
                    editButton.className = 'btn btn-sm btn-outline';
                    editButton.textContent = '수정';
                    editButton.addEventListener('click', function() {
                        if (nameInput.readOnly) {
                            nameInput.readOnly = false;
                            nameInput.focus();
                            this.textContent = '저장';
                        } else {
                            const newName = nameInput.value.trim();
                            if (newName && newName !== name) {
                                if (orderProcessor.configurations[newName]) {
                                    showMessage(doc, '이미 같은 이름의 설정이 있습니다.', 'error');
                                    return;
                                }

                                // 이름 변경
                                orderProcessor.configurations[newName] = {...orderProcessor.configurations[name]};
                                delete orderProcessor.configurations[name];
                                saveConfigurations();
                                updateConfigList();
                            } else {
                                nameInput.readOnly = true;
                                this.textContent = '수정';
                            }
                        }
                    });

                    // 삭제 버튼
                    const deleteButton = doc.createElement('button');
                    deleteButton.className = 'btn btn-sm';
                    deleteButton.style.backgroundColor = 'var(--error)';
                    deleteButton.style.color = 'white';
                    deleteButton.textContent = '삭제';
                    deleteButton.addEventListener('click', function() {
                        if (confirm(`"${name}" 설정을 삭제하시겠습니까?`)) {
                            delete orderProcessor.configurations[name];
                            saveConfigurations();
                            updateConfigList();
                        }
                    });

                    // 적용 버튼
                    const applyButton = doc.createElement('button');
                    applyButton.className = 'btn btn-sm';
                    applyButton.style.backgroundColor = 'var(--success)';
                    applyButton.style.color = 'white';
                    applyButton.textContent = '적용';
                    applyButton.addEventListener('click', function() {
                        // 설정 적용
                        doc.getElementById('upload-tab').click(); // 업로드 탭으로 전환
                        doc.getElementById('config-select').value = name;
                        loadSelectedConfig();
                    });

                    actionsDiv.appendChild(editButton);
                    actionsDiv.appendChild(deleteButton);
                    actionsDiv.appendChild(applyButton);

                    configHeader.appendChild(nameInput);
                    configHeader.appendChild(actionsDiv);

                    // 설정 정보
                    const configBody = doc.createElement('div');
                    configBody.className = 'config-item-body';

                    // 기준 열 정보
                    const keyColumnInfo = doc.createElement('div');
                    keyColumnInfo.className = 'config-detail';
                    keyColumnInfo.innerHTML = `<strong>기준 열:</strong> <span>${config.keyColumn}</span>`;
                    configBody.appendChild(keyColumnInfo);

                    // 분석 열 정보
                    const dataColumnsInfo = doc.createElement('div');
                    dataColumnsInfo.className = 'config-detail';
                    dataColumnsInfo.innerHTML = `<strong>분석 열:</strong> <span>${config.dataColumns.join(', ')}</span>`;
                    configBody.appendChild(dataColumnsInfo);

                    // 수량 열 정보 (있는 경우)
                    if (config.quantityColumn) {
                        const quantityColumnInfo = doc.createElement('div');
                        quantityColumnInfo.className = 'config-detail';
                        quantityColumnInfo.innerHTML = `<strong>수량 열:</strong> <span>${config.quantityColumn}</span>`;
                        configBody.appendChild(quantityColumnInfo);
                    }

                    configItem.appendChild(configHeader);
                    configItem.appendChild(configBody);

                    savedConfigurations.appendChild(configItem);
                });
            }
        }

        // 컬럼 선택 드롭다운 업데이트
        function updateColumnDropdowns() {
            if (!orderProcessor.columns || orderProcessor.columns.length === 0) return;

            // 기준 열 드롭다운
            const keyColumnSelect = doc.getElementById('key-column');
            if (!keyColumnSelect) return;

            keyColumnSelect.innerHTML = '<option value="">선택하세요</option>';

            // 수량 열 드롭다운
            const quantityColumnSelect = doc.getElementById('quantity-column');
            if (!quantityColumnSelect) return;

            quantityColumnSelect.innerHTML = '<option value="">선택하세요 (필수)</option>';

            // 모든 컬럼 추가
            orderProcessor.columns.forEach((column, index) => {
                // 기준 열 옵션
                const keyOption = doc.createElement('option');
                keyOption.value = column;
                keyOption.textContent = column;
                keyColumnSelect.appendChild(keyOption);

                // 수량 열 옵션
                const quantityOption = doc.createElement('option');
                quantityOption.value = column;
                quantityOption.textContent = column;
                quantityColumnSelect.appendChild(quantityOption);
            });

            // 데이터 열 컨테이너 초기화
            const dataColumnsContainer = doc.getElementById('data-columns-container');
            if (dataColumnsContainer) {
                dataColumnsContainer.innerHTML = '';
                // 첫 번째 데이터 열 추가
                addDataColumnSelect();
            }
        }

        // 데이터 열 선택 요소 추가
        function addDataColumnSelect() {
            const container = doc.getElementById('data-columns-container');
            if (!container) return;

            const index = container.children.length;

            const selectWrapper = doc.createElement('div');
            selectWrapper.className = 'column-select-wrapper';

            const select = doc.createElement('select');
            select.className = 'form-control data-column-select';
            select.innerHTML = '<option value="">선택하세요</option>';

            // 모든 컬럼 추가
            orderProcessor.columns.forEach(column => {
                const option = doc.createElement('option');
                option.value = column;
                option.textContent = column;
                select.appendChild(option);
            });

            // 삭제 버튼 (첫 번째가 아닌 경우에만)
            selectWrapper.appendChild(select);

            if (index > 0) {
                const removeButton = doc.createElement('button');
                removeButton.className = 'btn btn-sm btn-icon-only';
                removeButton.style.backgroundColor = 'var(--error-light)';
                removeButton.style.color = 'var(--error)';
                removeButton.innerHTML = '×';
                removeButton.title = '삭제';

                removeButton.addEventListener('click', function() {
                    selectWrapper.remove();
                });

                selectWrapper.appendChild(removeButton);
            }

            container.appendChild(selectWrapper);
        }

        // 선택된 설정 불러오기
        function loadSelectedConfig() {
            const configSelect = doc.getElementById('config-select');
            if (!configSelect) return;

            const configName = configSelect.value;

            if (!configName) {
                // 새 설정인 경우 초기화
                const configNameInput = doc.getElementById('config-name');
                const keyColumnSelect = doc.getElementById('key-column');
                const quantityColumnSelect = doc.getElementById('quantity-column');
                const dataColumnsContainer = doc.getElementById('data-columns-container');

                if (configNameInput) configNameInput.value = '';
                if (keyColumnSelect) keyColumnSelect.value = '';
                if (quantityColumnSelect) quantityColumnSelect.value = '';

                // 데이터 열 초기화
                if (dataColumnsContainer) {
                    dataColumnsContainer.innerHTML = '';
                    addDataColumnSelect();
                }

                return;
            }

            const config = orderProcessor.configurations[configName];
            if (!config) return;

            // 설정 이름 설정
            const configNameInput = doc.getElementById('config-name');
            if (configNameInput) configNameInput.value = configName;

            // 기준 열 설정
            const keyColumnSelect = doc.getElementById('key-column');
            if (keyColumnSelect) keyColumnSelect.value = config.keyColumn;

            // 수량 열 설정
            const quantityColumnSelect = doc.getElementById('quantity-column');
            if (quantityColumnSelect) quantityColumnSelect.value = config.quantityColumn || '';

            // 데이터 열 설정
            const dataColumnsContainer = doc.getElementById('data-columns-container');
            if (dataColumnsContainer) {
                dataColumnsContainer.innerHTML = '';

                config.dataColumns.forEach((column, index) => {
                    addDataColumnSelect();
                    const selects = doc.querySelectorAll('.data-column-select');
                    if (selects[index]) {
                        selects[index].value = column;
                    }
                });
            }
        }

        // 현재 설정 저장
        function saveCurrentConfig() {
            const configNameInput = doc.getElementById('config-name');
            if (!configNameInput) return false;

            const configName = configNameInput.value.trim();
            if (!configName) {
                showMessage(doc, '설정 이름을 입력해주세요.', 'error');
                return false;
            }

            const keyColumnSelect = doc.getElementById('key-column');
            if (!keyColumnSelect) return false;

            const keyColumn = keyColumnSelect.value;
            if (!keyColumn) {
                showMessage(doc, '기준 열을 선택해주세요.', 'error');
                return false;
            }

            // 데이터 열 수집
            const dataColumnSelects = doc.querySelectorAll('.data-column-select');
            const dataColumns = [];

            for (const select of dataColumnSelects) {
                const value = select.value;
                if (value) {
                    dataColumns.push(value);
                }
            }

            if (dataColumns.length === 0) {
                showMessage(doc, '최소 하나 이상의 데이터 열을 선택해주세요.', 'error');
                return false;
            }

            // 수량 열
            const quantityColumnSelect = doc.getElementById('quantity-column');
            const quantityColumn = quantityColumnSelect ? quantityColumnSelect.value : '';

            // 설정 저장
            orderProcessor.configurations[configName] = {
                keyColumn,
                dataColumns,
                quantityColumn
            };

            orderProcessor.configName = configName;
            saveConfigurations();
            updateConfigList();

            showMessage(doc, `설정 "${configName}"이 저장되었습니다.`, 'success');

            return true;
        }

        // 패턴 분석 실행
        function analyzePatternsforprocess() {
            if (!orderProcessor.excelData || !orderProcessor.excelData.length) {
                showMessage(doc, '분석할 데이터가 없습니다.', 'error');
                return;
            }

            // 현재 설정 저장
            const configSaved = saveCurrentConfig();
            if (!configSaved) return;

            // 설정 가져오기
            const keyColumnSelect = doc.getElementById('key-column');
            if (!keyColumnSelect) return;

            const keyColumn = keyColumnSelect.value;

            const dataColumnSelects = doc.querySelectorAll('.data-column-select');
            const dataColumns = Array.from(dataColumnSelects)
            .map(select => select.value)
            .filter(Boolean);

            const quantityColumnSelect = doc.getElementById('quantity-column');
            const quantityColumn = quantityColumnSelect ? quantityColumnSelect.value : '';

            // 데이터를 복사하여 초기 데이터가 변경되지 않도록 함
            const originalData = [...orderProcessor.excelData];

            // 주문별 데이터 그룹화
            const orderGroups = {};

            originalData.forEach(row => {
                const keyValue = row[keyColumn];
                if (!keyValue) return; // 기준 열 값이 없는 경우 건너뜀

                if (!orderGroups[keyValue]) {
                    orderGroups[keyValue] = [];
                }

                // 데이터 열 값만 추출
                const dataValues = {};
                dataColumns.forEach(column => {
                    dataValues[column] = row[column] || '';
                });

                // 수량 정보 추가
                if (quantityColumn && row[quantityColumn]) {
                    dataValues['__quantity__'] = parseInt(row[quantityColumn]) || 1;
                } else {
                    dataValues['__quantity__'] = 1;
                }

                orderGroups[keyValue].push(dataValues);
            });

            // 주문별 패턴 생성
            const patterns = {};
            let patternId = 1;

            for (const [keyValue, items] of Object.entries(orderGroups)) {
                // 주문 내 아이템 정렬
                items.sort((a, b) => {
                    for (const column of dataColumns) {
                        if (a[column] !== b[column]) {
                            return a[column] < b[column] ? -1 : 1;
                        }
                    }
                    return 0;
                });

                // 패턴 키 생성
                const patternKey = items.map(item => {
                    return dataColumns.map(column => {
                        const value = item[column] || '';
                        const quantity = item['__quantity__'] || 1;
                        return `${column}:${value}:${quantity}`;
                    }).join('|');
                }).join('||');

                // 패턴 등록 또는 업데이트
                if (patterns[patternKey]) {
                    patterns[patternKey].count += 1;
                    patterns[patternKey].keys.push(keyValue);

                    // 아이템별 수량 합산
                    items.forEach((item, index) => {
                        const patternItem = patterns[patternKey].items[index];
                        if (patternItem) {
                            patternItem.totalQuantity += item['__quantity__'] || 1;
                        }
                    });
                } else {
                    patterns[patternKey] = {
                        id: patternId++,
                        items: items.map(item => {
                            const newItem = {...item};
                            newItem.totalQuantity = item['__quantity__'] || 1;
                            return newItem;
                        }),
                        count: 1,
                        keys: [keyValue]
                    };
                }
            }

            // 패턴을 배열로 변환하고 빈도순 정렬
            const patternArray = Object.values(patterns).sort((a, b) => b.count - a.count);

            // 상태 업데이트
            orderProcessor.keyColumn = keyColumn;
            orderProcessor.dataColumns = dataColumns;
            orderProcessor.quantityColumn = quantityColumn;
            orderProcessor.patterns = patternArray;
            orderProcessor.filteredPatterns = [...patternArray];

            // 패턴 탭으로 전환
            const patternTab = doc.getElementById('pattern-tab');
            if (patternTab) {
                patternTab.click();

                // 인쇄 버튼 이벤트 리스너 추가
                setTimeout(() => {
                    const printButton = doc.getElementById('print-pattern-result');
                    if (printButton) {
                        printButton.addEventListener('click', function() {
                            const printWindow = window.open('', '_blank');
                            const printDoc = printWindow.document;

                            // 프린트용 HTML 생성
                            printDoc.write(`
                                <!DOCTYPE html>
                                <html>
                                <head>
                                    <title>주문 패턴 분석 결과</title>
                                    <style>
                                        @page {
                                            size: A4;
                                            margin: 1.5cm;
                                        }
                                        body {
                                            font-family: Arial, sans-serif;
                                            line-height: 1.4;
                                            color: #333;
                                            margin: 0;
                                            padding: 15px;
                                        }
                                        .print-header {
                                            display: flex;
                                            justify-content: space-between;
                                            align-items: center;
                                            margin-bottom: 15px;
                                            padding-bottom: 10px;
                                            border-bottom: 2px solid #dee2e6;
                                        }
                                        .print-header h1 {
                                            font-size: 18px;
                                            margin: 0;
                                        }
                                        .print-date {
                                            color: #666;
                                            font-size: 13px;
                                        }
                                        .print-summary {
                                            display: grid;
                                            grid-template-columns: repeat(4, 1fr);
                                            gap: 10px;
                                            margin: 15px 0;
                                            padding: 10px;
                                            border: 1px solid #dee2e6;
                                            border-radius: 4px;
                                            background: white;
                                        }
                                        .summary-item {
                                            text-align: center;
                                        }
                                        .summary-label {
                                            font-size: 12px;
                                            color: #495057;
                                            margin-bottom: 3px;
                                        }
                                        .summary-value {
                                            font-size: 16px;
                                            font-weight: 600;
                                            color: #212529;
                                        }
                                        .pattern-table {
                                            width: 100%;
                                            border-collapse: collapse;
                                            font-size: 11px;
                                            margin-top: 15px;
                                        }
                                        .pattern-table th {
                                            background-color: #f8f9fa !important;
                                            font-weight: 600;
                                            padding: 8px;
                                            border: 1px solid #dee2e6;
                                            text-align: center;
                                        }
                                        .pattern-table td {
                                            padding: 6px 8px;
                                            border: 1px solid #dee2e6;
                                            text-align: center;
                                        }
                                        .pattern-table tr[data-pattern-index="even"] {
                                            background-color: #ffffff !important;
                                        }
                                        .pattern-table tr[data-pattern-index="odd"] {
                                            background-color: #f8f9fa !important;
                                        }
                                        .pattern-table tr.leftover-pattern {
                                            background-color: #fff5f5 !important;
                                        }
                                        @media print {
                                            .pattern-table {
                                                page-break-inside: auto;
                                            }
                                            .pattern-table tr {
                                                page-break-inside: avoid;
                                            }
                                            .pattern-table th {
                                                -webkit-print-color-adjust: exact;
                                                print-color-adjust: exact;
                                            }
                                            .pattern-table tr[data-pattern-index="odd"] {
                                                background-color: #f8f9fa !important;
                                                -webkit-print-color-adjust: exact;
                                                print-color-adjust: exact;
                                            }
                                            .pattern-table tr.leftover-pattern {
                                                background-color: #fff5f5 !important;
                                                -webkit-print-color-adjust: exact;
                                                print-color-adjust: exact;
                                            }
                                        }
                                    </style>
                                </head>
                                <body>
                                    <div class="print-header">
                                        <h1>주문 패턴 분석 결과</h1>
                                        <div class="print-date">${new Date().toLocaleDateString('ko-KR', {
                                            year: 'numeric',
                                            month: 'long',
                                            day: 'numeric',
                                            hour: '2-digit',
                                            minute: '2-digit'
                                        })} 출력</div>
                                    </div>
                                    <div class="print-summary">
                                        ${doc.getElementById('pattern-summary').innerHTML}
                                    </div>
                                    <div class="print-table">
                                        ${(() => {
                                            const container = doc.querySelector('.pattern-table-container').cloneNode(true);
                                            const leftoverRows = container.querySelectorAll('tr.leftover-pattern');
                                            leftoverRows.forEach(row => row.remove());
                                            return container.innerHTML;
                                        })()}
                                    </div>
                                </body>
                                </html>
                            `);

                            printDoc.close();
                            printWindow.print();
                        });
                    }
                }, 500);
            }

            // 패턴 결과 표시
            showPatternResults();
        }

        // 패턴 필터링을 위한 디바운스 함수
        function debounce(func, delay) {
            let timeout;
            return function() {
                const context = this;
                const args = arguments;
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(context, args), delay);
            };
        }

        // 실시간 필터링을 위한 이벤트 리스너 설정
        const debouncedFilter = debounce(filterPatternsforprocess, 300);

        // 필터 입력 필드에 이벤트 리스너 추가
        const includeInput = doc.getElementById('include-input');
        const excludeInput = doc.getElementById('exclude-input');
        const minRepInput = doc.getElementById('min-rep-input');

        if (includeInput) includeInput.addEventListener('input', debouncedFilter);
        if (excludeInput) excludeInput.addEventListener('input', debouncedFilter);
        if (minRepInput) minRepInput.addEventListener('input', debouncedFilter);

        // 패턴 필터링
        function filterPatternsforprocess() {
            const includeInput = doc.getElementById('include-input');
            const excludeInput = doc.getElementById('exclude-input');
            const minRepInput = doc.getElementById('min-rep-input');

            if (!includeInput || !excludeInput || !minRepInput) return;

            const includeValue = includeInput.value;
            const excludeValue = excludeInput.value;
            const minRepetition = parseInt(minRepInput.value, 10) || 1;

            const includeKeywords = includeValue ? includeValue.split(',').map(k => k.trim().toLowerCase()).filter(Boolean) : [];
            const excludeKeywords = excludeValue ? excludeValue.split(',').map(k => k.trim().toLowerCase()).filter(Boolean) : [];

            // 상태 업데이트
            orderProcessor.minRepetition = minRepetition;
            orderProcessor.includeKeywords = includeKeywords;
            orderProcessor.excludeKeywords = excludeKeywords;

            // 패턴 필터링
            let filteredPatterns = [...orderProcessor.patterns];

            // 필터 적용
            if (includeKeywords.length > 0 || excludeKeywords.length > 0) {
                filteredPatterns = filteredPatterns.filter(pattern => {
                    // 패턴 텍스트 생성
                    const patternText = pattern.items.map(item => {
                        return orderProcessor.dataColumns.map(column => {
                            return item[column] || '';
                        }).join(' ');
                    }).join(' ').toLowerCase();

                    // 포함 키워드 검사 (OR 조건)
                    const includesMatch = includeKeywords.length === 0 ||
                          includeKeywords.some(keyword => patternText.includes(keyword));

                    // 제외 키워드 검사 (모든 제외 키워드가 없어야 함)
                    const excludesMatch = excludeKeywords.length === 0 ||
                          excludeKeywords.every(keyword => !patternText.includes(keyword));

                    return includesMatch && excludesMatch;
                });
            }

            // 반복 수 필터링
            let mainPatterns = filteredPatterns.filter(pattern => pattern.count >= minRepetition);
            let leftoverPatterns = filteredPatterns.filter(pattern => pattern.count < minRepetition);

            // 짜투리 패턴 찾기
            let leftoverKeys = [];
            leftoverPatterns.forEach(pattern => {
                leftoverKeys = [...leftoverKeys, ...pattern.keys];
            });

            // 최종 패턴 배열 (메인 패턴 + 짜투리)
            orderProcessor.filteredPatterns = mainPatterns;

            // 짜투리가 있으면 하나의 그룹으로 추가
            if (leftoverKeys.length > 0) {
                orderProcessor.filteredPatterns.push({
                    id: 999999, // 짜투리 ID
                    items: [{
                        __isLeftover__: true,
                        totalQuantity: leftoverKeys.length
                    }],
                    count: leftoverKeys.length,
                    keys: leftoverKeys,
                    __leftoverPatterns__: leftoverPatterns // 원본 짜투리 패턴 저장
                });
            }

            // 패턴 결과 업데이트
            updatePatternTable();
            updatePatternSummary();
        }

        // 패턴 결과 표시
        function showPatternResults() {
            const patternResultContainer = doc.getElementById('pattern-result-container');
            const noPatternData = doc.getElementById('no-pattern-data');

            if (!patternResultContainer || !noPatternData) return;

            if (!orderProcessor.patterns || orderProcessor.patterns.length === 0) {
                patternResultContainer.classList.add('hidden');
                noPatternData.style.display = 'block';
                return;
            }

            // 테이블 컨테이너 생성 또는 업데이트
            let tableContainer = patternResultContainer.querySelector('.pattern-table-container');
            if (!tableContainer) {
                // 프린트 버튼 추가
                const buttonContainer = doc.createElement('div');
                buttonContainer.style.textAlign = 'right';
                buttonContainer.style.marginBottom = '10px';

                const printButton = doc.createElement('button');
                printButton.className = 'btn btn-primary';
                printButton.innerHTML = '📄 인쇄';
                printButton.addEventListener('click', function() {
                    const printWindow = window.open('', '_blank');
                    const printDoc = printWindow.document;

                    // 프린트용 HTML 생성
                    printDoc.write(`
                        <!DOCTYPE html>
                        <html>
                        <head>
                            <title>주문 패턴 분석 결과</title>
                            <style>
                                @page {
                                    size: A4;
                                    margin: 1.5cm;
                                }
                                body {
                                    font-family: Arial, sans-serif;
                                    line-height: 1.4;
                                    color: #333;
                                    margin: 0;
                                    padding: 15px;
                                }
                                .print-header {
                                    display: flex;
                                    justify-content: space-between;
                                    align-items: center;
                                    margin-bottom: 15px;
                                    padding-bottom: 10px;
                                    border-bottom: 2px solid #dee2e6;
                                }
                                .print-header h1 {
                                    font-size: 18px;
                                    margin: 0;
                                }
                                .print-date {
                                    color: #666;
                                    font-size: 13px;
                                }
                                .print-summary {
                                    display: grid;
                                    grid-template-columns: repeat(4, 1fr);
                                    gap: 10px;
                                    margin: 15px 0;
                                    padding: 10px;
                                    border: 1px solid #dee2e6;
                                    border-radius: 4px;
                                    background: white;
                                }
                                .summary-item {
                                    text-align: center;
                                }
                                .summary-label {
                                    font-size: 12px;
                                    color: #495057;
                                    margin-bottom: 3px;
                                }
                                .summary-value {
                                    font-size: 16px;
                                    font-weight: 600;
                                    color: #212529;
                                }
                                .pattern-table {
                                    width: 100%;
                                    border-collapse: collapse;
                                    font-size: 11px;
                                    margin-top: 15px;
                                }
                                .pattern-table th {
                                    background-color: #f8f9fa !important;
                                    font-weight: 600;
                                    padding: 8px;
                                    border: 1px solid #dee2e6;
                                    text-align: center;
                                }
                                .pattern-table td {
                                    padding: 6px 8px;
                                    border: 1px solid #dee2e6;
                                    text-align: center;
                                }
                                .pattern-table tr[data-pattern-index="even"] {
                                    background-color: #ffffff !important;
                                }
                                .pattern-table tr[data-pattern-index="odd"] {
                                    background-color: #f8f9fa !important;
                                }
                                .pattern-table tr.leftover-pattern {
                                    background-color: #fff5f5 !important;
                                }
                                @media print {
                                    .pattern-table {
                                        page-break-inside: auto;
                                    }
                                    .pattern-table tr {
                                        page-break-inside: avoid;
                                    }
                                    .pattern-table th {
                                        -webkit-print-color-adjust: exact;
                                        print-color-adjust: exact;
                                    }
                                    .pattern-table tr[data-pattern-index="odd"] {
                                        background-color: #f8f9fa !important;
                                        -webkit-print-color-adjust: exact;
                                        print-color-adjust: exact;
                                    }
                                    .pattern-table tr.leftover-pattern {
                                        background-color: #fff5f5 !important;
                                        -webkit-print-color-adjust: exact;
                                        print-color-adjust: exact;
                                    }
                                }
                            </style>
                        </head>
                        <body>
                            <div class="print-header">
                                <h1>주문 패턴 분석 결과</h1>
                                <div class="print-date">${new Date().toLocaleDateString('ko-KR', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                })} 출력</div>
                            </div>
                            <div class="print-summary">
                                ${doc.getElementById('pattern-summary').innerHTML}
                            </div>
                            <div class="print-table">
                                ${(() => {
                                    const container = doc.querySelector('.pattern-table-container').cloneNode(true);
                                    const leftoverRows = container.querySelectorAll('tr.leftover-pattern');
                                    leftoverRows.forEach(row => row.remove());
                                    return container.innerHTML;
                                })()}
                            </div>
                        </body>
                        </html>
                    `);

                    printDoc.close();
                    printWindow.print();
                });

                buttonContainer.appendChild(printButton);
                patternResultContainer.appendChild(buttonContainer);

                // 테이블 컨테이너 생성
                tableContainer = doc.createElement('div');
                tableContainer.className = 'pattern-table-container';
                tableContainer.innerHTML = `
                    <table class="pattern-table">
                        <thead id="pattern-table-head"></thead>
                        <tbody id="pattern-table-body"></tbody>
                    </table>
                `;
                patternResultContainer.appendChild(tableContainer);

                // 스타일 추가
                const style = doc.createElement('style');
                style.textContent = `
                    .pattern-table-container {
                        width: 100%;
                        overflow-x: auto;
                        margin-top: 20px;
                        background: white;
                        border-radius: 8px;
                        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                    }

                    .pattern-table {
                        width: 100%;
                        border-collapse: separate;
                        border-spacing: 0;
                        margin-bottom: 0;
                        font-size: 14px;
                    }

                    .pattern-table th {
                        background-color: #f8f9fa;
                        color: #495057;
                        font-weight: 600;
                        padding: 15px;
                        text-align: center;
                        border-bottom: 2px solid #dee2e6;
                        white-space: nowrap;
                    }

                    .pattern-table td {
                        padding: 12px 15px;
                        vertical-align: middle;
                        text-align: center;
                        border-bottom: 1px solid #e9ecef;
                    }

                    .pattern-table tbody tr {
                        transition: all 0.2s;
                    }

                    /* 패턴별 배경색 */
                    .pattern-table tbody tr[data-pattern-index="even"] {
                        background-color: #ffffff;
                    }

                    .pattern-table tbody tr[data-pattern-index="odd"] {
                        background-color: #f8f9fa;
                    }

                    .pattern-table tbody tr:hover {
                        background-color: #f1f3f5;
                    }

                    .pattern-table tbody tr.leftover-pattern {
                        background-color: #fff5f5;
                    }

                    .pattern-table tbody tr.leftover-pattern:hover {
                        background-color: #ffe3e3;
                    }

                    /* 반복수 셀 스타일 - 배경색 제거 */
                    .pattern-table td[rowspan] {
                        font-weight: 600;
                    }

                    @media (max-width: 768px) {
                        .pattern-table th,
                        .pattern-table td {
                            padding: 10px;
                            font-size: 13px;
                        }
                    }
                `;
                doc.head.appendChild(style);
            }

            patternResultContainer.classList.remove('hidden');
            noPatternData.style.display = 'none';

            // 필터링 실행
            filterPatternsforprocess();
        }

        // 패턴 테이블 업데이트
        function updatePatternTable() {
            const patternTableBody = doc.getElementById('pattern-table-body');
            const patternTableHead = doc.getElementById('pattern-table-head');
            if (!patternTableBody || !patternTableHead) return;

            // 테이블 헤더 업데이트
            const headerRow = patternTableHead.querySelector('tr');
            if (headerRow) {
                headerRow.innerHTML = '';

                // 순번 헤더
                const indexHeader = doc.createElement('th');
                indexHeader.textContent = '순번';
                headerRow.appendChild(indexHeader);

                // 동적 분석열 헤더들
                if (orderProcessor.dataColumns && orderProcessor.dataColumns.length > 0) {
                    orderProcessor.dataColumns.forEach(column => {
                        const columnHeader = doc.createElement('th');
                        columnHeader.textContent = column;
                        headerRow.appendChild(columnHeader);
                    });
                }

                // 수량열 헤더
                const quantityHeader = doc.createElement('th');
                quantityHeader.textContent = '수량';
                headerRow.appendChild(quantityHeader);

                // 반복수 헤더
                const repeatHeader = doc.createElement('th');
                repeatHeader.textContent = '반복수';
                headerRow.appendChild(repeatHeader);
            }

            // 테이블 바디 초기화
            patternTableBody.innerHTML = '';

            if (!orderProcessor.filteredPatterns || orderProcessor.filteredPatterns.length === 0) {
                const emptyRow = doc.createElement('tr');
                const emptyCell = doc.createElement('td');
                emptyCell.colSpan = (orderProcessor.dataColumns ? orderProcessor.dataColumns.length : 0) + 3;
                emptyCell.textContent = '패턴 데이터가 없습니다.';
                emptyCell.style.padding = '20px';
                emptyCell.style.textAlign = 'center';
                emptyCell.style.color = 'var(--text-secondary)';
                emptyRow.appendChild(emptyCell);
                patternTableBody.appendChild(emptyRow);
                return;
            }

            orderProcessor.filteredPatterns.forEach((pattern, index) => {
                const isLeftover = pattern.id === 999999;
                let currentPatternClass = isLeftover ? 'leftover-pattern' : (index % 2 === 0 ? 'even' : 'odd');

                pattern.items.forEach((item, itemIndex) => {
                    const row = doc.createElement('tr');

                    // 패턴별 음영 처리
                    if (isLeftover) {
                        row.classList.add('leftover-pattern');
                    } else {
                        row.setAttribute('data-pattern-index', currentPatternClass);
                    }

                    // 순번
                    if (itemIndex === 0) {
                        const indexCell = doc.createElement('td');
                        indexCell.textContent = index + 1;
                        indexCell.style.textAlign = 'center';
                        indexCell.rowSpan = pattern.items.length;
                        row.appendChild(indexCell);
                    }

                    // 동적 분석열 데이터
                    if (orderProcessor.dataColumns && orderProcessor.dataColumns.length > 0) {
                        orderProcessor.dataColumns.forEach(column => {
                            const dataCell = doc.createElement('td');
                            if (isLeftover) {
                                dataCell.textContent = '짜투리 패턴';
                                dataCell.style.fontStyle = 'italic';
                            } else {
                                dataCell.textContent = item[column] || '';
                            }
                            dataCell.style.textAlign = 'center';
                            row.appendChild(dataCell);
                        });
                    }

                    // 수량
                    const quantityCell = doc.createElement('td');
                    if (isLeftover) {
                        quantityCell.textContent = pattern.count;
                    } else {
                        quantityCell.textContent = item.__quantity__ || 1;
                    }
                    quantityCell.style.textAlign = 'center';
                    row.appendChild(quantityCell);

                    // 반복수
                    if (itemIndex === 0) {
                        const countCell = doc.createElement('td');
                        countCell.textContent = pattern.count;
                        countCell.style.fontWeight = '600';
                        countCell.style.textAlign = 'center';
                        countCell.rowSpan = pattern.items.length;
                        row.appendChild(countCell);
                    }

                    patternTableBody.appendChild(row);
                });
            });
        }

        // 패턴 요약 정보 업데이트
        function updatePatternSummary() {
            const patternSummary = doc.getElementById('pattern-summary');
            if (!patternSummary) return;

            if (!orderProcessor.filteredPatterns || orderProcessor.filteredPatterns.length === 0) {
                patternSummary.style.display = 'none';
                return;
            }

            // 패턴 통계 계산
            const totalPatterns = orderProcessor.filteredPatterns.length;

            // 고유 기준 값 (주문 또는 송장번호)
            const uniqueKeys = new Set();
            orderProcessor.patterns.forEach(pattern => {
                pattern.keys.forEach(key => uniqueKeys.add(key));
            });

            // 짜투리 패턴과 일반 패턴 분리
            const leftoverPattern = orderProcessor.filteredPatterns.find(p => p.id === 999999);
            const regularPatterns = orderProcessor.filteredPatterns.filter(p => p.id !== 999999);

            const leftoverCount = leftoverPattern ? leftoverPattern.count : 0;
            const regularCount = regularPatterns.reduce((sum, p) => sum + p.count, 0);

            // 요약 정보 설정
            patternSummary.innerHTML = `
            <div class="summary-item">
                <div class="summary-label">전체 주문 수</div>
                <div class="summary-value">${uniqueKeys.size}</div>
            </div>
            <div class="summary-item">
                <div class="summary-label">패턴 수</div>
                <div class="summary-value">${regularPatterns.length}</div>
            </div>
            <div class="summary-item">
                <div class="summary-label">패턴 주문 수</div>
                <div class="summary-value">${regularCount}</div>
            </div>
            <div class="summary-item">
                <div class="summary-label">짜투리 주문 수</div>
                <div class="summary-value">${leftoverCount}</div>
            </div>
        `;

            patternSummary.style.display = 'grid';
        }

        // 주문 데이터 가공 및 다운로드
        function processAndDownload() {
            if (!orderProcessor.filteredPatterns || orderProcessor.filteredPatterns.length === 0) {
                showMessage(doc, '처리할 패턴 데이터가 없습니다.', 'error');
                return;
            }

            try {
                // 패턴 기반 주문 데이터 재정렬
                let reorderedData = [];

                // 정규 패턴 우선 처리 (내림차순)
                const regularPatterns = orderProcessor.filteredPatterns.filter(p => p.id !== 999999);

                // 패턴별 주문 원본 데이터 찾기
                regularPatterns.forEach(pattern => {
                    pattern.keys.forEach(key => {
                        // 해당 key를 가진 모든 원본 행 찾기
                        const originalRows = orderProcessor.excelData.filter(row => row[orderProcessor.keyColumn] === key);

                        if (originalRows.length > 0) {
                            // 원본 행을 중요도 순서로 정렬하여 추가
                            reorderedData = [...reorderedData, ...originalRows];
                        }
                    });
                });

                // 짜투리 패턴 처리
                const leftoverPattern = orderProcessor.filteredPatterns.find(p => p.id === 999999);

                if (leftoverPattern) {
                    let leftoverRows = [];

                    // 짜투리 주문 원본 행 찾기
                    leftoverPattern.keys.forEach(key => {
                        // 해당 key를 가진 모든 원본 행 찾기
                        const originalRows = orderProcessor.excelData.filter(row => row[orderProcessor.keyColumn] === key);

                        if (originalRows.length > 0) {
                            leftoverRows = [...leftoverRows, ...originalRows];
                        }
                    });

                    // 수량 열이 지정되어 있으면 수량 기준 정렬 후 각 수량 그룹 내에서 다른 열로 정렬
                    if (orderProcessor.quantityColumn) {
                        // 디버깅을 위해 정렬 전 상태 로깅
                        console.log('정렬 전 leftoverRows 수량 확인:', leftoverRows.map(row => row[orderProcessor.quantityColumn]));

                        // 베이스 열 기준으로 그룹화
                        const baseGroups = {};

                        // 베이스 열 값을 기준으로 그룹화
                        leftoverRows.forEach(row => {
                            const baseValue = row[orderProcessor.keyColumn];
                            if (!baseGroups[baseValue]) {
                                baseGroups[baseValue] = [];
                            }
                            baseGroups[baseValue].push(row);
                        });

                        // 각 베이스 그룹의 수량 합계 계산
                        const groupTotals = {};
                        Object.keys(baseGroups).forEach(baseValue => {
                            const group = baseGroups[baseValue];
                            // 그룹 내 모든 행의 수량 합산
                            const totalQty = group.reduce((sum, row) => {
                                const qty = row[orderProcessor.quantityColumn] || '0';
                                return sum + (parseInt(qty, 10) || 0);
                            }, 0);
                            groupTotals[baseValue] = totalQty;
                        });

                        // 수량 합계 기준으로 오름차순 정렬
                        const sortedBaseGroups = Object.keys(groupTotals).sort((a, b) => groupTotals[a] - groupTotals[b]);

                        // 정렬된 베이스 그룹 순서대로 행 추가
                        leftoverRows = []; // 초기화
                        sortedBaseGroups.forEach(baseValue => {
                            const group = baseGroups[baseValue];
                            // 각 그룹 내에서 다른 열로 정렬 (필요시)
                            if (group.length > 1 && orderProcessor.sortColumns.length > 0) {
                                group.sort((a, b) => {
                                    for (let i = 0; i < orderProcessor.sortColumns.length; i++) {
                                        const column = orderProcessor.sortColumns[i];
                                        const direction = orderProcessor.sortDirections[i];

                                        if (a[column] !== b[column]) {
                                            const valueA = a[column] || '';
                                            const valueB = b[column] || '';

                                            // 숫자인 경우 숫자 정렬
                                            if (!isNaN(valueA) && !isNaN(valueB)) {
                                                const colNumA = parseFloat(valueA) || 0;
                                                const colNumB = parseFloat(valueB) || 0;

                                                if (direction === 'asc') {
                                                    return colNumA - colNumB;
                                                } else {
                                                    return colNumB - colNumA;
                                                }
                                            }

                                            // 문자열 정렬
                                            if (direction === 'asc') {
                                                return valueA.localeCompare(valueB);
                                            } else {
                                                return valueB.localeCompare(valueA);
                                            }
                                        }
                                    }
                                    return 0;
                                });
                            }
                            leftoverRows = [...leftoverRows, ...group];
                        });
                    }
                    // 수량 열이 지정되지 않은 경우 기존 정렬 방식 적용
                    else if (orderProcessor.sortColumns.length > 0) {
                        leftoverRows.sort((a, b) => {
                            for (let i = 0; i < orderProcessor.sortColumns.length; i++) {
                                const column = orderProcessor.sortColumns[i];
                                const direction = orderProcessor.sortDirections[i];

                                if (a[column] !== b[column]) {
                                    const valueA = a[column] || '';
                                    const valueB = b[column] || '';

                                    // 숫자인 경우 숫자 정렬
                                    if (!isNaN(valueA) && !isNaN(valueB)) {
                                        const numA = parseFloat(valueA) || 0;
                                        const numB = parseFloat(valueB) || 0;

                                        if (direction === 'asc') {
                                            return numA - numB;
                                        } else {
                                            return numB - numA;
                                        }
                                    }

                                    // 문자열 정렬
                                    if (direction === 'asc') {
                                        return valueA.localeCompare(valueB);
                                    } else {
                                        return valueB.localeCompare(valueA);
                                    }
                                }
                            }

                            return 0;
                        });
                    }

                    // 짜투리 행 추가
                    reorderedData = [...reorderedData, ...leftoverRows];
                }

                // SheetJS 스크립트가 로드되었는지 확인
                if (typeof XLSX === 'undefined') {
                    // SheetJS 로드
                    const script = doc.createElement('script');
                    script.src = 'https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js';
                    script.onload = function() {
                        generateExcel(reorderedData);
                    };
                    script.onerror = function() {
                        showMessage(doc, 'SheetJS 라이브러리를 로드할 수 없습니다.', 'error');
                    };
                    doc.head.appendChild(script);
                } else {
                    generateExcel(reorderedData);
                }
            } catch (error) {
                console.error('데이터 가공 오류:', error);
                showMessage(doc, `데이터 가공 중 오류가 발생했습니다: ${error.message}`, 'error');
            }
        }

        // Excel 파일 생성 및 다운로드
        function generateExcel(data) {
            try {
                // 워크북 생성
                const wb = XLSX.utils.book_new();

                // 워크시트 생성
                const ws = XLSX.utils.json_to_sheet(data);

                // 열 너비 설정
                const colWidths = {};

                // 컬럼명
                Object.keys(data[0] || {}).forEach(key => {
                    const width = Math.max(key.length, ...data.map(row =>
                                                                   String(row[key] || '').length
                                                                  ));
                    colWidths[key] = Math.min(width, 50); // 최대 50 문자로 제한
                });

                ws['!cols'] = Object.values(colWidths).map(width => ({ wch: width }));

                // 워크시트 이름 설정
                const sheetName = '가공데이터';

                // 워크시트 추가
                XLSX.utils.book_append_sheet(wb, ws, sheetName);

                // 현재 날짜 추가
                const now = new Date();
                const dateStr = `${now.getFullYear()}${String(now.getMonth() + 1).padStart(2, '0')}${String(now.getDate()).padStart(2, '0')}`;
                const timeStr = `${String(now.getHours()).padStart(2, '0')}${String(now.getMinutes()).padStart(2, '0')}`;

                // 파일명 생성
                const fileName = `패턴분석_${dateStr}_${timeStr}.xlsx`;

                // 파일 다운로드
                XLSX.writeFile(wb, fileName);

                showMessage(doc, `Excel 파일 "${fileName}"이 다운로드되었습니다.`, 'success');
            } catch (error) {
                console.error('Excel 생성 오류:', error);
                showMessage(doc, `Excel 파일 생성 중 오류가 발생했습니다: ${error.message}`, 'error');
            }
        }

        // 파일 사이즈 포맷팅
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Excel 파일 읽기
        function readExcelFile(file) {
            // 파일 정보 표시
            const fileInfoElement = doc.getElementById('file-info');
            if (!fileInfoElement) return;

            const fileNameElement = fileInfoElement.querySelector('.file-name');
            const fileMetaElement = fileInfoElement.querySelector('.file-meta');
            if (!fileNameElement || !fileMetaElement) return;

            fileNameElement.textContent = file.name;
            fileMetaElement.textContent = formatFileSize(file.size);
            fileInfoElement.style.display = 'block';

            // 프로그레스 바 초기화
            const progressBar = doc.getElementById('upload-progress-bar');
            if (!progressBar) return;

            progressBar.style.width = '0%';

            // 로딩 표시 시작
            progressBar.style.width = '20%';

            try {
                const reader = new FileReader();

                reader.onload = function(e) {
                    progressBar.style.width = '80%';

                    try {
                        // 바이너리 데이터 읽기
                        const data = new Uint8Array(e.target.result);

                        // 명시적으로 XLSX 객체를 window에서 가져옴
                        const XLSXlib = window.XLSX;

                        if (!XLSXlib) {
                            console.error('XLSX 라이브러리가 로드되지 않았습니다.');
                            progressBar.style.width = '0%';
                            showMessage(doc, 'Excel 라이브러리가 로드되지 않았습니다. 페이지를 새로고침한 후 다시 시도해주세요.', 'error');
                            return;
                        }

                        // 워크북 파싱
                        const workbook = XLSXlib.read(data, { type: 'array' });

                        // 첫 번째 시트 이름 가져오기
                        const firstSheetName = workbook.SheetNames[0];

                        // 시트 데이터 가져오기
                        const worksheet = workbook.Sheets[firstSheetName];

                        // JSON으로 변환 - 모든 열 보존 옵션 추가
                        const jsonData = XLSXlib.utils.sheet_to_json(worksheet, {
                            raw: false,
                            defval: '',  // 빈 셀에 기본값 할당
                            blankrows: true  // 빈 행도 포함
                        });

                        // 데이터 저장
                        orderProcessor.excelData = jsonData;

                        // 열 이름 저장
                        if (jsonData.length > 0) {
                            orderProcessor.columns = Object.keys(jsonData[0]);
                        }

                        // 열 매핑 표시
                        updateColumnDropdowns();
                        const columnMappingContainer = doc.getElementById('column-mapping-container');
                        if (columnMappingContainer) {
                            columnMappingContainer.classList.remove('hidden');
                        }

                        // 진행 완료
                        progressBar.style.width = '100%';

                        showMessage(doc, '파일이 성공적으로 로드되었습니다.', 'success');
                    } catch (error) {
                        console.error('Excel 파싱 오류:', error);
                        progressBar.style.width = '0%';
                        showMessage(doc, `Excel 파일 파싱 중 오류가 발생했습니다: ${error.message}`, 'error');
                    }
                };

                reader.onerror = function() {
                    progressBar.style.width = '0%';
                    showMessage(doc, '파일 읽기 오류가 발생했습니다.', 'error');
                };

                reader.readAsArrayBuffer(file);
            } catch (error) {
                console.error('파일 처리 오류:', error);
                progressBar.style.width = '0%';
                showMessage(doc, `파일 처리 중 오류가 발생했습니다: ${error.message}`, 'error');
            }
        }

        // 탭 전환 이벤트
        const uploadTab = doc.getElementById('upload-tab');
        const configTab = doc.getElementById('config-tab');
        const patternTab = doc.getElementById('pattern-tab');

        const uploadContent = doc.getElementById('upload-content');
        const configContent = doc.getElementById('config-content');
        const patternContent = doc.getElementById('pattern-content');

        if (uploadTab && configTab && patternTab && uploadContent && configContent && patternContent) {
            // 업로드 탭 클릭
            uploadTab.addEventListener('click', function() {
                // 탭 활성화 변경
                uploadTab.classList.add('active');
                configTab.classList.remove('active');
                patternTab.classList.remove('active');

                // 컨텐츠 표시 변경
                uploadContent.classList.add('active');
                configContent.classList.remove('active');
                patternContent.classList.remove('active');
            });

            // 설정 탭 클릭
            configTab.addEventListener('click', function() {
                // 탭 활성화 변경
                configTab.classList.add('active');
                uploadTab.classList.remove('active');
                patternTab.classList.remove('active');

                // 컨텐츠 표시 변경
                configContent.classList.add('active');
                uploadContent.classList.remove('active');
                patternContent.classList.remove('active');

                // 설정 목록 업데이트
                updateConfigList();
            });

            // 패턴 탭 클릭
            patternTab.addEventListener('click', function() {
                // 탭 활성화 변경
                patternTab.classList.add('active');
                uploadTab.classList.remove('active');
                configTab.classList.remove('active');

                // 컨텐츠 표시 변경
                patternContent.classList.add('active');
                uploadContent.classList.remove('active');
                configContent.classList.remove('active');
            });
        }

        // 파일 업로드 관련 이벤트
        const uploadArea = doc.getElementById('upload-area');
        const fileInput = doc.getElementById('excel-file');

        if (uploadArea && fileInput) {
            uploadArea.addEventListener('click', function() {
                fileInput.click();
            });

            uploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                this.classList.add('dragging');
            });

            uploadArea.addEventListener('dragleave', function() {
                this.classList.remove('dragging');
            });

            uploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                this.classList.remove('dragging');

                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    fileInput.files = files;
                    readExcelFile(files[0]);
                }
            });

            fileInput.addEventListener('change', function() {
                if (this.files.length > 0) {
                    readExcelFile(this.files[0]);
                }
            });
        }

        // 데이터 열 추가 버튼
        const addDataColumnBtn = doc.getElementById('add-data-column');
        if (addDataColumnBtn) {
            addDataColumnBtn.addEventListener('click', function() {
                addDataColumnSelect();
            });
        }

        // 정렬 열 추가 버튼
        const addSortColumnBtn = doc.getElementById('add-sort-column');
        if (addSortColumnBtn) {
            addSortColumnBtn.addEventListener('click', function() {
                addSortColumnSelect();
            });
        }

        // 설정 저장 버튼
        const saveConfigButton = doc.getElementById('save-config-button');
        if (saveConfigButton) {
            saveConfigButton.addEventListener('click', function() {
                saveCurrentConfig();
            });
        }

        // 설정 불러오기 버튼
        const loadConfigButton = doc.getElementById('load-config-button');
        if (loadConfigButton) {
            loadConfigButton.addEventListener('click', function() {
                loadSelectedConfig();
            });
        }

        // 패턴 분석 버튼
        const analyzeButton = doc.getElementById('analyze-button');
        if (analyzeButton) {
            analyzeButton.addEventListener('click', function() {
                analyzePatternsforprocess();
            });
        }

        // 가공 및 다운로드 버튼
        const processButton = doc.getElementById('process-button');
        if (processButton) {
            processButton.addEventListener('click', function() {
                processAndDownload();
            });
        }

        // 초기 설정 목록 업데이트
        updateConfigList();
    }
})();
